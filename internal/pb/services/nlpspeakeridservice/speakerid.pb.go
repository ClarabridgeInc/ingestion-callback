// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/nlp_speaker_id_service/speakerid.proto

package nlpspeakerid

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// SpeakerIdRequest
//
// request_id   Unique ID, returned in response if present in request.
// language     Language of the conversation.
// turns        List of turns to be processed by speaker ID. A turn consists
//              of a channel_id and some text.
type SpeakerIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Language  nlpbase.Language         `protobuf:"varint,2,opt,name=language,proto3,enum=nlp.Language" json:"language,omitempty"`
	Turns     []*SpeakerIdRequest_Turn `protobuf:"bytes,3,rep,name=turns,proto3" json:"turns,omitempty"`
}

func (x *SpeakerIdRequest) Reset() {
	*x = SpeakerIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerIdRequest) ProtoMessage() {}

func (x *SpeakerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerIdRequest.ProtoReflect.Descriptor instead.
func (*SpeakerIdRequest) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescGZIP(), []int{0}
}

func (x *SpeakerIdRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SpeakerIdRequest) GetLanguage() nlpbase.Language {
	if x != nil {
		return x.Language
	}
	return nlpbase.Language(0)
}

func (x *SpeakerIdRequest) GetTurns() []*SpeakerIdRequest_Turn {
	if x != nil {
		return x.Turns
	}
	return nil
}

//*
// SpeakerIdResponse
//
// request_id  Unique ID, returned if present in request.
// result      Mapping from channel_id to participant type.
// error       Error sqsconsumer.
type SpeakerIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                             `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Result    map[string]nlpbase.ParticipantType `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=nlp.dialog.ParticipantType"`
	Error     string                             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SpeakerIdResponse) Reset() {
	*x = SpeakerIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerIdResponse) ProtoMessage() {}

func (x *SpeakerIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerIdResponse.ProtoReflect.Descriptor instead.
func (*SpeakerIdResponse) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescGZIP(), []int{1}
}

func (x *SpeakerIdResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SpeakerIdResponse) GetResult() map[string]nlpbase.ParticipantType {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SpeakerIdResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SpeakerIdRequest_Turn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SpeakerIdRequest_Turn) Reset() {
	*x = SpeakerIdRequest_Turn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerIdRequest_Turn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerIdRequest_Turn) ProtoMessage() {}

func (x *SpeakerIdRequest_Turn) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerIdRequest_Turn.ProtoReflect.Descriptor instead.
func (*SpeakerIdRequest_Turn) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SpeakerIdRequest_Turn) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SpeakerIdRequest_Turn) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_nlp_nlp_speaker_id_service_speakerid_proto protoreflect.FileDescriptor

var file_nlp_nlp_speaker_id_service_speakerid_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6e, 0x6c, 0x70, 0x2f, 0x6e, 0x6c, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6e, 0x6c,
	0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x05,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xeb, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x5a,
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x16, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x0f, 0x70, 0x62, 0x2f, 0x6e, 0x6c,
	0x70, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescOnce sync.Once
	file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescData = file_nlp_nlp_speaker_id_service_speakerid_proto_rawDesc
)

func file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescGZIP() []byte {
	file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescOnce.Do(func() {
		file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescData)
	})
	return file_nlp_nlp_speaker_id_service_speakerid_proto_rawDescData
}

var file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nlp_nlp_speaker_id_service_speakerid_proto_goTypes = []interface{}{
	(*SpeakerIdRequest)(nil),      // 0: nlp.nlp_speaker_id.SpeakerIdRequest
	(*SpeakerIdResponse)(nil),     // 1: nlp.nlp_speaker_id.SpeakerIdResponse
	(*SpeakerIdRequest_Turn)(nil), // 2: nlp.nlp_speaker_id.SpeakerIdRequest.Turn
	nil,                           // 3: nlp.nlp_speaker_id.SpeakerIdResponse.ResultEntry
	(nlpbase.Language)(0),         // 4: nlp.Language
	(nlpbase.ParticipantType)(0),  // 5: nlp.dialog.ParticipantType
}
var file_nlp_nlp_speaker_id_service_speakerid_proto_depIdxs = []int32{
	4, // 0: nlp.nlp_speaker_id.SpeakerIdRequest.language:type_name -> nlp.Language
	2, // 1: nlp.nlp_speaker_id.SpeakerIdRequest.turns:type_name -> nlp.nlp_speaker_id.SpeakerIdRequest.Turn
	3, // 2: nlp.nlp_speaker_id.SpeakerIdResponse.result:type_name -> nlp.nlp_speaker_id.SpeakerIdResponse.ResultEntry
	5, // 3: nlp.nlp_speaker_id.SpeakerIdResponse.ResultEntry.value:type_name -> nlp.dialog.ParticipantType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nlp_nlp_speaker_id_service_speakerid_proto_init() }
func file_nlp_nlp_speaker_id_service_speakerid_proto_init() {
	if File_nlp_nlp_speaker_id_service_speakerid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerIdRequest_Turn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_nlp_speaker_id_service_speakerid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_nlp_speaker_id_service_speakerid_proto_goTypes,
		DependencyIndexes: file_nlp_nlp_speaker_id_service_speakerid_proto_depIdxs,
		MessageInfos:      file_nlp_nlp_speaker_id_service_speakerid_proto_msgTypes,
	}.Build()
	File_nlp_nlp_speaker_id_service_speakerid_proto = out.File
	file_nlp_nlp_speaker_id_service_speakerid_proto_rawDesc = nil
	file_nlp_nlp_speaker_id_service_speakerid_proto_goTypes = nil
	file_nlp_nlp_speaker_id_service_speakerid_proto_depIdxs = nil
}
