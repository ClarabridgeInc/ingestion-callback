// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ingest/ingest-document.proto

package ingest

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	classification "github.com/ClarabridgeInc/ingestion-callback/internal/pb/services/classification"
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Defines what to do when duplicated document is uploading.
// See also {@code com.clarabridge.realtime.enumerations.DuplicateDetectionType}
// from "platform" repository.
type DuplicateDetectionType int32

const (
	DuplicateDetectionType_NONE                                          DuplicateDetectionType = 0
	DuplicateDetectionType_REJECT_DUPLICATES                             DuplicateDetectionType = 1
	DuplicateDetectionType_UPDATE_STRUCTURED_ATTRIBUTES_ONLY             DuplicateDetectionType = 2
	DuplicateDetectionType_UPDATE_DOCUMENT                               DuplicateDetectionType = 3
	DuplicateDetectionType_ADD_NEW_VERBATIM                              DuplicateDetectionType = 4
	DuplicateDetectionType_UPDATE_STRUCTURED_ATTRIBUTES_FOR_EXISTING_DOC DuplicateDetectionType = 5
)

// Enum value maps for DuplicateDetectionType.
var (
	DuplicateDetectionType_name = map[int32]string{
		0: "NONE",
		1: "REJECT_DUPLICATES",
		2: "UPDATE_STRUCTURED_ATTRIBUTES_ONLY",
		3: "UPDATE_DOCUMENT",
		4: "ADD_NEW_VERBATIM",
		5: "UPDATE_STRUCTURED_ATTRIBUTES_FOR_EXISTING_DOC",
	}
	DuplicateDetectionType_value = map[string]int32{
		"NONE":                              0,
		"REJECT_DUPLICATES":                 1,
		"UPDATE_STRUCTURED_ATTRIBUTES_ONLY": 2,
		"UPDATE_DOCUMENT":                   3,
		"ADD_NEW_VERBATIM":                  4,
		"UPDATE_STRUCTURED_ATTRIBUTES_FOR_EXISTING_DOC": 5,
	}
)

func (x DuplicateDetectionType) Enum() *DuplicateDetectionType {
	p := new(DuplicateDetectionType)
	*p = x
	return p
}

func (x DuplicateDetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicateDetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ingest_ingest_document_proto_enumTypes[0].Descriptor()
}

func (DuplicateDetectionType) Type() protoreflect.EnumType {
	return &file_ingest_ingest_document_proto_enumTypes[0]
}

func (x DuplicateDetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicateDetectionType.Descriptor instead.
func (DuplicateDetectionType) EnumDescriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{0}
}

//*
// Defines status of ingestion document upload operation:
// 1) UNKNOWN - upload request has been processed but unable to read response.
// 2) SUCCESS - a document has been uploaded successfully.
// 3) FAILURE - an exception was thrown while handling the uploading.
// 4) SUCCESS_REJECTED - upload request contains duplicated document
//                       and {@code DuplicateDetectionType.REJECT_DUPLICATES}
//                       duplicate detection type.
// 5) SUCCESS_NO_OP - upload request contains document that does not exist
//                    and {@code DuplicateDetectionType.UPDATE_STRUCTURED_ATTRIBUTES_FOR_EXISTING_DOC}
//                    duplicate detection type.
type IngestDocumentUploadStatus int32

const (
	IngestDocumentUploadStatus_UNKNOWN          IngestDocumentUploadStatus = 0
	IngestDocumentUploadStatus_SUCCESS          IngestDocumentUploadStatus = 1
	IngestDocumentUploadStatus_FAILURE          IngestDocumentUploadStatus = 2
	IngestDocumentUploadStatus_SUCCESS_REJECTED IngestDocumentUploadStatus = 3
	IngestDocumentUploadStatus_SUCCESS_NO_OP    IngestDocumentUploadStatus = 4
)

// Enum value maps for IngestDocumentUploadStatus.
var (
	IngestDocumentUploadStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
		3: "SUCCESS_REJECTED",
		4: "SUCCESS_NO_OP",
	}
	IngestDocumentUploadStatus_value = map[string]int32{
		"UNKNOWN":          0,
		"SUCCESS":          1,
		"FAILURE":          2,
		"SUCCESS_REJECTED": 3,
		"SUCCESS_NO_OP":    4,
	}
)

func (x IngestDocumentUploadStatus) Enum() *IngestDocumentUploadStatus {
	p := new(IngestDocumentUploadStatus)
	*p = x
	return p
}

func (x IngestDocumentUploadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngestDocumentUploadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ingest_ingest_document_proto_enumTypes[1].Descriptor()
}

func (IngestDocumentUploadStatus) Type() protoreflect.EnumType {
	return &file_ingest_ingest_document_proto_enumTypes[1]
}

func (x IngestDocumentUploadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngestDocumentUploadStatus.Descriptor instead.
func (IngestDocumentUploadStatus) EnumDescriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{1}
}

//*
// IngestDocument
// Message to be passthroughs over all components in ingestion pipeline.
//
// version                 Message version.
// uuid                    Unique identifier of a document in pipeline.
// routing_key             RabbitMQ routing key.
// metadata                Document metadata.
// natural_id              Natural key of the document.
// document_date           Document date.
// language_id             Processing language.
// attributes              Map of structured attributes.
// verbatims               List of document verbatims.
// import_api_request      Legacy json format.
// duplicateDetectionType  Defines what to do when duplicated document is uploading.
// classification_result   Classification Result.
// derived_attributes      Map of derived attribute results.
// topology                Message that defines topology specification for the ingestion pipeline.
type IngestDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                int32                                        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid                   string                                       `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RoutingKey             string                                       `protobuf:"bytes,3,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	Metadata               *Metadata                                    `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NaturalId              string                                       `protobuf:"bytes,5,opt,name=natural_id,json=naturalId,proto3" json:"natural_id,omitempty"`
	Source                 string                                       `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	DocumentDate           string                                       `protobuf:"bytes,7,opt,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	LanguageId             string                                       `protobuf:"bytes,8,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Attributes             map[string]*AttributeValue                   `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Verbatims              []*IngestVerbatim                            `protobuf:"bytes,10,rep,name=verbatims,proto3" json:"verbatims,omitempty"`
	ImportApiRequest       string                                       `protobuf:"bytes,11,opt,name=import_api_request,json=importApiRequest,proto3" json:"import_api_request,omitempty"`
	DuplicateDetectionType DuplicateDetectionType                       `protobuf:"varint,12,opt,name=duplicateDetectionType,proto3,enum=ingest.DuplicateDetectionType" json:"duplicateDetectionType,omitempty"`
	ClassificationResult   *classification.DocumentClassificationResult `protobuf:"bytes,13,opt,name=classification_result,json=classificationResult,proto3" json:"classification_result,omitempty"`
	DerivedAttributes      map[string]*AttributeValue                   `protobuf:"bytes,14,rep,name=derived_attributes,json=derivedAttributes,proto3" json:"derived_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Topology               *Topology                                    `protobuf:"bytes,15,opt,name=topology,proto3" json:"topology,omitempty"`
}

func (x *IngestDocument) Reset() {
	*x = IngestDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingest_ingest_document_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestDocument) ProtoMessage() {}

func (x *IngestDocument) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_ingest_document_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestDocument.ProtoReflect.Descriptor instead.
func (*IngestDocument) Descriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{0}
}

func (x *IngestDocument) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IngestDocument) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *IngestDocument) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *IngestDocument) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IngestDocument) GetNaturalId() string {
	if x != nil {
		return x.NaturalId
	}
	return ""
}

func (x *IngestDocument) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IngestDocument) GetDocumentDate() string {
	if x != nil {
		return x.DocumentDate
	}
	return ""
}

func (x *IngestDocument) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *IngestDocument) GetAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *IngestDocument) GetVerbatims() []*IngestVerbatim {
	if x != nil {
		return x.Verbatims
	}
	return nil
}

func (x *IngestDocument) GetImportApiRequest() string {
	if x != nil {
		return x.ImportApiRequest
	}
	return ""
}

func (x *IngestDocument) GetDuplicateDetectionType() DuplicateDetectionType {
	if x != nil {
		return x.DuplicateDetectionType
	}
	return DuplicateDetectionType_NONE
}

func (x *IngestDocument) GetClassificationResult() *classification.DocumentClassificationResult {
	if x != nil {
		return x.ClassificationResult
	}
	return nil
}

func (x *IngestDocument) GetDerivedAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.DerivedAttributes
	}
	return nil
}

func (x *IngestDocument) GetTopology() *Topology {
	if x != nil {
		return x.Topology
	}
	return nil
}

//*
// Metadata
//
// version          Message version.
// instance         CX Designer instance name.
// project_id       Project id.
// account_id       Account id.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Instance  string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	ProjectId int64  `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AccountId int64  `protobuf:"varint,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingest_ingest_document_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_ingest_document_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Metadata) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Metadata) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Metadata) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

//*
// IngestVerbatim
//
// version          Message version.
// verbatim_types   List of verbatim types.
// verbatim_source  Source of the verbatim to be analyzed.
// verbatim_result  Analyzed verbatim.
type IngestVerbatim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32                   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	VerbatimTypes  []string                `protobuf:"bytes,2,rep,name=verbatim_types,json=verbatimTypes,proto3" json:"verbatim_types,omitempty"`
	VerbatimSource *nlpbase.VerbatimSource `protobuf:"bytes,3,opt,name=verbatim_source,json=verbatimSource,proto3" json:"verbatim_source,omitempty"`
	VerbatimResult *nlpbase.VerbatimResult `protobuf:"bytes,4,opt,name=verbatim_result,json=verbatimResult,proto3" json:"verbatim_result,omitempty"`
}

func (x *IngestVerbatim) Reset() {
	*x = IngestVerbatim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingest_ingest_document_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestVerbatim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestVerbatim) ProtoMessage() {}

func (x *IngestVerbatim) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_ingest_document_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestVerbatim.ProtoReflect.Descriptor instead.
func (*IngestVerbatim) Descriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{2}
}

func (x *IngestVerbatim) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IngestVerbatim) GetVerbatimTypes() []string {
	if x != nil {
		return x.VerbatimTypes
	}
	return nil
}

func (x *IngestVerbatim) GetVerbatimSource() *nlpbase.VerbatimSource {
	if x != nil {
		return x.VerbatimSource
	}
	return nil
}

func (x *IngestVerbatim) GetVerbatimResult() *nlpbase.VerbatimResult {
	if x != nil {
		return x.VerbatimResult
	}
	return nil
}

//*
// Response sqsconsumer from CMP to Message Router on document upload operation.
//
// version  Message version.
// status   Document upload status.
// sqsconsumer  Description of the status.
type IngestDocumentUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  IngestDocumentUploadStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ingest.IngestDocumentUploadStatus" json:"status,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=sqsconsumer,proto3" json:"sqsconsumer,omitempty"`
}

func (x *IngestDocumentUploadResponse) Reset() {
	*x = IngestDocumentUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingest_ingest_document_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestDocumentUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestDocumentUploadResponse) ProtoMessage() {}

func (x *IngestDocumentUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_ingest_document_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestDocumentUploadResponse.ProtoReflect.Descriptor instead.
func (*IngestDocumentUploadResponse) Descriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{3}
}

func (x *IngestDocumentUploadResponse) GetStatus() IngestDocumentUploadStatus {
	if x != nil {
		return x.Status
	}
	return IngestDocumentUploadStatus_UNKNOWN
}

func (x *IngestDocumentUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// Topology
// Message that defines topology specification for the ingestion pipeline.
//
// version                 Message version.
// name                    Topology name.
// configuration           Parameters relevant to the topology.
type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Configuration map[string]string `protobuf:"bytes,3,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingest_ingest_document_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_ingest_document_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_ingest_ingest_document_proto_rawDescGZIP(), []int{4}
}

func (x *Topology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topology) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

var File_ingest_ingest_document_proto protoreflect.FileDescriptor

var file_ingest_ingest_document_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6c, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x07, 0x0a,
	0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a,
	0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x5c, 0x0a, 0x12, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x55, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x16, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0xd2, 0x01, 0x0a,
	0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x56, 0x65,
	0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x03, 0xc0, 0x3e,
	0x03, 0x22, 0x79, 0x0a, 0x1c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0xb0, 0x01, 0x0a,
	0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x2a,
	0xbe, 0x01, 0x0a, 0x16, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x44, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x41, 0x54, 0x49, 0x4d, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x43, 0x10, 0x05,
	0x2a, 0x6c, 0x0a, 0x1a, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x10, 0x04, 0x42, 0x2b,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x01,
	0x5a, 0x09, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ingest_ingest_document_proto_rawDescOnce sync.Once
	file_ingest_ingest_document_proto_rawDescData = file_ingest_ingest_document_proto_rawDesc
)

func file_ingest_ingest_document_proto_rawDescGZIP() []byte {
	file_ingest_ingest_document_proto_rawDescOnce.Do(func() {
		file_ingest_ingest_document_proto_rawDescData = protoimpl.X.CompressGZIP(file_ingest_ingest_document_proto_rawDescData)
	})
	return file_ingest_ingest_document_proto_rawDescData
}

var file_ingest_ingest_document_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ingest_ingest_document_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ingest_ingest_document_proto_goTypes = []interface{}{
	(DuplicateDetectionType)(0),          // 0: ingest.DuplicateDetectionType
	(IngestDocumentUploadStatus)(0),      // 1: ingest.IngestDocumentUploadStatus
	(*IngestDocument)(nil),               // 2: ingest.IngestDocument
	(*Metadata)(nil),                     // 3: ingest.Metadata
	(*IngestVerbatim)(nil),               // 4: ingest.IngestVerbatim
	(*IngestDocumentUploadResponse)(nil), // 5: ingest.IngestDocumentUploadResponse
	(*Topology)(nil),                     // 6: ingest.Topology
	nil,                                  // 7: ingest.IngestDocument.AttributesEntry
	nil,                                  // 8: ingest.IngestDocument.DerivedAttributesEntry
	nil,                                  // 9: ingest.Topology.ConfigurationEntry
	(*classification.DocumentClassificationResult)(nil), // 10: classification.DocumentClassificationResult
	(*nlpbase.VerbatimSource)(nil),                      // 11: nlp.VerbatimSource
	(*nlpbase.VerbatimResult)(nil),                      // 12: nlp.VerbatimResult
	(*AttributeValue)(nil),                              // 13: ingest.AttributeValue
}
var file_ingest_ingest_document_proto_depIdxs = []int32{
	3,  // 0: ingest.IngestDocument.metadata:type_name -> ingest.Metadata
	7,  // 1: ingest.IngestDocument.attributes:type_name -> ingest.IngestDocument.AttributesEntry
	4,  // 2: ingest.IngestDocument.verbatims:type_name -> ingest.IngestVerbatim
	0,  // 3: ingest.IngestDocument.duplicateDetectionType:type_name -> ingest.DuplicateDetectionType
	10, // 4: ingest.IngestDocument.classification_result:type_name -> classification.DocumentClassificationResult
	8,  // 5: ingest.IngestDocument.derived_attributes:type_name -> ingest.IngestDocument.DerivedAttributesEntry
	6,  // 6: ingest.IngestDocument.topology:type_name -> ingest.Topology
	11, // 7: ingest.IngestVerbatim.verbatim_source:type_name -> nlp.VerbatimSource
	12, // 8: ingest.IngestVerbatim.verbatim_result:type_name -> nlp.VerbatimResult
	1,  // 9: ingest.IngestDocumentUploadResponse.status:type_name -> ingest.IngestDocumentUploadStatus
	9,  // 10: ingest.Topology.configuration:type_name -> ingest.Topology.ConfigurationEntry
	13, // 11: ingest.IngestDocument.AttributesEntry.value:type_name -> ingest.AttributeValue
	13, // 12: ingest.IngestDocument.DerivedAttributesEntry.value:type_name -> ingest.AttributeValue
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ingest_ingest_document_proto_init() }
func file_ingest_ingest_document_proto_init() {
	if File_ingest_ingest_document_proto != nil {
		return
	}
	file_ingest_attribute_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ingest_ingest_document_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingest_ingest_document_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingest_ingest_document_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestVerbatim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingest_ingest_document_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestDocumentUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingest_ingest_document_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ingest_ingest_document_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ingest_ingest_document_proto_goTypes,
		DependencyIndexes: file_ingest_ingest_document_proto_depIdxs,
		EnumInfos:         file_ingest_ingest_document_proto_enumTypes,
		MessageInfos:      file_ingest_ingest_document_proto_msgTypes,
	}.Build()
	File_ingest_ingest_document_proto = out.File
	file_ingest_ingest_document_proto_rawDesc = nil
	file_ingest_ingest_document_proto_goTypes = nil
	file_ingest_ingest_document_proto_depIdxs = nil
}
