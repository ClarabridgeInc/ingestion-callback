// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/nlp_chapters_service/chapter.proto

package nlpchaptersservice

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// nlp-chapters-service microservice request protobuf.
//
// uid          Unique id. Will return in response if passed in during request.
// inputs       List of sentences that must be processed by the nlp-chapters-service
// source_type  Source type of the data being sent: call/chat
type ChaptersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string             `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Inputs     []*Sentence        `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	SourceType nlpbase.SourceEnum `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=nlp.SourceEnum" json:"source_type,omitempty"`
}

func (x *ChaptersRequest) Reset() {
	*x = ChaptersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaptersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaptersRequest) ProtoMessage() {}

func (x *ChaptersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaptersRequest.ProtoReflect.Descriptor instead.
func (*ChaptersRequest) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_chapters_service_chapter_proto_rawDescGZIP(), []int{0}
}

func (x *ChaptersRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChaptersRequest) GetInputs() []*Sentence {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ChaptersRequest) GetSourceType() nlpbase.SourceEnum {
	if x != nil {
		return x.SourceType
	}
	return nlpbase.SourceEnum(0)
}

//*
// nlp-chapters-service microservice response protobuf.
//
// uid       Unique id. Will return in response if passed in during request.
// outputs   List of sentences that have been processed by the nlp-chapters-service
// error     Error sqsconsumer.
type ChaptersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Outputs []*Sentence `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Error   *Error      `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ChaptersResponse) Reset() {
	*x = ChaptersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaptersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaptersResponse) ProtoMessage() {}

func (x *ChaptersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaptersResponse.ProtoReflect.Descriptor instead.
func (*ChaptersResponse) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_chapters_service_chapter_proto_rawDescGZIP(), []int{1}
}

func (x *ChaptersResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChaptersResponse) GetOutputs() []*Sentence {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ChaptersResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Error
//
// sqsconsumer      Provides failure details.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=sqsconsumer,proto3" json:"sqsconsumer,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_chapters_service_chapter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_chapters_service_chapter_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_nlp_nlp_chapters_service_chapter_proto protoreflect.FileDescriptor

var file_nlp_nlp_chapters_service_chapter_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6e, 0x6c, 0x70, 0x2f, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x27, 0x6e, 0x6c, 0x70, 0x2f, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6c, 0x70,
	0x2f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x91, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x21, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x5e, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x6e, 0x6c, 0x70, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x15, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x15, 0x70, 0x62, 0x2f,
	0x6e, 0x6c, 0x70, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_nlp_chapters_service_chapter_proto_rawDescOnce sync.Once
	file_nlp_nlp_chapters_service_chapter_proto_rawDescData = file_nlp_nlp_chapters_service_chapter_proto_rawDesc
)

func file_nlp_nlp_chapters_service_chapter_proto_rawDescGZIP() []byte {
	file_nlp_nlp_chapters_service_chapter_proto_rawDescOnce.Do(func() {
		file_nlp_nlp_chapters_service_chapter_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_nlp_chapters_service_chapter_proto_rawDescData)
	})
	return file_nlp_nlp_chapters_service_chapter_proto_rawDescData
}

var file_nlp_nlp_chapters_service_chapter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nlp_nlp_chapters_service_chapter_proto_goTypes = []interface{}{
	(*ChaptersRequest)(nil),  // 0: nlp.nlp_chapters_service.ChaptersRequest
	(*ChaptersResponse)(nil), // 1: nlp.nlp_chapters_service.ChaptersResponse
	(*Error)(nil),            // 2: nlp.nlp_chapters_service.Error
	(*Sentence)(nil),         // 3: nlp.nlp_chapters_service.Sentence
	(nlpbase.SourceEnum)(0),  // 4: nlp.SourceEnum
}
var file_nlp_nlp_chapters_service_chapter_proto_depIdxs = []int32{
	3, // 0: nlp.nlp_chapters_service.ChaptersRequest.inputs:type_name -> nlp.nlp_chapters_service.Sentence
	4, // 1: nlp.nlp_chapters_service.ChaptersRequest.source_type:type_name -> nlp.SourceEnum
	3, // 2: nlp.nlp_chapters_service.ChaptersResponse.outputs:type_name -> nlp.nlp_chapters_service.Sentence
	2, // 3: nlp.nlp_chapters_service.ChaptersResponse.error:type_name -> nlp.nlp_chapters_service.Error
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nlp_nlp_chapters_service_chapter_proto_init() }
func file_nlp_nlp_chapters_service_chapter_proto_init() {
	if File_nlp_nlp_chapters_service_chapter_proto != nil {
		return
	}
	file_nlp_nlp_chapters_service_sentence_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nlp_nlp_chapters_service_chapter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaptersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_chapters_service_chapter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaptersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_chapters_service_chapter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_nlp_chapters_service_chapter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_nlp_chapters_service_chapter_proto_goTypes,
		DependencyIndexes: file_nlp_nlp_chapters_service_chapter_proto_depIdxs,
		MessageInfos:      file_nlp_nlp_chapters_service_chapter_proto_msgTypes,
	}.Build()
	File_nlp_nlp_chapters_service_chapter_proto = out.File
	file_nlp_nlp_chapters_service_chapter_proto_rawDesc = nil
	file_nlp_nlp_chapters_service_chapter_proto_goTypes = nil
	file_nlp_nlp_chapters_service_chapter_proto_depIdxs = nil
}
