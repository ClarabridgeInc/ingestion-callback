// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/nlp_chapters_service/sentence.proto

package nlpchaptersservice

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Sentence
//
// tokens             Individual tokens of a sentence
// participant_id     The id of the participant.
// turn_id            The id of the turn the sentence belongs to.
// sentence_id        The id of the sentence in the conversation.
// sentence_type      One or more sentence actionability types.
// reason             The reason for the conversation at sentence level.
// chapters           The conversational chapter the sentence belongs to.
// text               The entire sentence text
type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens        []*Token                     `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	ParticipantId int32                        `protobuf:"varint,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	TurnId        int32                        `protobuf:"varint,3,opt,name=turn_id,json=turnId,proto3" json:"turn_id,omitempty"`
	SentenceId    int32                        `protobuf:"varint,4,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	SentenceType  []nlpbase.SentenceType       `protobuf:"varint,5,rep,packed,name=sentence_type,json=sentenceType,proto3,enum=nlp.SentenceType" json:"sentence_type,omitempty"`
	Reason        []nlpbase.ConversationReason `protobuf:"varint,6,rep,packed,name=reason,proto3,enum=nlp.ConversationReason" json:"reason,omitempty"`
	Chapters      []nlpbase.ChapterType        `protobuf:"varint,7,rep,packed,name=chapters,proto3,enum=nlp.ChapterType" json:"chapters,omitempty"`
	Text          string                       `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_chapters_service_sentence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_chapters_service_sentence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_chapters_service_sentence_proto_rawDescGZIP(), []int{0}
}

func (x *Sentence) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Sentence) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Sentence) GetTurnId() int32 {
	if x != nil {
		return x.TurnId
	}
	return 0
}

func (x *Sentence) GetSentenceId() int32 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *Sentence) GetSentenceType() []nlpbase.SentenceType {
	if x != nil {
		return x.SentenceType
	}
	return nil
}

func (x *Sentence) GetReason() []nlpbase.ConversationReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Sentence) GetChapters() []nlpbase.ChapterType {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Sentence) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

//*
// Token
//
// text               The token's original text.
// normal_form        The token's lemma.
// identifier_type    Tokens's identifier_type
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text           string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	NormalForm     string                 `protobuf:"bytes,2,opt,name=normal_form,json=normalForm,proto3" json:"normal_form,omitempty"`
	Start          int32                  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End            int32                  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	IdentifierType nlpbase.IdentifierType `protobuf:"varint,5,opt,name=identifier_type,json=identifierType,proto3,enum=nlp.IdentifierType" json:"identifier_type,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_chapters_service_sentence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_chapters_service_sentence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_chapters_service_sentence_proto_rawDescGZIP(), []int{1}
}

func (x *Token) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Token) GetNormalForm() string {
	if x != nil {
		return x.NormalForm
	}
	return ""
}

func (x *Token) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Token) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Token) GetIdentifierType() nlpbase.IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return nlpbase.IdentifierType(0)
}

var File_nlp_nlp_chapters_service_sentence_proto protoreflect.FileDescriptor

var file_nlp_nlp_chapters_service_sentence_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x6c, 0x70, 0x2f, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x6c, 0x70, 0x2e, 0x6e,
	0x6c, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x5f, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e,
	0x6c, 0x70, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x16, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x15, 0x70, 0x62, 0x2f,
	0x6e, 0x6c, 0x70, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_nlp_chapters_service_sentence_proto_rawDescOnce sync.Once
	file_nlp_nlp_chapters_service_sentence_proto_rawDescData = file_nlp_nlp_chapters_service_sentence_proto_rawDesc
)

func file_nlp_nlp_chapters_service_sentence_proto_rawDescGZIP() []byte {
	file_nlp_nlp_chapters_service_sentence_proto_rawDescOnce.Do(func() {
		file_nlp_nlp_chapters_service_sentence_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_nlp_chapters_service_sentence_proto_rawDescData)
	})
	return file_nlp_nlp_chapters_service_sentence_proto_rawDescData
}

var file_nlp_nlp_chapters_service_sentence_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nlp_nlp_chapters_service_sentence_proto_goTypes = []interface{}{
	(*Sentence)(nil),                // 0: nlp.nlp_chapters_service.Sentence
	(*Token)(nil),                   // 1: nlp.nlp_chapters_service.Token
	(nlpbase.SentenceType)(0),       // 2: nlp.SentenceType
	(nlpbase.ConversationReason)(0), // 3: nlp.ConversationReason
	(nlpbase.ChapterType)(0),        // 4: nlp.ChapterType
	(nlpbase.IdentifierType)(0),     // 5: nlp.IdentifierType
}
var file_nlp_nlp_chapters_service_sentence_proto_depIdxs = []int32{
	1, // 0: nlp.nlp_chapters_service.Sentence.tokens:type_name -> nlp.nlp_chapters_service.Token
	2, // 1: nlp.nlp_chapters_service.Sentence.sentence_type:type_name -> nlp.SentenceType
	3, // 2: nlp.nlp_chapters_service.Sentence.reason:type_name -> nlp.ConversationReason
	4, // 3: nlp.nlp_chapters_service.Sentence.chapters:type_name -> nlp.ChapterType
	5, // 4: nlp.nlp_chapters_service.Token.identifier_type:type_name -> nlp.IdentifierType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_nlp_nlp_chapters_service_sentence_proto_init() }
func file_nlp_nlp_chapters_service_sentence_proto_init() {
	if File_nlp_nlp_chapters_service_sentence_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nlp_nlp_chapters_service_sentence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_chapters_service_sentence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_nlp_chapters_service_sentence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_nlp_chapters_service_sentence_proto_goTypes,
		DependencyIndexes: file_nlp_nlp_chapters_service_sentence_proto_depIdxs,
		MessageInfos:      file_nlp_nlp_chapters_service_sentence_proto_msgTypes,
	}.Build()
	File_nlp_nlp_chapters_service_sentence_proto = out.File
	file_nlp_nlp_chapters_service_sentence_proto_rawDesc = nil
	file_nlp_nlp_chapters_service_sentence_proto_goTypes = nil
	file_nlp_nlp_chapters_service_sentence_proto_depIdxs = nil
}
