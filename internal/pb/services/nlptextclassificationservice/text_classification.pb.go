// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/nlp_text_classification_service/text_classification.proto

package nlptextclassification

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// TextClassificationRequest
//
// request_id  Unique ID, returned in response if present in request.
// inputs      List of items to be processed by the classification service.
// tasks       List of prediction tasks to run.
// language    Language of items to be processed.
// source_type The source type (text, call, chat) of the data.
// top_k       Return top k predictions. Default is to return entire label
//             distribution.
// min_p       Minimum probability. Default is 0.
type TextClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string                            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Inputs     []*TextClassificationRequest_Item `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Tasks      []nlpbase.ClassificationTask      `protobuf:"varint,3,rep,packed,name=tasks,proto3,enum=nlp.ClassificationTask" json:"tasks,omitempty"`
	Language   nlpbase.Language                  `protobuf:"varint,4,opt,name=language,proto3,enum=nlp.Language" json:"language,omitempty"`
	SourceType nlpbase.SourceEnum                `protobuf:"varint,7,opt,name=source_type,json=sourceType,proto3,enum=nlp.SourceEnum" json:"source_type,omitempty"`
	TopK       int32                             `protobuf:"varint,5,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	MinP       float32                           `protobuf:"fixed32,6,opt,name=min_p,json=minP,proto3" json:"min_p,omitempty"`
}

func (x *TextClassificationRequest) Reset() {
	*x = TextClassificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationRequest) ProtoMessage() {}

func (x *TextClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationRequest.ProtoReflect.Descriptor instead.
func (*TextClassificationRequest) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP(), []int{0}
}

func (x *TextClassificationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TextClassificationRequest) GetInputs() []*TextClassificationRequest_Item {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TextClassificationRequest) GetTasks() []nlpbase.ClassificationTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TextClassificationRequest) GetLanguage() nlpbase.Language {
	if x != nil {
		return x.Language
	}
	return nlpbase.Language(0)
}

func (x *TextClassificationRequest) GetSourceType() nlpbase.SourceEnum {
	if x != nil {
		return x.SourceType
	}
	return nlpbase.SourceEnum(0)
}

func (x *TextClassificationRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *TextClassificationRequest) GetMinP() float32 {
	if x != nil {
		return x.MinP
	}
	return 0
}

//*
// TextClassificationResponse
//
// request_id  Unique ID, returned if present in request.
// results     One result per input item per model.
// error       Error sqsconsumer.
type TextClassificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                               `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Results   []*TextClassificationResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Error     string                               `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TextClassificationResponse) Reset() {
	*x = TextClassificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationResponse) ProtoMessage() {}

func (x *TextClassificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationResponse.ProtoReflect.Descriptor instead.
func (*TextClassificationResponse) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP(), []int{1}
}

func (x *TextClassificationResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TextClassificationResponse) GetResults() []*TextClassificationResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TextClassificationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

//*
// Lists of predictions are in descending order of probability.
type Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Probability float32 `protobuf:"fixed32,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *Prediction) Reset() {
	*x = Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prediction) ProtoMessage() {}

func (x *Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prediction.ProtoReflect.Descriptor instead.
func (*Prediction) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP(), []int{2}
}

func (x *Prediction) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Prediction) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type TextClassificationRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId          string                  `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Text            string                  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ParticipantType nlpbase.ParticipantType `protobuf:"varint,3,opt,name=participant_type,json=participantType,proto3,enum=nlp.dialog.ParticipantType" json:"participant_type,omitempty"`
}

func (x *TextClassificationRequest_Item) Reset() {
	*x = TextClassificationRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationRequest_Item) ProtoMessage() {}

func (x *TextClassificationRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationRequest_Item.ProtoReflect.Descriptor instead.
func (*TextClassificationRequest_Item) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TextClassificationRequest_Item) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TextClassificationRequest_Item) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextClassificationRequest_Item) GetParticipantType() nlpbase.ParticipantType {
	if x != nil {
		return x.ParticipantType
	}
	return nlpbase.ParticipantType(0)
}

type TextClassificationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      string                     `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Task        nlpbase.ClassificationTask `protobuf:"varint,2,opt,name=task,proto3,enum=nlp.ClassificationTask" json:"task,omitempty"`
	Predictions []*Prediction              `protobuf:"bytes,3,rep,name=predictions,proto3" json:"predictions,omitempty"`
}

func (x *TextClassificationResponse_Result) Reset() {
	*x = TextClassificationResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationResponse_Result) ProtoMessage() {}

func (x *TextClassificationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationResponse_Result.ProtoReflect.Descriptor instead.
func (*TextClassificationResponse_Result) Descriptor() ([]byte, []int) {
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TextClassificationResponse_Result) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TextClassificationResponse_Result) GetTask() nlpbase.ClassificationTask {
	if x != nil {
		return x.Task
	}
	return nlpbase.ClassificationTask(0)
}

func (x *TextClassificationResponse_Result) GetPredictions() []*Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

var File_nlp_nlp_text_classification_service_text_classification_proto protoreflect.FileDescriptor

var file_nlp_nlp_text_classification_service_text_classification_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x6e, 0x6c, 0x70, 0x2f, 0x6e, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x6e, 0x6c,
	0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x6e, 0x6c, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x19, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x50, 0x1a, 0x7b, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x1a, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x6e, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x99, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x0a, 0x36, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x6e, 0x6c, 0x70, 0x74, 0x65, 0x78, 0x74, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x1f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x18, 0x70, 0x62, 0x2f, 0x6e, 0x6c, 0x70, 0x74,
	0x65, 0x78, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_nlp_text_classification_service_text_classification_proto_rawDescOnce sync.Once
	file_nlp_nlp_text_classification_service_text_classification_proto_rawDescData = file_nlp_nlp_text_classification_service_text_classification_proto_rawDesc
)

func file_nlp_nlp_text_classification_service_text_classification_proto_rawDescGZIP() []byte {
	file_nlp_nlp_text_classification_service_text_classification_proto_rawDescOnce.Do(func() {
		file_nlp_nlp_text_classification_service_text_classification_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_nlp_text_classification_service_text_classification_proto_rawDescData)
	})
	return file_nlp_nlp_text_classification_service_text_classification_proto_rawDescData
}

var file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nlp_nlp_text_classification_service_text_classification_proto_goTypes = []interface{}{
	(*TextClassificationRequest)(nil),         // 0: nlp.nlp_text_classification.TextClassificationRequest
	(*TextClassificationResponse)(nil),        // 1: nlp.nlp_text_classification.TextClassificationResponse
	(*Prediction)(nil),                        // 2: nlp.nlp_text_classification.Prediction
	(*TextClassificationRequest_Item)(nil),    // 3: nlp.nlp_text_classification.TextClassificationRequest.Item
	(*TextClassificationResponse_Result)(nil), // 4: nlp.nlp_text_classification.TextClassificationResponse.Result
	(nlpbase.ClassificationTask)(0),           // 5: nlp.ClassificationTask
	(nlpbase.Language)(0),                     // 6: nlp.Language
	(nlpbase.SourceEnum)(0),                   // 7: nlp.SourceEnum
	(nlpbase.ParticipantType)(0),              // 8: nlp.dialog.ParticipantType
}
var file_nlp_nlp_text_classification_service_text_classification_proto_depIdxs = []int32{
	3, // 0: nlp.nlp_text_classification.TextClassificationRequest.inputs:type_name -> nlp.nlp_text_classification.TextClassificationRequest.Item
	5, // 1: nlp.nlp_text_classification.TextClassificationRequest.tasks:type_name -> nlp.ClassificationTask
	6, // 2: nlp.nlp_text_classification.TextClassificationRequest.language:type_name -> nlp.Language
	7, // 3: nlp.nlp_text_classification.TextClassificationRequest.source_type:type_name -> nlp.SourceEnum
	4, // 4: nlp.nlp_text_classification.TextClassificationResponse.results:type_name -> nlp.nlp_text_classification.TextClassificationResponse.Result
	8, // 5: nlp.nlp_text_classification.TextClassificationRequest.Item.participant_type:type_name -> nlp.dialog.ParticipantType
	5, // 6: nlp.nlp_text_classification.TextClassificationResponse.Result.task:type_name -> nlp.ClassificationTask
	2, // 7: nlp.nlp_text_classification.TextClassificationResponse.Result.predictions:type_name -> nlp.nlp_text_classification.Prediction
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_nlp_nlp_text_classification_service_text_classification_proto_init() }
func file_nlp_nlp_text_classification_service_text_classification_proto_init() {
	if File_nlp_nlp_text_classification_service_text_classification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassificationRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassificationResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_nlp_text_classification_service_text_classification_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_nlp_text_classification_service_text_classification_proto_goTypes,
		DependencyIndexes: file_nlp_nlp_text_classification_service_text_classification_proto_depIdxs,
		MessageInfos:      file_nlp_nlp_text_classification_service_text_classification_proto_msgTypes,
	}.Build()
	File_nlp_nlp_text_classification_service_text_classification_proto = out.File
	file_nlp_nlp_text_classification_service_text_classification_proto_rawDesc = nil
	file_nlp_nlp_text_classification_service_text_classification_proto_goTypes = nil
	file_nlp_nlp_text_classification_service_text_classification_proto_depIdxs = nil
}
