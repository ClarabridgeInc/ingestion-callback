// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/svc/svc.proto

package nlp

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error_Code int32

const (
	Error_UNEXPECTED Error_Code = 0 //unexpected failure, uncategorized error
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "UNEXPECTED",
	}
	Error_Code_value = map[string]int32{
		"UNEXPECTED": 0,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_svc_svc_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_nlp_svc_svc_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_nlp_svc_svc_proto_rawDescGZIP(), []int{3, 0}
}

//*
// NLP Request
//
// version          Message version.
// verbatim_source  Source of the verbatim to be analyzed.
// resource_key     Information about where to lookup for custom resources.
// debug            If true, return debug info in response.
// id               (opt) Unique id. Will return in response if passed in during request.
type NLPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32                   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	VerbatimSource *nlpbase.VerbatimSource `protobuf:"bytes,2,opt,name=verbatim_source,json=verbatimSource,proto3" json:"verbatim_source,omitempty"`
	ResourceKey    *NLPResourceKey         `protobuf:"bytes,5,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
	Debug          bool                    `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty"`
	Id             string                  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NLPRequest) Reset() {
	*x = NLPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_svc_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLPRequest) ProtoMessage() {}

func (x *NLPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_svc_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLPRequest.ProtoReflect.Descriptor instead.
func (*NLPRequest) Descriptor() ([]byte, []int) {
	return file_nlp_svc_svc_proto_rawDescGZIP(), []int{0}
}

func (x *NLPRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NLPRequest) GetVerbatimSource() *nlpbase.VerbatimSource {
	if x != nil {
		return x.VerbatimSource
	}
	return nil
}

func (x *NLPRequest) GetResourceKey() *NLPResourceKey {
	if x != nil {
		return x.ResourceKey
	}
	return nil
}

func (x *NLPRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *NLPRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// NLP Resource Key
//
// version              Message version.
// designer_instance    CX Designer instance name from discovery service.
// account_id           Account id.
type NLPResourceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	DesignerInstance string `protobuf:"bytes,2,opt,name=designer_instance,json=designerInstance,proto3" json:"designer_instance,omitempty"`
	AccountId        int64  `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *NLPResourceKey) Reset() {
	*x = NLPResourceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_svc_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLPResourceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLPResourceKey) ProtoMessage() {}

func (x *NLPResourceKey) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_svc_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLPResourceKey.ProtoReflect.Descriptor instead.
func (*NLPResourceKey) Descriptor() ([]byte, []int) {
	return file_nlp_svc_svc_proto_rawDescGZIP(), []int{1}
}

func (x *NLPResourceKey) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NLPResourceKey) GetDesignerInstance() string {
	if x != nil {
		return x.DesignerInstance
	}
	return ""
}

func (x *NLPResourceKey) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

//*
// NLP Response
//
// version          Message version.
// verbatim_result  Analyzed verbatim.
// debug_info       Debug info as key-value pairs (if debug was True on request).
// error            Non empty value is a signal about error.
type NLPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32                   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	VerbatimResult *nlpbase.VerbatimResult `protobuf:"bytes,5,opt,name=verbatim_result,json=verbatimResult,proto3" json:"verbatim_result,omitempty"`
	DebugInfo      map[string]string       `protobuf:"bytes,3,rep,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error          *Error                  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *NLPResponse) Reset() {
	*x = NLPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_svc_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLPResponse) ProtoMessage() {}

func (x *NLPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_svc_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLPResponse.ProtoReflect.Descriptor instead.
func (*NLPResponse) Descriptor() ([]byte, []int) {
	return file_nlp_svc_svc_proto_rawDescGZIP(), []int{2}
}

func (x *NLPResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NLPResponse) GetVerbatimResult() *nlpbase.VerbatimResult {
	if x != nil {
		return x.VerbatimResult
	}
	return nil
}

func (x *NLPResponse) GetDebugInfo() map[string]string {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *NLPResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//*
// Error
// Signal about fail process verbatim.
//
// version      Message version.
// code         Error code.
// sqsconsumer      Error sqsconsumer.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Code    Error_Code `protobuf:"varint,2,opt,name=code,proto3,enum=nlp.svc.Error_Code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=sqsconsumer,proto3" json:"sqsconsumer,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_svc_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_svc_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_nlp_svc_svc_proto_rawDescGZIP(), []int{3}
}

func (x *Error) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Error) GetCode() Error_Code {
	if x != nil {
		return x.Code
	}
	return Error_UNEXPECTED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_nlp_svc_svc_proto protoreflect.FileDescriptor

var file_nlp_svc_svc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x6c, 0x70, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x6c, 0x70, 0x2e, 0x73, 0x76, 0x63, 0x1a, 0x12, 0x6e, 0x6c,
	0x70, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcb, 0x01, 0x0a, 0x0a, 0x4e, 0x4c, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62,
	0x61, 0x74, 0x69, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x4c, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0x7b, 0x0a,
	0x0e, 0x4e, 0x4c, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0x98, 0x02, 0x0a, 0x0b, 0x4e,
	0x4c, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x4e, 0x4c, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x3c, 0x0a, 0x0e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x03, 0xc0, 0x3e, 0x02, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x16, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x42, 0x29, 0x0a, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x73, 0x76, 0x63, 0x50, 0x01, 0x5a, 0x06, 0x70, 0x62,
	0x2f, 0x6e, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_svc_svc_proto_rawDescOnce sync.Once
	file_nlp_svc_svc_proto_rawDescData = file_nlp_svc_svc_proto_rawDesc
)

func file_nlp_svc_svc_proto_rawDescGZIP() []byte {
	file_nlp_svc_svc_proto_rawDescOnce.Do(func() {
		file_nlp_svc_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_svc_svc_proto_rawDescData)
	})
	return file_nlp_svc_svc_proto_rawDescData
}

var file_nlp_svc_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nlp_svc_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nlp_svc_svc_proto_goTypes = []interface{}{
	(Error_Code)(0),                // 0: nlp.svc.Error.Code
	(*NLPRequest)(nil),             // 1: nlp.svc.NLPRequest
	(*NLPResourceKey)(nil),         // 2: nlp.svc.NLPResourceKey
	(*NLPResponse)(nil),            // 3: nlp.svc.NLPResponse
	(*Error)(nil),                  // 4: nlp.svc.Error
	nil,                            // 5: nlp.svc.NLPResponse.DebugInfoEntry
	(*nlpbase.VerbatimSource)(nil), // 6: nlp.VerbatimSource
	(*nlpbase.VerbatimResult)(nil), // 7: nlp.VerbatimResult
}
var file_nlp_svc_svc_proto_depIdxs = []int32{
	6, // 0: nlp.svc.NLPRequest.verbatim_source:type_name -> nlp.VerbatimSource
	2, // 1: nlp.svc.NLPRequest.resource_key:type_name -> nlp.svc.NLPResourceKey
	7, // 2: nlp.svc.NLPResponse.verbatim_result:type_name -> nlp.VerbatimResult
	5, // 3: nlp.svc.NLPResponse.debug_info:type_name -> nlp.svc.NLPResponse.DebugInfoEntry
	4, // 4: nlp.svc.NLPResponse.error:type_name -> nlp.svc.Error
	0, // 5: nlp.svc.Error.code:type_name -> nlp.svc.Error.Code
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_nlp_svc_svc_proto_init() }
func file_nlp_svc_svc_proto_init() {
	if File_nlp_svc_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nlp_svc_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_svc_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLPResourceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_svc_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_svc_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_svc_svc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_svc_svc_proto_goTypes,
		DependencyIndexes: file_nlp_svc_svc_proto_depIdxs,
		EnumInfos:         file_nlp_svc_svc_proto_enumTypes,
		MessageInfos:      file_nlp_svc_svc_proto_msgTypes,
	}.Build()
	File_nlp_svc_svc_proto = out.File
	file_nlp_svc_svc_proto_rawDesc = nil
	file_nlp_svc_svc_proto_goTypes = nil
	file_nlp_svc_svc_proto_depIdxs = nil
}
