// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: sentiment/sentiment.proto

package sentiment

import (
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// SentenceSentiment
//
// score                              Sentiment value for this sentence.
// d_score                            Degree sentiment value for this sentence.
// positive                           Number of tokens with positive sentiment.
// negative                           Number of tokens with negative sentiment.
// sentiment_exception_rules          List of sentiment exception rules applied to this sentence.
type SentenceSentiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                 int32                     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Score                   float32                   `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	DScore                  float32                   `protobuf:"fixed32,3,opt,name=d_score,json=dScore,proto3" json:"d_score,omitempty"`
	Positive                int32                     `protobuf:"varint,4,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative                int32                     `protobuf:"varint,5,opt,name=negative,proto3" json:"negative,omitempty"`
	SentimentExceptionRules []*SentimentExceptionRule `protobuf:"bytes,6,rep,name=sentiment_exception_rules,json=sentimentExceptionRules,proto3" json:"sentiment_exception_rules,omitempty"`
}

func (x *SentenceSentiment) Reset() {
	*x = SentenceSentiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentiment_sentiment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceSentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceSentiment) ProtoMessage() {}

func (x *SentenceSentiment) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_sentiment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceSentiment.ProtoReflect.Descriptor instead.
func (*SentenceSentiment) Descriptor() ([]byte, []int) {
	return file_sentiment_sentiment_proto_rawDescGZIP(), []int{0}
}

func (x *SentenceSentiment) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SentenceSentiment) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SentenceSentiment) GetDScore() float32 {
	if x != nil {
		return x.DScore
	}
	return 0
}

func (x *SentenceSentiment) GetPositive() int32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *SentenceSentiment) GetNegative() int32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

func (x *SentenceSentiment) GetSentimentExceptionRules() []*SentimentExceptionRule {
	if x != nil {
		return x.SentimentExceptionRules
	}
	return nil
}

//*
// SentimentExceptionRule
//
// token_name                         Name of the token on which the exception rule is applied.
// token_start_position               Start position of the token in the sentence.
// related_token_start                Start position of the related token in the sentence.
// sentiment_ngram_rule               Details about the ngram rule.
type SentimentExceptionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	TokenName          string                 `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenStartPosition int32                  `protobuf:"varint,3,opt,name=token_start_position,json=tokenStartPosition,proto3" json:"token_start_position,omitempty"`
	RelatedTokenStart  *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=related_token_start,json=relatedTokenStart,proto3" json:"related_token_start,omitempty"`
	SentimentNgramRule *SentimentNgramRule    `protobuf:"bytes,5,opt,name=sentiment_ngram_rule,json=sentimentNgramRule,proto3" json:"sentiment_ngram_rule,omitempty"`
}

func (x *SentimentExceptionRule) Reset() {
	*x = SentimentExceptionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentiment_sentiment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentExceptionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentExceptionRule) ProtoMessage() {}

func (x *SentimentExceptionRule) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_sentiment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentExceptionRule.ProtoReflect.Descriptor instead.
func (*SentimentExceptionRule) Descriptor() ([]byte, []int) {
	return file_sentiment_sentiment_proto_rawDescGZIP(), []int{1}
}

func (x *SentimentExceptionRule) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SentimentExceptionRule) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *SentimentExceptionRule) GetTokenStartPosition() int32 {
	if x != nil {
		return x.TokenStartPosition
	}
	return 0
}

func (x *SentimentExceptionRule) GetRelatedTokenStart() *wrapperspb.Int32Value {
	if x != nil {
		return x.RelatedTokenStart
	}
	return nil
}

func (x *SentimentExceptionRule) GetSentimentNgramRule() *SentimentNgramRule {
	if x != nil {
		return x.SentimentNgramRule
	}
	return nil
}

//*
// SentimentNgramRule
//
// rule_id                            ID of the exception rule.
// rule                               Name of the rule.
// negated                            Whether the rule is to negate sentiment value.
// sentiment                          The sentiment value this rule sets to the token.
// d_negated                          Whether the rule is to negate the degree sentiment value.
// d_relative_sentiment               The relative degree sentiment value this rule is adding to the token.
// d_absolute_sentiment               The degress sentiment value this rule sets to the token.
// language                           Language this rule is applied.
// positive_positions                 The positions of the neighbor tokens.
type SentimentNgramRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	RuleId             int64                  `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Rule               string                 `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	Negated            bool                   `protobuf:"varint,4,opt,name=negated,proto3" json:"negated,omitempty"`
	Sentiment          *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	DNegated           *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=d_negated,json=dNegated,proto3" json:"d_negated,omitempty"`
	DRelativeSentiment *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=d_relative_sentiment,json=dRelativeSentiment,proto3" json:"d_relative_sentiment,omitempty"`
	DAbsoluteSentiment *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=d_absolute_sentiment,json=dAbsoluteSentiment,proto3" json:"d_absolute_sentiment,omitempty"`
	Language           string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	PositivePositions  []int32                `protobuf:"varint,10,rep,packed,name=positive_positions,json=positivePositions,proto3" json:"positive_positions,omitempty"`
}

func (x *SentimentNgramRule) Reset() {
	*x = SentimentNgramRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentiment_sentiment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentNgramRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentNgramRule) ProtoMessage() {}

func (x *SentimentNgramRule) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_sentiment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentNgramRule.ProtoReflect.Descriptor instead.
func (*SentimentNgramRule) Descriptor() ([]byte, []int) {
	return file_sentiment_sentiment_proto_rawDescGZIP(), []int{2}
}

func (x *SentimentNgramRule) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SentimentNgramRule) GetRuleId() int64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *SentimentNgramRule) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *SentimentNgramRule) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *SentimentNgramRule) GetSentiment() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

func (x *SentimentNgramRule) GetDNegated() *wrapperspb.Int32Value {
	if x != nil {
		return x.DNegated
	}
	return nil
}

func (x *SentimentNgramRule) GetDRelativeSentiment() *wrapperspb.Int32Value {
	if x != nil {
		return x.DRelativeSentiment
	}
	return nil
}

func (x *SentimentNgramRule) GetDAbsoluteSentiment() *wrapperspb.Int32Value {
	if x != nil {
		return x.DAbsoluteSentiment
	}
	return nil
}

func (x *SentimentNgramRule) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SentimentNgramRule) GetPositivePositions() []int32 {
	if x != nil {
		return x.PositivePositions
	}
	return nil
}

//*
// TokenSentiment
//
// sentiment                          Sentiment value of the token.
// was_negated                        Whether the sentiment value is negated.
// was_intensified                    Whether the sentiment value is intensified.
// was_weakened                       Whether the sentiment value is weakened.
type TokenSentiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Sentiment      int32 `protobuf:"varint,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	WasNegated     bool  `protobuf:"varint,3,opt,name=was_negated,json=wasNegated,proto3" json:"was_negated,omitempty"`
	WasIntensified bool  `protobuf:"varint,4,opt,name=was_intensified,json=wasIntensified,proto3" json:"was_intensified,omitempty"`
	WasWeakened    bool  `protobuf:"varint,5,opt,name=was_weakened,json=wasWeakened,proto3" json:"was_weakened,omitempty"`
}

func (x *TokenSentiment) Reset() {
	*x = TokenSentiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentiment_sentiment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenSentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSentiment) ProtoMessage() {}

func (x *TokenSentiment) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_sentiment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSentiment.ProtoReflect.Descriptor instead.
func (*TokenSentiment) Descriptor() ([]byte, []int) {
	return file_sentiment_sentiment_proto_rawDescGZIP(), []int{3}
}

func (x *TokenSentiment) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TokenSentiment) GetSentiment() int32 {
	if x != nil {
		return x.Sentiment
	}
	return 0
}

func (x *TokenSentiment) GetWasNegated() bool {
	if x != nil {
		return x.WasNegated
	}
	return false
}

func (x *TokenSentiment) GetWasIntensified() bool {
	if x != nil {
		return x.WasIntensified
	}
	return false
}

func (x *TokenSentiment) GetWasWeakened() bool {
	if x != nil {
		return x.WasWeakened
	}
	return false
}

var File_sentiment_sentiment_proto protoreflect.FileDescriptor

var file_sentiment_sentiment_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x19,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x03, 0xc0, 0x3e, 0x01,
	0x22, 0xa6, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x75, 0x6c, 0x65, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0xd8, 0x03, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x64, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x14, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x64, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x64, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x03, 0xc0, 0x3e, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x61, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x73,
	0x5f, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x77, 0x61, 0x73, 0x57, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x65, 0x64, 0x3a, 0x03, 0xc0, 0x3e,
	0x01, 0x42, 0x31, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x0c, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sentiment_sentiment_proto_rawDescOnce sync.Once
	file_sentiment_sentiment_proto_rawDescData = file_sentiment_sentiment_proto_rawDesc
)

func file_sentiment_sentiment_proto_rawDescGZIP() []byte {
	file_sentiment_sentiment_proto_rawDescOnce.Do(func() {
		file_sentiment_sentiment_proto_rawDescData = protoimpl.X.CompressGZIP(file_sentiment_sentiment_proto_rawDescData)
	})
	return file_sentiment_sentiment_proto_rawDescData
}

var file_sentiment_sentiment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sentiment_sentiment_proto_goTypes = []interface{}{
	(*SentenceSentiment)(nil),      // 0: sentiment.SentenceSentiment
	(*SentimentExceptionRule)(nil), // 1: sentiment.SentimentExceptionRule
	(*SentimentNgramRule)(nil),     // 2: sentiment.SentimentNgramRule
	(*TokenSentiment)(nil),         // 3: sentiment.TokenSentiment
	(*wrapperspb.Int32Value)(nil),  // 4: google.protobuf.Int32Value
}
var file_sentiment_sentiment_proto_depIdxs = []int32{
	1, // 0: sentiment.SentenceSentiment.sentiment_exception_rules:type_name -> sentiment.SentimentExceptionRule
	4, // 1: sentiment.SentimentExceptionRule.related_token_start:type_name -> google.protobuf.Int32Value
	2, // 2: sentiment.SentimentExceptionRule.sentiment_ngram_rule:type_name -> sentiment.SentimentNgramRule
	4, // 3: sentiment.SentimentNgramRule.sentiment:type_name -> google.protobuf.Int32Value
	4, // 4: sentiment.SentimentNgramRule.d_negated:type_name -> google.protobuf.Int32Value
	4, // 5: sentiment.SentimentNgramRule.d_relative_sentiment:type_name -> google.protobuf.Int32Value
	4, // 6: sentiment.SentimentNgramRule.d_absolute_sentiment:type_name -> google.protobuf.Int32Value
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_sentiment_sentiment_proto_init() }
func file_sentiment_sentiment_proto_init() {
	if File_sentiment_sentiment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sentiment_sentiment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceSentiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sentiment_sentiment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentExceptionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sentiment_sentiment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentNgramRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sentiment_sentiment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenSentiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sentiment_sentiment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sentiment_sentiment_proto_goTypes,
		DependencyIndexes: file_sentiment_sentiment_proto_depIdxs,
		MessageInfos:      file_sentiment_sentiment_proto_msgTypes,
	}.Build()
	File_sentiment_sentiment_proto = out.File
	file_sentiment_sentiment_proto_rawDesc = nil
	file_sentiment_sentiment_proto_goTypes = nil
	file_sentiment_sentiment_proto_depIdxs = nil
}
