// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: storage/sentence-storage.proto

package storage

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Sentence
//
// version              Message version.
// tokens               List of tokens with normalized forms.
// relations            List of binary relationships.
// sentence_type        List of detected sentence types.
// emotion_type         List of detected emotions.
type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Tokens       []*NormalizedToken     `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Relations    []*Relation            `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	SentenceType []nlpbase.SentenceType `protobuf:"varint,3,rep,packed,name=sentence_type,json=sentenceType,proto3,enum=nlp.SentenceType" json:"sentence_type,omitempty"`
	EmotionType  []nlpbase.EmotionType  `protobuf:"varint,5,rep,packed,name=emotion_type,json=emotionType,proto3,enum=nlp.EmotionType" json:"emotion_type,omitempty"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_sentence_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_storage_sentence_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_storage_sentence_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Sentence) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Sentence) GetTokens() []*NormalizedToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Sentence) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Sentence) GetSentenceType() []nlpbase.SentenceType {
	if x != nil {
		return x.SentenceType
	}
	return nil
}

func (x *Sentence) GetEmotionType() []nlpbase.EmotionType {
	if x != nil {
		return x.EmotionType
	}
	return nil
}

//*
// ConversationSentence
//
// version          Message version.
// time_interval    The start and end time of the sentence.
// participant      Participant metadata.
// reason           The reason at sentence level.
// chapter          The chapter at sentence level.
type ConversationSentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      int32                        `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	TimeInterval *nlpbase.TimeInterval        `protobuf:"bytes,1,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	Participant  *nlpbase.Participant         `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	Reason       []nlpbase.ConversationReason `protobuf:"varint,3,rep,packed,name=reason,proto3,enum=nlp.ConversationReason" json:"reason,omitempty"`
	Chapter      []nlpbase.ChapterType        `protobuf:"varint,5,rep,packed,name=chapter,proto3,enum=nlp.ChapterType" json:"chapter,omitempty"`
}

func (x *ConversationSentence) Reset() {
	*x = ConversationSentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_sentence_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSentence) ProtoMessage() {}

func (x *ConversationSentence) ProtoReflect() protoreflect.Message {
	mi := &file_storage_sentence_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSentence.ProtoReflect.Descriptor instead.
func (*ConversationSentence) Descriptor() ([]byte, []int) {
	return file_storage_sentence_storage_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationSentence) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ConversationSentence) GetTimeInterval() *nlpbase.TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *ConversationSentence) GetParticipant() *nlpbase.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ConversationSentence) GetReason() []nlpbase.ConversationReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ConversationSentence) GetChapter() []nlpbase.ChapterType {
	if x != nil {
		return x.Chapter
	}
	return nil
}

var File_storage_sentence_storage_proto protoreflect.FileDescriptor

var file_storage_sentence_storage_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0c,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x03, 0xc0, 0x3e, 0x06, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x3a, 0x03, 0xc0, 0x3e, 0x06, 0x42, 0x2d, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x01, 0x5a, 0x0a, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_sentence_storage_proto_rawDescOnce sync.Once
	file_storage_sentence_storage_proto_rawDescData = file_storage_sentence_storage_proto_rawDesc
)

func file_storage_sentence_storage_proto_rawDescGZIP() []byte {
	file_storage_sentence_storage_proto_rawDescOnce.Do(func() {
		file_storage_sentence_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_sentence_storage_proto_rawDescData)
	})
	return file_storage_sentence_storage_proto_rawDescData
}

var file_storage_sentence_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_sentence_storage_proto_goTypes = []interface{}{
	(*Sentence)(nil),                // 0: storage.Sentence
	(*ConversationSentence)(nil),    // 1: storage.ConversationSentence
	(*NormalizedToken)(nil),         // 2: storage.NormalizedToken
	(*Relation)(nil),                // 3: storage.Relation
	(nlpbase.SentenceType)(0),       // 4: nlp.SentenceType
	(nlpbase.EmotionType)(0),        // 5: nlp.EmotionType
	(*nlpbase.TimeInterval)(nil),    // 6: nlp.dialog.TimeInterval
	(*nlpbase.Participant)(nil),     // 7: nlp.dialog.Participant
	(nlpbase.ConversationReason)(0), // 8: nlp.ConversationReason
	(nlpbase.ChapterType)(0),        // 9: nlp.ChapterType
}
var file_storage_sentence_storage_proto_depIdxs = []int32{
	2, // 0: storage.Sentence.tokens:type_name -> storage.NormalizedToken
	3, // 1: storage.Sentence.relations:type_name -> storage.Relation
	4, // 2: storage.Sentence.sentence_type:type_name -> nlp.SentenceType
	5, // 3: storage.Sentence.emotion_type:type_name -> nlp.EmotionType
	6, // 4: storage.ConversationSentence.time_interval:type_name -> nlp.dialog.TimeInterval
	7, // 5: storage.ConversationSentence.participant:type_name -> nlp.dialog.Participant
	8, // 6: storage.ConversationSentence.reason:type_name -> nlp.ConversationReason
	9, // 7: storage.ConversationSentence.chapter:type_name -> nlp.ChapterType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_storage_sentence_storage_proto_init() }
func file_storage_sentence_storage_proto_init() {
	if File_storage_sentence_storage_proto != nil {
		return
	}
	file_storage_token_storage_proto_init()
	file_storage_relation_storage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_sentence_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_sentence_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_sentence_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_sentence_storage_proto_goTypes,
		DependencyIndexes: file_storage_sentence_storage_proto_depIdxs,
		MessageInfos:      file_storage_sentence_storage_proto_msgTypes,
	}.Build()
	File_storage_sentence_storage_proto = out.File
	file_storage_sentence_storage_proto_rawDesc = nil
	file_storage_sentence_storage_proto_goTypes = nil
	file_storage_sentence_storage_proto_depIdxs = nil
}
