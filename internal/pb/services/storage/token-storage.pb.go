// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: storage/token-storage.proto

package storage

import (
	nlpbase "github.com/ClarabridgeInc/ingestion-callback/internal/pb/nlpbase"
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Token types.
type TokenType int32

const (
	TokenType_TT_NONE             TokenType = 0
	TokenType_TT_ORGANIZATION     TokenType = 1
	TokenType_TT_PERSON           TokenType = 2
	TokenType_TT_LOCATION         TokenType = 3
	TokenType_TT_PRODUCT          TokenType = 4
	TokenType_TT_HOLIDAY          TokenType = 5
	TokenType_TT_MENTION          TokenType = 6
	TokenType_TT_HASHTAG          TokenType = 7
	TokenType_TT_PHONE            TokenType = 8
	TokenType_TT_EMAIL            TokenType = 9
	TokenType_TT_URL              TokenType = 10
	TokenType_TT_RETWEET          TokenType = 11
	TokenType_TT_EMOTICON         TokenType = 12
	TokenType_TT_PROFANITY        TokenType = 13
	TokenType_TT_ADDRESS          TokenType = 14
	TokenType_TT_EVENT            TokenType = 15
	TokenType_TT_COMPANY          TokenType = 16
	TokenType_TT_BRAND            TokenType = 17
	TokenType_TT_CURRENCY         TokenType = 18
	TokenType_TT_ENERGY           TokenType = 19
	TokenType_TT_AREA             TokenType = 20
	TokenType_TT_VOLUME           TokenType = 21
	TokenType_TT_DISTANCE         TokenType = 22
	TokenType_TT_SPEED            TokenType = 23
	TokenType_TT_TEMPERATURE      TokenType = 24
	TokenType_TT_WEIGHT           TokenType = 25
	TokenType_TT_DATA             TokenType = 26
	TokenType_TT_MEDICALCONDITION TokenType = 27
	TokenType_TT_RX               TokenType = 28
	TokenType_TT_MEDICALPROCEDURE TokenType = 29
	TokenType_TT_DURATION         TokenType = 30
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0:  "TT_NONE",
		1:  "TT_ORGANIZATION",
		2:  "TT_PERSON",
		3:  "TT_LOCATION",
		4:  "TT_PRODUCT",
		5:  "TT_HOLIDAY",
		6:  "TT_MENTION",
		7:  "TT_HASHTAG",
		8:  "TT_PHONE",
		9:  "TT_EMAIL",
		10: "TT_URL",
		11: "TT_RETWEET",
		12: "TT_EMOTICON",
		13: "TT_PROFANITY",
		14: "TT_ADDRESS",
		15: "TT_EVENT",
		16: "TT_COMPANY",
		17: "TT_BRAND",
		18: "TT_CURRENCY",
		19: "TT_ENERGY",
		20: "TT_AREA",
		21: "TT_VOLUME",
		22: "TT_DISTANCE",
		23: "TT_SPEED",
		24: "TT_TEMPERATURE",
		25: "TT_WEIGHT",
		26: "TT_DATA",
		27: "TT_MEDICALCONDITION",
		28: "TT_RX",
		29: "TT_MEDICALPROCEDURE",
		30: "TT_DURATION",
	}
	TokenType_value = map[string]int32{
		"TT_NONE":             0,
		"TT_ORGANIZATION":     1,
		"TT_PERSON":           2,
		"TT_LOCATION":         3,
		"TT_PRODUCT":          4,
		"TT_HOLIDAY":          5,
		"TT_MENTION":          6,
		"TT_HASHTAG":          7,
		"TT_PHONE":            8,
		"TT_EMAIL":            9,
		"TT_URL":              10,
		"TT_RETWEET":          11,
		"TT_EMOTICON":         12,
		"TT_PROFANITY":        13,
		"TT_ADDRESS":          14,
		"TT_EVENT":            15,
		"TT_COMPANY":          16,
		"TT_BRAND":            17,
		"TT_CURRENCY":         18,
		"TT_ENERGY":           19,
		"TT_AREA":             20,
		"TT_VOLUME":           21,
		"TT_DISTANCE":         22,
		"TT_SPEED":            23,
		"TT_TEMPERATURE":      24,
		"TT_WEIGHT":           25,
		"TT_DATA":             26,
		"TT_MEDICALCONDITION": 27,
		"TT_RX":               28,
		"TT_MEDICALPROCEDURE": 29,
		"TT_DURATION":         30,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_token_storage_proto_enumTypes[0].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_storage_token_storage_proto_enumTypes[0]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_storage_token_storage_proto_rawDescGZIP(), []int{0}
}

//*
// Token
//
// version              Message version.
// token_start_pos      Token start position relative to sentence.
// token_end_pos        Token end position relative to sentence.
// token_name           Token string value.
// type                 Token type.
// speech_part          Token speech part.
// linguistic_flags     Bit mask of token linguistic flags.
// is_negated           If true, token is negated.
// speech_part_only_id  Relational id of speech part.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       int32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	TokenStartPos int32 `protobuf:"varint,1,opt,name=token_start_pos,json=tokenStartPos,proto3" json:"token_start_pos,omitempty"`
	TokenEndPos   int32 `protobuf:"varint,2,opt,name=token_end_pos,json=tokenEndPos,proto3" json:"token_end_pos,omitempty"`
	// This field only populated if token does not match
	// primary_sentence.subString(start, end)
	TokenName        string             `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	Type             TokenType          `protobuf:"varint,4,opt,name=type,proto3,enum=storage.TokenType" json:"type,omitempty"`
	SpeechPart       nlpbase.SpeechPart `protobuf:"varint,5,opt,name=speech_part,json=speechPart,proto3,enum=nlp.SpeechPart" json:"speech_part,omitempty"`
	LinguisticFlags  int64              `protobuf:"varint,6,opt,name=linguistic_flags,json=linguisticFlags,proto3" json:"linguistic_flags,omitempty"`
	IsNegated        bool               `protobuf:"varint,7,opt,name=is_negated,json=isNegated,proto3" json:"is_negated,omitempty"`
	SpeechPartOnlyId int64              `protobuf:"varint,8,opt,name=speech_part_only_id,json=speechPartOnlyId,proto3" json:"speech_part_only_id,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_token_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_storage_token_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_storage_token_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Token) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Token) GetTokenStartPos() int32 {
	if x != nil {
		return x.TokenStartPos
	}
	return 0
}

func (x *Token) GetTokenEndPos() int32 {
	if x != nil {
		return x.TokenEndPos
	}
	return 0
}

func (x *Token) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *Token) GetType() TokenType {
	if x != nil {
		return x.Type
	}
	return TokenType_TT_NONE
}

func (x *Token) GetSpeechPart() nlpbase.SpeechPart {
	if x != nil {
		return x.SpeechPart
	}
	return nlpbase.SpeechPart(0)
}

func (x *Token) GetLinguisticFlags() int64 {
	if x != nil {
		return x.LinguisticFlags
	}
	return 0
}

func (x *Token) GetIsNegated() bool {
	if x != nil {
		return x.IsNegated
	}
	return false
}

func (x *Token) GetSpeechPartOnlyId() int64 {
	if x != nil {
		return x.SpeechPartOnlyId
	}
	return 0
}

//*
// NormalizedToken
// Composite version of token including normal form.
//
// version              Message version.
// token                The token.
// master_token_name    Token normal form.
// master_token_rank    Token normal form rank.
type NormalizedToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Token           *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	MasterTokenName string `protobuf:"bytes,2,opt,name=master_token_name,json=masterTokenName,proto3" json:"master_token_name,omitempty"`
	MasterTokenRank int64  `protobuf:"varint,3,opt,name=master_token_rank,json=masterTokenRank,proto3" json:"master_token_rank,omitempty"`
}

func (x *NormalizedToken) Reset() {
	*x = NormalizedToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_token_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizedToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedToken) ProtoMessage() {}

func (x *NormalizedToken) ProtoReflect() protoreflect.Message {
	mi := &file_storage_token_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedToken.ProtoReflect.Descriptor instead.
func (*NormalizedToken) Descriptor() ([]byte, []int) {
	return file_storage_token_storage_proto_rawDescGZIP(), []int{1}
}

func (x *NormalizedToken) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NormalizedToken) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *NormalizedToken) GetMasterTokenName() string {
	if x != nil {
		return x.MasterTokenName
	}
	return ""
}

func (x *NormalizedToken) GetMasterTokenRank() int64 {
	if x != nil {
		return x.MasterTokenRank
	}
	return 0
}

//*
// NormalizedToken
// Composite version of token including matching ngram rule (stored in elasticsearch).
//
// version              Message version.
// token                The token.
// sentiment            Original token sentiment.
// final_sentiment      Sentiment after ngram applied (if any).
// sentiment_flags      Bit mask of sentiment flags (weaken, etc).
// ngram                Matching ngram (if not null).
type TokenWithSentiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Token          *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Sentiment      int32  `protobuf:"varint,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	FinalSentiment int32  `protobuf:"varint,4,opt,name=final_sentiment,json=finalSentiment,proto3" json:"final_sentiment,omitempty"`
	SentimentFlags int32  `protobuf:"varint,3,opt,name=sentiment_flags,json=sentimentFlags,proto3" json:"sentiment_flags,omitempty"`
	//ngram
	Ngram *TokenWithSentiment_Ngram `protobuf:"bytes,16,opt,name=ngram,proto3" json:"ngram,omitempty"`
}

func (x *TokenWithSentiment) Reset() {
	*x = TokenWithSentiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_token_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWithSentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWithSentiment) ProtoMessage() {}

func (x *TokenWithSentiment) ProtoReflect() protoreflect.Message {
	mi := &file_storage_token_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWithSentiment.ProtoReflect.Descriptor instead.
func (*TokenWithSentiment) Descriptor() ([]byte, []int) {
	return file_storage_token_storage_proto_rawDescGZIP(), []int{2}
}

func (x *TokenWithSentiment) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TokenWithSentiment) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenWithSentiment) GetSentiment() int32 {
	if x != nil {
		return x.Sentiment
	}
	return 0
}

func (x *TokenWithSentiment) GetFinalSentiment() int32 {
	if x != nil {
		return x.FinalSentiment
	}
	return 0
}

func (x *TokenWithSentiment) GetSentimentFlags() int32 {
	if x != nil {
		return x.SentimentFlags
	}
	return 0
}

func (x *TokenWithSentiment) GetNgram() *TokenWithSentiment_Ngram {
	if x != nil {
		return x.Ngram
	}
	return nil
}

//*
// Ngram
//
// rule_id                          Relational id of ngram rule.
// position                         Position.
// related_concept_token_start_pos  (only for concept ngram) Concept start position.
type TokenWithSentiment_Ngram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId                      int64 `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Position                    int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	RelatedConceptTokenStartPos int32 `protobuf:"varint,3,opt,name=related_concept_token_start_pos,json=relatedConceptTokenStartPos,proto3" json:"related_concept_token_start_pos,omitempty"`
}

func (x *TokenWithSentiment_Ngram) Reset() {
	*x = TokenWithSentiment_Ngram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_token_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWithSentiment_Ngram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWithSentiment_Ngram) ProtoMessage() {}

func (x *TokenWithSentiment_Ngram) ProtoReflect() protoreflect.Message {
	mi := &file_storage_token_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWithSentiment_Ngram.ProtoReflect.Descriptor instead.
func (*TokenWithSentiment_Ngram) Descriptor() ([]byte, []int) {
	return file_storage_token_storage_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TokenWithSentiment_Ngram) GetRuleId() int64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *TokenWithSentiment_Ngram) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TokenWithSentiment_Ngram) GetRelatedConceptTokenStartPos() int32 {
	if x != nil {
		return x.RelatedConceptTokenStartPos
	}
	return 0
}

var File_storage_token_storage_proto protoreflect.FileDescriptor

var file_storage_token_storage_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x3a, 0x03,
	0xc0, 0x3e, 0x06, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x3a,
	0x03, 0xc0, 0x3e, 0x06, 0x22, 0x87, 0x03, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6e,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6e,
	0x67, 0x72, 0x61, 0x6d, 0x1a, 0x82, 0x01, 0x0a, 0x05, 0x4e, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x3a, 0x03, 0xc0, 0x3e, 0x06, 0x2a, 0xfd,
	0x03, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x54, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x54, 0x41, 0x47, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54,
	0x5f, 0x55, 0x52, 0x4c, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x52, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x54, 0x5f, 0x45, 0x4d, 0x4f,
	0x54, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x41, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x54, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x54, 0x5f, 0x45, 0x4e, 0x45,
	0x52, 0x47, 0x59, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10,
	0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x17,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x54, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x1a,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f,
	0x52, 0x58, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x4c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x1d, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x42, 0x2d,
	0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x01, 0x5a, 0x0a, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_token_storage_proto_rawDescOnce sync.Once
	file_storage_token_storage_proto_rawDescData = file_storage_token_storage_proto_rawDesc
)

func file_storage_token_storage_proto_rawDescGZIP() []byte {
	file_storage_token_storage_proto_rawDescOnce.Do(func() {
		file_storage_token_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_token_storage_proto_rawDescData)
	})
	return file_storage_token_storage_proto_rawDescData
}

var file_storage_token_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_storage_token_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_storage_token_storage_proto_goTypes = []interface{}{
	(TokenType)(0),                   // 0: storage.TokenType
	(*Token)(nil),                    // 1: storage.Token
	(*NormalizedToken)(nil),          // 2: storage.NormalizedToken
	(*TokenWithSentiment)(nil),       // 3: storage.TokenWithSentiment
	(*TokenWithSentiment_Ngram)(nil), // 4: storage.TokenWithSentiment.Ngram
	(nlpbase.SpeechPart)(0),          // 5: nlp.SpeechPart
}
var file_storage_token_storage_proto_depIdxs = []int32{
	0, // 0: storage.Token.type:type_name -> storage.TokenType
	5, // 1: storage.Token.speech_part:type_name -> nlp.SpeechPart
	1, // 2: storage.NormalizedToken.token:type_name -> storage.Token
	1, // 3: storage.TokenWithSentiment.token:type_name -> storage.Token
	4, // 4: storage.TokenWithSentiment.ngram:type_name -> storage.TokenWithSentiment.Ngram
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_storage_token_storage_proto_init() }
func file_storage_token_storage_proto_init() {
	if File_storage_token_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_token_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_token_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizedToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_token_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWithSentiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_token_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWithSentiment_Ngram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_token_storage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_token_storage_proto_goTypes,
		DependencyIndexes: file_storage_token_storage_proto_depIdxs,
		EnumInfos:         file_storage_token_storage_proto_enumTypes,
		MessageInfos:      file_storage_token_storage_proto_msgTypes,
	}.Build()
	File_storage_token_storage_proto = out.File
	file_storage_token_storage_proto_rawDesc = nil
	file_storage_token_storage_proto_goTypes = nil
	file_storage_token_storage_proto_depIdxs = nil
}
