// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/verbatim.proto

package nlp

import (
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// SourceEnum - type of the verbatim.
type SourceEnum int32

const (
	SourceEnum_SOURCE_TEXT SourceEnum = 0
	SourceEnum_SOURCE_CALL SourceEnum = 1
	SourceEnum_SOURCE_CHAT SourceEnum = 2
)

// Enum value maps for SourceEnum.
var (
	SourceEnum_name = map[int32]string{
		0: "SOURCE_TEXT",
		1: "SOURCE_CALL",
		2: "SOURCE_CHAT",
	}
	SourceEnum_value = map[string]int32{
		"SOURCE_TEXT": 0,
		"SOURCE_CALL": 1,
		"SOURCE_CHAT": 2,
	}
)

func (x SourceEnum) Enum() *SourceEnum {
	p := new(SourceEnum)
	*p = x
	return p
}

func (x SourceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_verbatim_proto_enumTypes[0].Descriptor()
}

func (SourceEnum) Type() protoreflect.EnumType {
	return &file_nlp_verbatim_proto_enumTypes[0]
}

func (x SourceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceEnum.Descriptor instead.
func (SourceEnum) EnumDescriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{0}
}

//*
// ProcessingStageEnum - requested processing stage.
type ProcessingStageEnum int32

const (
	ProcessingStageEnum_PROCESSING_STAGE_ALL              ProcessingStageEnum = 0
	ProcessingStageEnum_PROCESSING_STAGE_TOKEN            ProcessingStageEnum = 1
	ProcessingStageEnum_PROCESSING_STAGE_MORPH            ProcessingStageEnum = 2
	ProcessingStageEnum_PROCESSING_STAGE_NER              ProcessingStageEnum = 3
	ProcessingStageEnum_PROCESSING_STAGE_SYNTAX           ProcessingStageEnum = 4
	ProcessingStageEnum_PROCESSING_STAGE_CHAPTERS         ProcessingStageEnum = 5
	ProcessingStageEnum_PROCESSING_STAGE_EMPATHY          ProcessingStageEnum = 6
	ProcessingStageEnum_PROCESSING_STAGE_EFFORT           ProcessingStageEnum = 7
	ProcessingStageEnum_PROCESSING_STAGE_EMOTION          ProcessingStageEnum = 8
	ProcessingStageEnum_PROCESSING_STAGE_SENTENCE_TYPES   ProcessingStageEnum = 9
	ProcessingStageEnum_PROCESSING_STAGE_FASTTEXT         ProcessingStageEnum = 10
	ProcessingStageEnum_PROCESSING_STAGE_REASON           ProcessingStageEnum = 11
	ProcessingStageEnum_PROCESSING_STAGE_ISSUE_RESOLUTION ProcessingStageEnum = 12
)

// Enum value maps for ProcessingStageEnum.
var (
	ProcessingStageEnum_name = map[int32]string{
		0:  "PROCESSING_STAGE_ALL",
		1:  "PROCESSING_STAGE_TOKEN",
		2:  "PROCESSING_STAGE_MORPH",
		3:  "PROCESSING_STAGE_NER",
		4:  "PROCESSING_STAGE_SYNTAX",
		5:  "PROCESSING_STAGE_CHAPTERS",
		6:  "PROCESSING_STAGE_EMPATHY",
		7:  "PROCESSING_STAGE_EFFORT",
		8:  "PROCESSING_STAGE_EMOTION",
		9:  "PROCESSING_STAGE_SENTENCE_TYPES",
		10: "PROCESSING_STAGE_FASTTEXT",
		11: "PROCESSING_STAGE_REASON",
		12: "PROCESSING_STAGE_ISSUE_RESOLUTION",
	}
	ProcessingStageEnum_value = map[string]int32{
		"PROCESSING_STAGE_ALL":              0,
		"PROCESSING_STAGE_TOKEN":            1,
		"PROCESSING_STAGE_MORPH":            2,
		"PROCESSING_STAGE_NER":              3,
		"PROCESSING_STAGE_SYNTAX":           4,
		"PROCESSING_STAGE_CHAPTERS":         5,
		"PROCESSING_STAGE_EMPATHY":          6,
		"PROCESSING_STAGE_EFFORT":           7,
		"PROCESSING_STAGE_EMOTION":          8,
		"PROCESSING_STAGE_SENTENCE_TYPES":   9,
		"PROCESSING_STAGE_FASTTEXT":         10,
		"PROCESSING_STAGE_REASON":           11,
		"PROCESSING_STAGE_ISSUE_RESOLUTION": 12,
	}
)

func (x ProcessingStageEnum) Enum() *ProcessingStageEnum {
	p := new(ProcessingStageEnum)
	*p = x
	return p
}

func (x ProcessingStageEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessingStageEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_verbatim_proto_enumTypes[1].Descriptor()
}

func (ProcessingStageEnum) Type() protoreflect.EnumType {
	return &file_nlp_verbatim_proto_enumTypes[1]
}

func (x ProcessingStageEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessingStageEnum.Descriptor instead.
func (ProcessingStageEnum) EnumDescriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{1}
}

//*
// VerbatimSource
//
// version          Message version.
// source           Type of the verbatim.
// all_relations    If true, return all relations, else just the contentful ones.
// reason_enabled   (dialogs only) If true, do reason detection, else skip it.
// processing_stage The requested processing stage to run.
// text             Text verbatim source.
// call             Call verbatim source.
type VerbatimSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Source          SourceEnum          `protobuf:"varint,2,opt,name=source,proto3,enum=nlp.SourceEnum" json:"source,omitempty"`
	AllRelations    bool                `protobuf:"varint,3,opt,name=all_relations,json=allRelations,proto3" json:"all_relations,omitempty"`
	ReasonEnabled   bool                `protobuf:"varint,6,opt,name=reason_enabled,json=reasonEnabled,proto3" json:"reason_enabled,omitempty"`
	ProcessingStage ProcessingStageEnum `protobuf:"varint,8,opt,name=processing_stage,json=processingStage,proto3,enum=nlp.ProcessingStageEnum" json:"processing_stage,omitempty"`
	// Types that are assignable to Verbatim:
	//	*VerbatimSource_Text
	//	*VerbatimSource_Call
	//	*VerbatimSource_Chat
	Verbatim isVerbatimSource_Verbatim `protobuf_oneof:"verbatim"`
}

func (x *VerbatimSource) Reset() {
	*x = VerbatimSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerbatimSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerbatimSource) ProtoMessage() {}

func (x *VerbatimSource) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerbatimSource.ProtoReflect.Descriptor instead.
func (*VerbatimSource) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{0}
}

func (x *VerbatimSource) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VerbatimSource) GetSource() SourceEnum {
	if x != nil {
		return x.Source
	}
	return SourceEnum_SOURCE_TEXT
}

func (x *VerbatimSource) GetAllRelations() bool {
	if x != nil {
		return x.AllRelations
	}
	return false
}

func (x *VerbatimSource) GetReasonEnabled() bool {
	if x != nil {
		return x.ReasonEnabled
	}
	return false
}

func (x *VerbatimSource) GetProcessingStage() ProcessingStageEnum {
	if x != nil {
		return x.ProcessingStage
	}
	return ProcessingStageEnum_PROCESSING_STAGE_ALL
}

func (m *VerbatimSource) GetVerbatim() isVerbatimSource_Verbatim {
	if m != nil {
		return m.Verbatim
	}
	return nil
}

func (x *VerbatimSource) GetText() *TextVerbatimSource {
	if x, ok := x.GetVerbatim().(*VerbatimSource_Text); ok {
		return x.Text
	}
	return nil
}

func (x *VerbatimSource) GetCall() *CallVerbatimSource {
	if x, ok := x.GetVerbatim().(*VerbatimSource_Call); ok {
		return x.Call
	}
	return nil
}

func (x *VerbatimSource) GetChat() *ChatVerbatimSource {
	if x, ok := x.GetVerbatim().(*VerbatimSource_Chat); ok {
		return x.Chat
	}
	return nil
}

type isVerbatimSource_Verbatim interface {
	isVerbatimSource_Verbatim()
}

type VerbatimSource_Text struct {
	Text *TextVerbatimSource `protobuf:"bytes,4,opt,name=text,proto3,oneof"`
}

type VerbatimSource_Call struct {
	Call *CallVerbatimSource `protobuf:"bytes,5,opt,name=call,proto3,oneof"`
}

type VerbatimSource_Chat struct {
	Chat *ChatVerbatimSource `protobuf:"bytes,7,opt,name=chat,proto3,oneof"`
}

func (*VerbatimSource_Text) isVerbatimSource_Verbatim() {}

func (*VerbatimSource_Call) isVerbatimSource_Verbatim() {}

func (*VerbatimSource_Chat) isVerbatimSource_Verbatim() {}

//*
// TextVerbatimSource
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// text             Verbatim original text.
type TextVerbatimSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid    string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextVerbatimSource) Reset() {
	*x = TextVerbatimSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextVerbatimSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextVerbatimSource) ProtoMessage() {}

func (x *TextVerbatimSource) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextVerbatimSource.ProtoReflect.Descriptor instead.
func (*TextVerbatimSource) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{1}
}

func (x *TextVerbatimSource) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TextVerbatimSource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TextVerbatimSource) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

//*
// CallVerbatimSource
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// duration         Duration in milliseconds of the dialog.
// source_system    Voci, Nuance, etc.
// participants     Participant metadata.
// segment_type     The type of segment: turn or sentence.
// segments         The dialog segments.
// special_events   Special events such as holds, transfers, and silences.
// total_silence    Accumulated length of all silences greater than or equal to 2000 ms between sentences, 0 if DNE.
// total_dead_air   Sum of agent and client dead air.
// total_overtalk   Accumulated length of overlapping sentence time.
// total_hesitation Sum of agent and client hesitation.
// percent_silence  % silence where silence/length.
type CallVerbatimSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid            string          `protobuf:"bytes,13,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Duration        int64           `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	SourceSystem    string          `protobuf:"bytes,3,opt,name=source_system,json=sourceSystem,proto3" json:"source_system,omitempty"`
	Participants    []*Participant  `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	SegmentType     SegmentTypeEnum `protobuf:"varint,5,opt,name=segment_type,json=segmentType,proto3,enum=nlp.dialog.SegmentTypeEnum" json:"segment_type,omitempty"`
	Segments        []*Segment      `protobuf:"bytes,6,rep,name=segments,proto3" json:"segments,omitempty"`
	SpecialEvents   []*SpecialEvent `protobuf:"bytes,7,rep,name=special_events,json=specialEvents,proto3" json:"special_events,omitempty"`
	TotalSilence    int64           `protobuf:"varint,8,opt,name=total_silence,json=totalSilence,proto3" json:"total_silence,omitempty"`
	TotalDeadAir    int64           `protobuf:"varint,9,opt,name=total_dead_air,json=totalDeadAir,proto3" json:"total_dead_air,omitempty"`
	TotalOvertalk   int64           `protobuf:"varint,10,opt,name=total_overtalk,json=totalOvertalk,proto3" json:"total_overtalk,omitempty"`
	TotalHesitation int64           `protobuf:"varint,11,opt,name=total_hesitation,json=totalHesitation,proto3" json:"total_hesitation,omitempty"`
	PercentSilence  float64         `protobuf:"fixed64,12,opt,name=percent_silence,json=percentSilence,proto3" json:"percent_silence,omitempty"`
}

func (x *CallVerbatimSource) Reset() {
	*x = CallVerbatimSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallVerbatimSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallVerbatimSource) ProtoMessage() {}

func (x *CallVerbatimSource) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallVerbatimSource.ProtoReflect.Descriptor instead.
func (*CallVerbatimSource) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{2}
}

func (x *CallVerbatimSource) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CallVerbatimSource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CallVerbatimSource) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CallVerbatimSource) GetSourceSystem() string {
	if x != nil {
		return x.SourceSystem
	}
	return ""
}

func (x *CallVerbatimSource) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CallVerbatimSource) GetSegmentType() SegmentTypeEnum {
	if x != nil {
		return x.SegmentType
	}
	return SegmentTypeEnum_SEGMENT_TYPE_UNKNOWN
}

func (x *CallVerbatimSource) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *CallVerbatimSource) GetSpecialEvents() []*SpecialEvent {
	if x != nil {
		return x.SpecialEvents
	}
	return nil
}

func (x *CallVerbatimSource) GetTotalSilence() int64 {
	if x != nil {
		return x.TotalSilence
	}
	return 0
}

func (x *CallVerbatimSource) GetTotalDeadAir() int64 {
	if x != nil {
		return x.TotalDeadAir
	}
	return 0
}

func (x *CallVerbatimSource) GetTotalOvertalk() int64 {
	if x != nil {
		return x.TotalOvertalk
	}
	return 0
}

func (x *CallVerbatimSource) GetTotalHesitation() int64 {
	if x != nil {
		return x.TotalHesitation
	}
	return 0
}

func (x *CallVerbatimSource) GetPercentSilence() float64 {
	if x != nil {
		return x.PercentSilence
	}
	return 0
}

//*
// ChatVerbatimSource
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// duration         Duration in milliseconds of the dialog.
// source_system    Voci, Nuance, etc.
// participants     Participant metadata.
// segment_type     The type of segment: turn or sentence.
// segments         The dialog segments.
// special_events   Special events such as holds, transfers, and silences.
type ChatVerbatimSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid          string          `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Duration      int64           `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	SourceSystem  string          `protobuf:"bytes,3,opt,name=source_system,json=sourceSystem,proto3" json:"source_system,omitempty"`
	Participants  []*Participant  `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	SegmentType   SegmentTypeEnum `protobuf:"varint,5,opt,name=segment_type,json=segmentType,proto3,enum=nlp.dialog.SegmentTypeEnum" json:"segment_type,omitempty"`
	Segments      []*Segment      `protobuf:"bytes,6,rep,name=segments,proto3" json:"segments,omitempty"`
	SpecialEvents []*SpecialEvent `protobuf:"bytes,7,rep,name=special_events,json=specialEvents,proto3" json:"special_events,omitempty"`
}

func (x *ChatVerbatimSource) Reset() {
	*x = ChatVerbatimSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatVerbatimSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatVerbatimSource) ProtoMessage() {}

func (x *ChatVerbatimSource) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatVerbatimSource.ProtoReflect.Descriptor instead.
func (*ChatVerbatimSource) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{3}
}

func (x *ChatVerbatimSource) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChatVerbatimSource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChatVerbatimSource) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ChatVerbatimSource) GetSourceSystem() string {
	if x != nil {
		return x.SourceSystem
	}
	return ""
}

func (x *ChatVerbatimSource) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChatVerbatimSource) GetSegmentType() SegmentTypeEnum {
	if x != nil {
		return x.SegmentType
	}
	return SegmentTypeEnum_SEGMENT_TYPE_UNKNOWN
}

func (x *ChatVerbatimSource) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *ChatVerbatimSource) GetSpecialEvents() []*SpecialEvent {
	if x != nil {
		return x.SpecialEvents
	}
	return nil
}

//*
// VerbatimResult
//
// version          Message version.
// source           Type of the verbatim.
// text             Text verbatim result.
// call             Call verbatim result.
// chat             Chat verbatim result.
type VerbatimResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Source  SourceEnum `protobuf:"varint,2,opt,name=source,proto3,enum=nlp.SourceEnum" json:"source,omitempty"`
	// Types that are assignable to Verbatim:
	//	*VerbatimResult_Text
	//	*VerbatimResult_Call
	//	*VerbatimResult_Chat
	Verbatim isVerbatimResult_Verbatim `protobuf_oneof:"verbatim"`
}

func (x *VerbatimResult) Reset() {
	*x = VerbatimResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerbatimResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerbatimResult) ProtoMessage() {}

func (x *VerbatimResult) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerbatimResult.ProtoReflect.Descriptor instead.
func (*VerbatimResult) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{4}
}

func (x *VerbatimResult) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VerbatimResult) GetSource() SourceEnum {
	if x != nil {
		return x.Source
	}
	return SourceEnum_SOURCE_TEXT
}

func (m *VerbatimResult) GetVerbatim() isVerbatimResult_Verbatim {
	if m != nil {
		return m.Verbatim
	}
	return nil
}

func (x *VerbatimResult) GetText() *Verbatim {
	if x, ok := x.GetVerbatim().(*VerbatimResult_Text); ok {
		return x.Text
	}
	return nil
}

func (x *VerbatimResult) GetCall() *CallVerbatim {
	if x, ok := x.GetVerbatim().(*VerbatimResult_Call); ok {
		return x.Call
	}
	return nil
}

func (x *VerbatimResult) GetChat() *ChatVerbatim {
	if x, ok := x.GetVerbatim().(*VerbatimResult_Chat); ok {
		return x.Chat
	}
	return nil
}

type isVerbatimResult_Verbatim interface {
	isVerbatimResult_Verbatim()
}

type VerbatimResult_Text struct {
	Text *Verbatim `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type VerbatimResult_Call struct {
	Call *CallVerbatim `protobuf:"bytes,4,opt,name=call,proto3,oneof"`
}

type VerbatimResult_Chat struct {
	Chat *ChatVerbatim `protobuf:"bytes,5,opt,name=chat,proto3,oneof"`
}

func (*VerbatimResult_Text) isVerbatimResult_Verbatim() {}

func (*VerbatimResult_Call) isVerbatimResult_Verbatim() {}

func (*VerbatimResult_Chat) isVerbatimResult_Verbatim() {}

//*
// Verbatim
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// sentences        The analyzed sentences.
// word_count       Sum of sentence word counts.
type Verbatim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32          `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid           string         `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sentences      []*Sentence    `protobuf:"bytes,3,rep,name=sentences,proto3" json:"sentences,omitempty"`
	WordCount      int32          `protobuf:"varint,4,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	ContentType    ContentType    `protobuf:"varint,5,opt,name=content_type,json=contentType,proto3,enum=nlp.ContentType" json:"content_type,omitempty"`
	ContentSubtype ContentSubtype `protobuf:"varint,6,opt,name=content_subtype,json=contentSubtype,proto3,enum=nlp.ContentSubtype" json:"content_subtype,omitempty"`
}

func (x *Verbatim) Reset() {
	*x = Verbatim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbatim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbatim) ProtoMessage() {}

func (x *Verbatim) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbatim.ProtoReflect.Descriptor instead.
func (*Verbatim) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{5}
}

func (x *Verbatim) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Verbatim) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Verbatim) GetSentences() []*Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *Verbatim) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *Verbatim) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CTE_TYPE_NONE
}

func (x *Verbatim) GetContentSubtype() ContentSubtype {
	if x != nil {
		return x.ContentSubtype
	}
	return ContentSubtype_CTE_SUBTYPE_NONE
}

//*
// CallVerbatim
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// sentences        The analyzed sentences.
// word_count       Sum of sentence word counts.
// duration         Duration in milliseconds of the dialog.
// source_system    Voci, Nuance, etc.
// participants     Participant metadata.
// special_events   Special events such as holds, transfers, and silences.
// total_silence    Accumulated length of all silences greater than or equal to 2000 ms between sentences, 0 if DNE.
// total_dead_air   Sum of agent and client dead air.
// total_overtalk   Accumulated length of overlapping sentence time.
// total_hesitation Sum of agent and client hesitation.
// percent_silence  % silence where silence/length.
// dialog_metadata  Metadata related to the dialog. Contains Issue Resolution attributes (issue_resolution_concluding_event ,issue_resolution_agent_outcome, issue_resolution_client_outcome, issue_resolution_conversation_outcome)
// summary          Summary result.
type CallVerbatim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid            string          `protobuf:"bytes,14,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sentences       []*Sentence     `protobuf:"bytes,2,rep,name=sentences,proto3" json:"sentences,omitempty"`
	WordCount       int32           `protobuf:"varint,3,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	Duration        int64           `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	SourceSystem    string          `protobuf:"bytes,5,opt,name=source_system,json=sourceSystem,proto3" json:"source_system,omitempty"`
	Participants    []*Participant  `protobuf:"bytes,6,rep,name=participants,proto3" json:"participants,omitempty"`
	SpecialEvents   []*SpecialEvent `protobuf:"bytes,7,rep,name=special_events,json=specialEvents,proto3" json:"special_events,omitempty"`
	TotalSilence    int64           `protobuf:"varint,8,opt,name=total_silence,json=totalSilence,proto3" json:"total_silence,omitempty"`
	TotalDeadAir    int64           `protobuf:"varint,9,opt,name=total_dead_air,json=totalDeadAir,proto3" json:"total_dead_air,omitempty"`
	TotalOvertalk   int64           `protobuf:"varint,10,opt,name=total_overtalk,json=totalOvertalk,proto3" json:"total_overtalk,omitempty"`
	TotalHesitation int64           `protobuf:"varint,11,opt,name=total_hesitation,json=totalHesitation,proto3" json:"total_hesitation,omitempty"`
	PercentSilence  float64         `protobuf:"fixed64,12,opt,name=percent_silence,json=percentSilence,proto3" json:"percent_silence,omitempty"`
	DialogMetadata  *DialogMetadata `protobuf:"bytes,13,opt,name=dialog_metadata,json=dialogMetadata,proto3" json:"dialog_metadata,omitempty"`
	Summary         *Summary        `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *CallVerbatim) Reset() {
	*x = CallVerbatim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallVerbatim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallVerbatim) ProtoMessage() {}

func (x *CallVerbatim) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallVerbatim.ProtoReflect.Descriptor instead.
func (*CallVerbatim) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{6}
}

func (x *CallVerbatim) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CallVerbatim) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CallVerbatim) GetSentences() []*Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *CallVerbatim) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *CallVerbatim) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CallVerbatim) GetSourceSystem() string {
	if x != nil {
		return x.SourceSystem
	}
	return ""
}

func (x *CallVerbatim) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CallVerbatim) GetSpecialEvents() []*SpecialEvent {
	if x != nil {
		return x.SpecialEvents
	}
	return nil
}

func (x *CallVerbatim) GetTotalSilence() int64 {
	if x != nil {
		return x.TotalSilence
	}
	return 0
}

func (x *CallVerbatim) GetTotalDeadAir() int64 {
	if x != nil {
		return x.TotalDeadAir
	}
	return 0
}

func (x *CallVerbatim) GetTotalOvertalk() int64 {
	if x != nil {
		return x.TotalOvertalk
	}
	return 0
}

func (x *CallVerbatim) GetTotalHesitation() int64 {
	if x != nil {
		return x.TotalHesitation
	}
	return 0
}

func (x *CallVerbatim) GetPercentSilence() float64 {
	if x != nil {
		return x.PercentSilence
	}
	return 0
}

func (x *CallVerbatim) GetDialogMetadata() *DialogMetadata {
	if x != nil {
		return x.DialogMetadata
	}
	return nil
}

func (x *CallVerbatim) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

//*
// ChatVerbatim
//
// version          Message version.
// uuid             If not provided, a random UUID will be generated.
// sentences        The analyzed sentences.
// word_count       Sum of sentence word counts.
// duration         Duration in milliseconds of the dialog.
// source_system    Voci, Nuance, etc.
// participants     Participant metadata.
// special_events   Special events such as transfers.
// dialog_metadata  Metadata related to the dialog. Contains Issue Resolution attributes (issue_resolution_concluding_event ,issue_resolution_agent_outcome, issue_resolution_client_outcome, issue_resolution_conversation_outcome)
// summary          Summary result.
type ChatVerbatim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uuid           string          `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sentences      []*Sentence     `protobuf:"bytes,2,rep,name=sentences,proto3" json:"sentences,omitempty"`
	WordCount      int32           `protobuf:"varint,3,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	Duration       int64           `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	SourceSystem   string          `protobuf:"bytes,5,opt,name=source_system,json=sourceSystem,proto3" json:"source_system,omitempty"`
	Participants   []*Participant  `protobuf:"bytes,6,rep,name=participants,proto3" json:"participants,omitempty"`
	SpecialEvents  []*SpecialEvent `protobuf:"bytes,7,rep,name=special_events,json=specialEvents,proto3" json:"special_events,omitempty"`
	DialogMetadata *DialogMetadata `protobuf:"bytes,8,opt,name=dialog_metadata,json=dialogMetadata,proto3" json:"dialog_metadata,omitempty"`
	Summary        *Summary        `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ChatVerbatim) Reset() {
	*x = ChatVerbatim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_verbatim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatVerbatim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatVerbatim) ProtoMessage() {}

func (x *ChatVerbatim) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_verbatim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatVerbatim.ProtoReflect.Descriptor instead.
func (*ChatVerbatim) Descriptor() ([]byte, []int) {
	return file_nlp_verbatim_proto_rawDescGZIP(), []int{7}
}

func (x *ChatVerbatim) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChatVerbatim) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChatVerbatim) GetSentences() []*Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *ChatVerbatim) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *ChatVerbatim) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ChatVerbatim) GetSourceSystem() string {
	if x != nil {
		return x.SourceSystem
	}
	return ""
}

func (x *ChatVerbatim) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChatVerbatim) GetSpecialEvents() []*SpecialEvent {
	if x != nil {
		return x.SpecialEvents
	}
	return nil
}

func (x *ChatVerbatim) GetDialogMetadata() *DialogMetadata {
	if x != nil {
		return x.DialogMetadata
	}
	return nil
}

func (x *ChatVerbatim) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

var File_nlp_verbatim_proto protoreflect.FileDescriptor

var file_nlp_verbatim_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x6c, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x6c, 0x70, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6c, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x6c, 0x70, 0x2f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x82, 0x03, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56,
	0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x3a, 0x03, 0xc0, 0x3e, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x22, 0x5b, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x03, 0xc0,
	0x3e, 0x01, 0x22, 0xbd, 0x04, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x62, 0x61,
	0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x41,
	0x69, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x74, 0x61, 0x6c, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x61, 0x6c, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x68, 0x65, 0x73, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x73, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x03, 0xc0,
	0x3e, 0x02, 0x22, 0xf7, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x56, 0x65, 0x72, 0x62, 0x61,
	0x74, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x03, 0xc0, 0x3e, 0x02, 0x22, 0xdb, 0x01, 0x0a,
	0x0e, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x27, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69,
	0x6d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x3a, 0x03, 0xc0, 0x3e, 0x02, 0x42, 0x0a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x56,
	0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x03, 0xc0, 0x3e, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0xff, 0x04, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x69, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x61,
	0x64, 0x41, 0x69, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x61, 0x6c, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x73, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x73, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x03, 0xc0, 0x3e,
	0x03, 0x22, 0xb9, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74,
	0x69, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x03, 0xc0, 0x3e, 0x03, 0x2a, 0x3f, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x2a, 0x9e,
	0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x41, 0x54, 0x48, 0x59, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x53, 0x53,
	0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x42,
	0x25, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x50, 0x01, 0x5a, 0x06,
	0x70, 0x62, 0x2f, 0x6e, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_verbatim_proto_rawDescOnce sync.Once
	file_nlp_verbatim_proto_rawDescData = file_nlp_verbatim_proto_rawDesc
)

func file_nlp_verbatim_proto_rawDescGZIP() []byte {
	file_nlp_verbatim_proto_rawDescOnce.Do(func() {
		file_nlp_verbatim_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_verbatim_proto_rawDescData)
	})
	return file_nlp_verbatim_proto_rawDescData
}

var file_nlp_verbatim_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nlp_verbatim_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nlp_verbatim_proto_goTypes = []interface{}{
	(SourceEnum)(0),            // 0: nlp.SourceEnum
	(ProcessingStageEnum)(0),   // 1: nlp.ProcessingStageEnum
	(*VerbatimSource)(nil),     // 2: nlp.VerbatimSource
	(*TextVerbatimSource)(nil), // 3: nlp.TextVerbatimSource
	(*CallVerbatimSource)(nil), // 4: nlp.CallVerbatimSource
	(*ChatVerbatimSource)(nil), // 5: nlp.ChatVerbatimSource
	(*VerbatimResult)(nil),     // 6: nlp.VerbatimResult
	(*Verbatim)(nil),           // 7: nlp.Verbatim
	(*CallVerbatim)(nil),       // 8: nlp.CallVerbatim
	(*ChatVerbatim)(nil),       // 9: nlp.ChatVerbatim
	(*Participant)(nil),        // 10: nlp.dialog.Participant
	(SegmentTypeEnum)(0),       // 11: nlp.dialog.SegmentTypeEnum
	(*Segment)(nil),            // 12: nlp.dialog.Segment
	(*SpecialEvent)(nil),       // 13: nlp.dialog.SpecialEvent
	(*Sentence)(nil),           // 14: nlp.Sentence
	(ContentType)(0),           // 15: nlp.ContentType
	(ContentSubtype)(0),        // 16: nlp.ContentSubtype
	(*DialogMetadata)(nil),     // 17: nlp.dialog.DialogMetadata
	(*Summary)(nil),            // 18: nlp.Summary
}
var file_nlp_verbatim_proto_depIdxs = []int32{
	0,  // 0: nlp.VerbatimSource.source:type_name -> nlp.SourceEnum
	1,  // 1: nlp.VerbatimSource.processing_stage:type_name -> nlp.ProcessingStageEnum
	3,  // 2: nlp.VerbatimSource.text:type_name -> nlp.TextVerbatimSource
	4,  // 3: nlp.VerbatimSource.call:type_name -> nlp.CallVerbatimSource
	5,  // 4: nlp.VerbatimSource.chat:type_name -> nlp.ChatVerbatimSource
	10, // 5: nlp.CallVerbatimSource.participants:type_name -> nlp.dialog.Participant
	11, // 6: nlp.CallVerbatimSource.segment_type:type_name -> nlp.dialog.SegmentTypeEnum
	12, // 7: nlp.CallVerbatimSource.segments:type_name -> nlp.dialog.Segment
	13, // 8: nlp.CallVerbatimSource.special_events:type_name -> nlp.dialog.SpecialEvent
	10, // 9: nlp.ChatVerbatimSource.participants:type_name -> nlp.dialog.Participant
	11, // 10: nlp.ChatVerbatimSource.segment_type:type_name -> nlp.dialog.SegmentTypeEnum
	12, // 11: nlp.ChatVerbatimSource.segments:type_name -> nlp.dialog.Segment
	13, // 12: nlp.ChatVerbatimSource.special_events:type_name -> nlp.dialog.SpecialEvent
	0,  // 13: nlp.VerbatimResult.source:type_name -> nlp.SourceEnum
	7,  // 14: nlp.VerbatimResult.text:type_name -> nlp.Verbatim
	8,  // 15: nlp.VerbatimResult.call:type_name -> nlp.CallVerbatim
	9,  // 16: nlp.VerbatimResult.chat:type_name -> nlp.ChatVerbatim
	14, // 17: nlp.Verbatim.sentences:type_name -> nlp.Sentence
	15, // 18: nlp.Verbatim.content_type:type_name -> nlp.ContentType
	16, // 19: nlp.Verbatim.content_subtype:type_name -> nlp.ContentSubtype
	14, // 20: nlp.CallVerbatim.sentences:type_name -> nlp.Sentence
	10, // 21: nlp.CallVerbatim.participants:type_name -> nlp.dialog.Participant
	13, // 22: nlp.CallVerbatim.special_events:type_name -> nlp.dialog.SpecialEvent
	17, // 23: nlp.CallVerbatim.dialog_metadata:type_name -> nlp.dialog.DialogMetadata
	18, // 24: nlp.CallVerbatim.summary:type_name -> nlp.Summary
	14, // 25: nlp.ChatVerbatim.sentences:type_name -> nlp.Sentence
	10, // 26: nlp.ChatVerbatim.participants:type_name -> nlp.dialog.Participant
	13, // 27: nlp.ChatVerbatim.special_events:type_name -> nlp.dialog.SpecialEvent
	17, // 28: nlp.ChatVerbatim.dialog_metadata:type_name -> nlp.dialog.DialogMetadata
	18, // 29: nlp.ChatVerbatim.summary:type_name -> nlp.Summary
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_nlp_verbatim_proto_init() }
func file_nlp_verbatim_proto_init() {
	if File_nlp_verbatim_proto != nil {
		return
	}
	file_nlp_dialog_participant_proto_init()
	file_nlp_dialog_segment_proto_init()
	file_nlp_dialog_special_event_proto_init()
	file_nlp_dialog_dialog_metadata_proto_init()
	file_nlp_sentence_proto_init()
	file_nlp_summary_proto_init()
	file_nlp_enumeration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nlp_verbatim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerbatimSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextVerbatimSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallVerbatimSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatVerbatimSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerbatimResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbatim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallVerbatim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_verbatim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatVerbatim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nlp_verbatim_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VerbatimSource_Text)(nil),
		(*VerbatimSource_Call)(nil),
		(*VerbatimSource_Chat)(nil),
	}
	file_nlp_verbatim_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VerbatimResult_Text)(nil),
		(*VerbatimResult_Call)(nil),
		(*VerbatimResult_Chat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_verbatim_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_verbatim_proto_goTypes,
		DependencyIndexes: file_nlp_verbatim_proto_depIdxs,
		EnumInfos:         file_nlp_verbatim_proto_enumTypes,
		MessageInfos:      file_nlp_verbatim_proto_msgTypes,
	}.Build()
	File_nlp_verbatim_proto = out.File
	file_nlp_verbatim_proto_rawDesc = nil
	file_nlp_verbatim_proto_goTypes = nil
	file_nlp_verbatim_proto_depIdxs = nil
}
