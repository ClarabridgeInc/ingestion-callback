// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/dialog/participant.proto

package nlp

import (
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Participant types.
type ParticipantType int32

const (
	ParticipantType_TYPE_UNKNOWN ParticipantType = 0
	ParticipantType_TYPE_AGENT   ParticipantType = 1
	ParticipantType_TYPE_CLIENT  ParticipantType = 2
)

// Enum value maps for ParticipantType.
var (
	ParticipantType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_AGENT",
		2: "TYPE_CLIENT",
	}
	ParticipantType_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"TYPE_AGENT":   1,
		"TYPE_CLIENT":  2,
	}
)

func (x ParticipantType) Enum() *ParticipantType {
	p := new(ParticipantType)
	*p = x
	return p
}

func (x ParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_dialog_participant_proto_enumTypes[0].Descriptor()
}

func (ParticipantType) Type() protoreflect.EnumType {
	return &file_nlp_dialog_participant_proto_enumTypes[0]
}

func (x ParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantType.Descriptor instead.
func (ParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_dialog_participant_proto_rawDescGZIP(), []int{0}
}

//*
// Participant genders.
type ParticipantGender int32

const (
	ParticipantGender_GENDER_UNKNOWN ParticipantGender = 0
	ParticipantGender_GENDER_MALE    ParticipantGender = 1
	ParticipantGender_GENDER_FEMALE  ParticipantGender = 2
)

// Enum value maps for ParticipantGender.
var (
	ParticipantGender_name = map[int32]string{
		0: "GENDER_UNKNOWN",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
	}
	ParticipantGender_value = map[string]int32{
		"GENDER_UNKNOWN": 0,
		"GENDER_MALE":    1,
		"GENDER_FEMALE":  2,
	}
)

func (x ParticipantGender) Enum() *ParticipantGender {
	p := new(ParticipantGender)
	*p = x
	return p
}

func (x ParticipantGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantGender) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_dialog_participant_proto_enumTypes[1].Descriptor()
}

func (ParticipantGender) Type() protoreflect.EnumType {
	return &file_nlp_dialog_participant_proto_enumTypes[1]
}

func (x ParticipantGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantGender.Descriptor instead.
func (ParticipantGender) EnumDescriptor() ([]byte, []int) {
	return file_nlp_dialog_participant_proto_rawDescGZIP(), []int{1}
}

//*
// Participant (conversations only)
//
// version                  Message version.
// participant_id           The id number corresponding to the the Participant.
// type                     The type of the participant.
// gender                   The gender of the participant.
// is_bot                   Whether the participant is a bot.
// speech_rate              Words per minute (zero means undefined).
// issue_resolution_participant_outcome     A status value defining if the participant fully completed his task or not (DONE,NOT_DONE,UNKNOWN).
// empathy_score            A double value that reflects the empathy level delivered in a conversation (0 = Not Delivered, 1 = Delivered).
// attributes               Custom attributes.
type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                           int32                             `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ParticipantId                     int32                             `protobuf:"varint,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Type                              ParticipantType                   `protobuf:"varint,2,opt,name=type,proto3,enum=nlp.dialog.ParticipantType" json:"type,omitempty"`
	Gender                            ParticipantGender                 `protobuf:"varint,3,opt,name=gender,proto3,enum=nlp.dialog.ParticipantGender" json:"gender,omitempty"`
	IsBot                             bool                              `protobuf:"varint,5,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	SpeechRate                        float64                           `protobuf:"fixed64,6,opt,name=speech_rate,json=speechRate,proto3" json:"speech_rate,omitempty"`
	IssueResolutionParticipantOutcome IssueResolutionParticipantOutcome `protobuf:"varint,7,opt,name=issue_resolution_participant_outcome,json=issueResolutionParticipantOutcome,proto3,enum=nlp.IssueResolutionParticipantOutcome" json:"issue_resolution_participant_outcome,omitempty"`
	EmpathyScore                      float64                           `protobuf:"fixed64,8,opt,name=empathy_score,json=empathyScore,proto3" json:"empathy_score,omitempty"`
	Attributes                        map[string]*AttributeValue        `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_dialog_participant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_dialog_participant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_nlp_dialog_participant_proto_rawDescGZIP(), []int{0}
}

func (x *Participant) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Participant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Participant) GetType() ParticipantType {
	if x != nil {
		return x.Type
	}
	return ParticipantType_TYPE_UNKNOWN
}

func (x *Participant) GetGender() ParticipantGender {
	if x != nil {
		return x.Gender
	}
	return ParticipantGender_GENDER_UNKNOWN
}

func (x *Participant) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *Participant) GetSpeechRate() float64 {
	if x != nil {
		return x.SpeechRate
	}
	return 0
}

func (x *Participant) GetIssueResolutionParticipantOutcome() IssueResolutionParticipantOutcome {
	if x != nil {
		return x.IssueResolutionParticipantOutcome
	}
	return IssueResolutionParticipantOutcome_IR_PO_UNKNOWN
}

func (x *Participant) GetEmpathyScore() float64 {
	if x != nil {
		return x.EmpathyScore
	}
	return 0
}

func (x *Participant) GetAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

//*
// Participant custom attribute value.
type AttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Value   *Value   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Values  []*Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AttributeValue) Reset() {
	*x = AttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_dialog_participant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeValue) ProtoMessage() {}

func (x *AttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_dialog_participant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeValue.ProtoReflect.Descriptor instead.
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return file_nlp_dialog_participant_proto_rawDescGZIP(), []int{1}
}

func (x *AttributeValue) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AttributeValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AttributeValue) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

//*
// Value.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Value:
	//	*Value_StringValue
	//	*Value_LongValue
	//	*Value_DoubleValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_dialog_participant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_dialog_participant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_nlp_dialog_participant_proto_rawDescGZIP(), []int{2}
}

func (x *Value) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,3,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_LongValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

var File_nlp_dialog_participant_proto protoreflect.FileDescriptor

var file_nlp_dialog_participant_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb5, 0x04, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x77, 0x0a, 0x24, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x21, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d,
	0x70, 0x61, 0x74, 0x68, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x03, 0xc0, 0x3e, 0x07, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x03, 0xc0, 0x3e, 0x01, 0x22, 0x9a,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x03, 0xc0,
	0x3e, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x44, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x2a, 0x4b, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x2c,
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x01, 0x5a, 0x06, 0x70, 0x62, 0x2f, 0x6e, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_dialog_participant_proto_rawDescOnce sync.Once
	file_nlp_dialog_participant_proto_rawDescData = file_nlp_dialog_participant_proto_rawDesc
)

func file_nlp_dialog_participant_proto_rawDescGZIP() []byte {
	file_nlp_dialog_participant_proto_rawDescOnce.Do(func() {
		file_nlp_dialog_participant_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_dialog_participant_proto_rawDescData)
	})
	return file_nlp_dialog_participant_proto_rawDescData
}

var file_nlp_dialog_participant_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nlp_dialog_participant_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nlp_dialog_participant_proto_goTypes = []interface{}{
	(ParticipantType)(0),                   // 0: nlp.dialog.ParticipantType
	(ParticipantGender)(0),                 // 1: nlp.dialog.ParticipantGender
	(*Participant)(nil),                    // 2: nlp.dialog.Participant
	(*AttributeValue)(nil),                 // 3: nlp.dialog.AttributeValue
	(*Value)(nil),                          // 4: nlp.dialog.Value
	nil,                                    // 5: nlp.dialog.Participant.AttributesEntry
	(IssueResolutionParticipantOutcome)(0), // 6: nlp.IssueResolutionParticipantOutcome
}
var file_nlp_dialog_participant_proto_depIdxs = []int32{
	0, // 0: nlp.dialog.Participant.type:type_name -> nlp.dialog.ParticipantType
	1, // 1: nlp.dialog.Participant.gender:type_name -> nlp.dialog.ParticipantGender
	6, // 2: nlp.dialog.Participant.issue_resolution_participant_outcome:type_name -> nlp.IssueResolutionParticipantOutcome
	5, // 3: nlp.dialog.Participant.attributes:type_name -> nlp.dialog.Participant.AttributesEntry
	4, // 4: nlp.dialog.AttributeValue.value:type_name -> nlp.dialog.Value
	4, // 5: nlp.dialog.AttributeValue.values:type_name -> nlp.dialog.Value
	3, // 6: nlp.dialog.Participant.AttributesEntry.value:type_name -> nlp.dialog.AttributeValue
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_nlp_dialog_participant_proto_init() }
func file_nlp_dialog_participant_proto_init() {
	if File_nlp_dialog_participant_proto != nil {
		return
	}
	file_nlp_enumeration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nlp_dialog_participant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_dialog_participant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_dialog_participant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nlp_dialog_participant_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_LongValue)(nil),
		(*Value_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_dialog_participant_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_dialog_participant_proto_goTypes,
		DependencyIndexes: file_nlp_dialog_participant_proto_depIdxs,
		EnumInfos:         file_nlp_dialog_participant_proto_enumTypes,
		MessageInfos:      file_nlp_dialog_participant_proto_msgTypes,
	}.Build()
	File_nlp_dialog_participant_proto = out.File
	file_nlp_dialog_participant_proto_rawDesc = nil
	file_nlp_dialog_participant_proto_goTypes = nil
	file_nlp_dialog_participant_proto_depIdxs = nil
}
