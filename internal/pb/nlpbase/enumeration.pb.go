// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/enumeration.proto

package nlp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Part of speech enum
//
// Tagset derived from the Universal Dependencies (udeps) tagset. Labels have been
// expanded and camel-cased for compatibility with platform and legacy LPs, e.g. ADJ -> Adjective.
type SpeechPart int32

const (
	// Special default value, not in udeps tagset.
	SpeechPart_SP_NONE SpeechPart = 0
	// Contentful
	SpeechPart_SP_ADJECTIVE      SpeechPart = 1
	SpeechPart_SP_ADPOSITION     SpeechPart = 2
	SpeechPart_SP_ADVERB         SpeechPart = 3
	SpeechPart_SP_INTERJECTION   SpeechPart = 4
	SpeechPart_SP_INTRODUCTORY   SpeechPart = 5
	SpeechPart_SP_NOUN           SpeechPart = 6
	SpeechPart_SP_NOUNPROPER     SpeechPart = 7
	SpeechPart_SP_NUMBERCARDINAL SpeechPart = 8
	SpeechPart_SP_SYMBOL         SpeechPart = 9
	SpeechPart_SP_VERB           SpeechPart = 10
	// Non-contentful
	SpeechPart_SP_AUXILIARY              SpeechPart = 11
	SpeechPart_SP_CONJUNCTIONCOORDINATE  SpeechPart = 12
	SpeechPart_SP_CONJUNCTIONSUBORDINATE SpeechPart = 13
	SpeechPart_SP_DETERMINER             SpeechPart = 14
	SpeechPart_SP_OTHER                  SpeechPart = 15
	SpeechPart_SP_PRONOUN                SpeechPart = 16
	SpeechPart_SP_PARTICLE               SpeechPart = 17
	SpeechPart_SP_PUNCTUATION            SpeechPart = 18
	SpeechPart_SP_NUMBERORDINAL          SpeechPart = 19
)

// Enum value maps for SpeechPart.
var (
	SpeechPart_name = map[int32]string{
		0:  "SP_NONE",
		1:  "SP_ADJECTIVE",
		2:  "SP_ADPOSITION",
		3:  "SP_ADVERB",
		4:  "SP_INTERJECTION",
		5:  "SP_INTRODUCTORY",
		6:  "SP_NOUN",
		7:  "SP_NOUNPROPER",
		8:  "SP_NUMBERCARDINAL",
		9:  "SP_SYMBOL",
		10: "SP_VERB",
		11: "SP_AUXILIARY",
		12: "SP_CONJUNCTIONCOORDINATE",
		13: "SP_CONJUNCTIONSUBORDINATE",
		14: "SP_DETERMINER",
		15: "SP_OTHER",
		16: "SP_PRONOUN",
		17: "SP_PARTICLE",
		18: "SP_PUNCTUATION",
		19: "SP_NUMBERORDINAL",
	}
	SpeechPart_value = map[string]int32{
		"SP_NONE":                   0,
		"SP_ADJECTIVE":              1,
		"SP_ADPOSITION":             2,
		"SP_ADVERB":                 3,
		"SP_INTERJECTION":           4,
		"SP_INTRODUCTORY":           5,
		"SP_NOUN":                   6,
		"SP_NOUNPROPER":             7,
		"SP_NUMBERCARDINAL":         8,
		"SP_SYMBOL":                 9,
		"SP_VERB":                   10,
		"SP_AUXILIARY":              11,
		"SP_CONJUNCTIONCOORDINATE":  12,
		"SP_CONJUNCTIONSUBORDINATE": 13,
		"SP_DETERMINER":             14,
		"SP_OTHER":                  15,
		"SP_PRONOUN":                16,
		"SP_PARTICLE":               17,
		"SP_PUNCTUATION":            18,
		"SP_NUMBERORDINAL":          19,
	}
)

func (x SpeechPart) Enum() *SpeechPart {
	p := new(SpeechPart)
	*p = x
	return p
}

func (x SpeechPart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeechPart) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[0].Descriptor()
}

func (SpeechPart) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[0]
}

func (x SpeechPart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeechPart.Descriptor instead.
func (SpeechPart) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{0}
}

//*
// Universal dependency relation labels.
type UniversalRelationType int32

const (
	UniversalRelationType_UDEPS_RELATION_NONE UniversalRelationType = 0
	UniversalRelationType_ACL                 UniversalRelationType = 1
	UniversalRelationType_ADVCL               UniversalRelationType = 2
	UniversalRelationType_ADVMOD              UniversalRelationType = 3
	UniversalRelationType_AMOD                UniversalRelationType = 4
	UniversalRelationType_APPOS               UniversalRelationType = 5
	UniversalRelationType_AUX                 UniversalRelationType = 6
	UniversalRelationType_CASE                UniversalRelationType = 7
	UniversalRelationType_CC                  UniversalRelationType = 8
	UniversalRelationType_CCOMP               UniversalRelationType = 9
	UniversalRelationType_CLF                 UniversalRelationType = 10
	UniversalRelationType_COMPOUND            UniversalRelationType = 11
	UniversalRelationType_CONJ                UniversalRelationType = 12
	UniversalRelationType_COP                 UniversalRelationType = 13
	UniversalRelationType_CSUBJ               UniversalRelationType = 14
	UniversalRelationType_DEP                 UniversalRelationType = 15
	UniversalRelationType_DET                 UniversalRelationType = 16
	UniversalRelationType_DISCOURSE           UniversalRelationType = 17
	UniversalRelationType_DISLOCATED          UniversalRelationType = 18
	UniversalRelationType_EXPL                UniversalRelationType = 19
	UniversalRelationType_FIXED               UniversalRelationType = 20
	UniversalRelationType_FLAT                UniversalRelationType = 21
	UniversalRelationType_GOESWITH            UniversalRelationType = 22
	UniversalRelationType_IOBJ                UniversalRelationType = 23
	UniversalRelationType_LIST                UniversalRelationType = 24
	UniversalRelationType_MARK                UniversalRelationType = 25
	UniversalRelationType_NMOD                UniversalRelationType = 26
	UniversalRelationType_NSUBJ               UniversalRelationType = 27
	UniversalRelationType_NUMMOD              UniversalRelationType = 28
	UniversalRelationType_OBJ                 UniversalRelationType = 29
	UniversalRelationType_OBL                 UniversalRelationType = 30
	UniversalRelationType_ORPHAN              UniversalRelationType = 31
	UniversalRelationType_PARATAXIS           UniversalRelationType = 32
	UniversalRelationType_PUNCT               UniversalRelationType = 33
	UniversalRelationType_REPARANDUM          UniversalRelationType = 34
	UniversalRelationType_ROOT                UniversalRelationType = 35
	UniversalRelationType_VOCATIVE            UniversalRelationType = 36
	UniversalRelationType_XCOMP               UniversalRelationType = 37
)

// Enum value maps for UniversalRelationType.
var (
	UniversalRelationType_name = map[int32]string{
		0:  "UDEPS_RELATION_NONE",
		1:  "ACL",
		2:  "ADVCL",
		3:  "ADVMOD",
		4:  "AMOD",
		5:  "APPOS",
		6:  "AUX",
		7:  "CASE",
		8:  "CC",
		9:  "CCOMP",
		10: "CLF",
		11: "COMPOUND",
		12: "CONJ",
		13: "COP",
		14: "CSUBJ",
		15: "DEP",
		16: "DET",
		17: "DISCOURSE",
		18: "DISLOCATED",
		19: "EXPL",
		20: "FIXED",
		21: "FLAT",
		22: "GOESWITH",
		23: "IOBJ",
		24: "LIST",
		25: "MARK",
		26: "NMOD",
		27: "NSUBJ",
		28: "NUMMOD",
		29: "OBJ",
		30: "OBL",
		31: "ORPHAN",
		32: "PARATAXIS",
		33: "PUNCT",
		34: "REPARANDUM",
		35: "ROOT",
		36: "VOCATIVE",
		37: "XCOMP",
	}
	UniversalRelationType_value = map[string]int32{
		"UDEPS_RELATION_NONE": 0,
		"ACL":                 1,
		"ADVCL":               2,
		"ADVMOD":              3,
		"AMOD":                4,
		"APPOS":               5,
		"AUX":                 6,
		"CASE":                7,
		"CC":                  8,
		"CCOMP":               9,
		"CLF":                 10,
		"COMPOUND":            11,
		"CONJ":                12,
		"COP":                 13,
		"CSUBJ":               14,
		"DEP":                 15,
		"DET":                 16,
		"DISCOURSE":           17,
		"DISLOCATED":          18,
		"EXPL":                19,
		"FIXED":               20,
		"FLAT":                21,
		"GOESWITH":            22,
		"IOBJ":                23,
		"LIST":                24,
		"MARK":                25,
		"NMOD":                26,
		"NSUBJ":               27,
		"NUMMOD":              28,
		"OBJ":                 29,
		"OBL":                 30,
		"ORPHAN":              31,
		"PARATAXIS":           32,
		"PUNCT":               33,
		"REPARANDUM":          34,
		"ROOT":                35,
		"VOCATIVE":            36,
		"XCOMP":               37,
	}
)

func (x UniversalRelationType) Enum() *UniversalRelationType {
	p := new(UniversalRelationType)
	*p = x
	return p
}

func (x UniversalRelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UniversalRelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[1].Descriptor()
}

func (UniversalRelationType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[1]
}

func (x UniversalRelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UniversalRelationType.Descriptor instead.
func (UniversalRelationType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{1}
}

//*
// RelationTypeEnum of neutral scheme from shared.
type RelationType int32

const (
	RelationType_RT_NONE                  RelationType = 0
	RelationType_RT_ARGUMENT              RelationType = 1
	RelationType_RT_CIRCUMSTANCE          RelationType = 2
	RelationType_RT_ATTRIBUTE             RelationType = 3
	RelationType_RT_IDENTITY              RelationType = 4
	RelationType_RT_DELIMITER             RelationType = 5
	RelationType_RT_GENITIVE              RelationType = 6
	RelationType_RT_POSSESSIVE            RelationType = 7
	RelationType_RT_QUANTIFIER            RelationType = 8
	RelationType_RT_COORDINATE            RelationType = 9
	RelationType_RT_PREPOSITION           RelationType = 10
	RelationType_RT_INFINITIVE            RelationType = 11
	RelationType_RT_SUBORDINATE           RelationType = 12
	RelationType_RT_APPOSITIVE            RelationType = 13
	RelationType_RT_COMPARATIVE           RelationType = 14
	RelationType_RT_MODIFIER              RelationType = 15
	RelationType_RT_AUXILIARY             RelationType = 16
	RelationType_RT_PHRASAL               RelationType = 19
	RelationType_RT_LINGUISTIC_CONNECTION RelationType = 30
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0:  "RT_NONE",
		1:  "RT_ARGUMENT",
		2:  "RT_CIRCUMSTANCE",
		3:  "RT_ATTRIBUTE",
		4:  "RT_IDENTITY",
		5:  "RT_DELIMITER",
		6:  "RT_GENITIVE",
		7:  "RT_POSSESSIVE",
		8:  "RT_QUANTIFIER",
		9:  "RT_COORDINATE",
		10: "RT_PREPOSITION",
		11: "RT_INFINITIVE",
		12: "RT_SUBORDINATE",
		13: "RT_APPOSITIVE",
		14: "RT_COMPARATIVE",
		15: "RT_MODIFIER",
		16: "RT_AUXILIARY",
		19: "RT_PHRASAL",
		30: "RT_LINGUISTIC_CONNECTION",
	}
	RelationType_value = map[string]int32{
		"RT_NONE":                  0,
		"RT_ARGUMENT":              1,
		"RT_CIRCUMSTANCE":          2,
		"RT_ATTRIBUTE":             3,
		"RT_IDENTITY":              4,
		"RT_DELIMITER":             5,
		"RT_GENITIVE":              6,
		"RT_POSSESSIVE":            7,
		"RT_QUANTIFIER":            8,
		"RT_COORDINATE":            9,
		"RT_PREPOSITION":           10,
		"RT_INFINITIVE":            11,
		"RT_SUBORDINATE":           12,
		"RT_APPOSITIVE":            13,
		"RT_COMPARATIVE":           14,
		"RT_MODIFIER":              15,
		"RT_AUXILIARY":             16,
		"RT_PHRASAL":               19,
		"RT_LINGUISTIC_CONNECTION": 30,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[2].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[2]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{2}
}

//*
// Sentence types.
type SentenceType int32

const (
	SentenceType_ST_NONE             SentenceType = 0
	SentenceType_ST_APATHETIC        SentenceType = 1
	SentenceType_ST_APOLOGY          SentenceType = 2
	SentenceType_ST_CHURN            SentenceType = 3
	SentenceType_ST_CROSS_REFERENCE  SentenceType = 4
	SentenceType_ST_CRY_FOR_HELP     SentenceType = 5
	SentenceType_ST_DISCLOSURE       SentenceType = 6
	SentenceType_ST_DO_NOT_KNOW      SentenceType = 7
	SentenceType_ST_EVERYTHING       SentenceType = 8
	SentenceType_ST_GENERIC_NEGATIVE SentenceType = 9
	SentenceType_ST_GENERIC_PRAISE   SentenceType = 10
	SentenceType_ST_HELLO_OR_BYE     SentenceType = 11
	SentenceType_ST_LAUGHTER         SentenceType = 12
	SentenceType_ST_LIST             SentenceType = 13
	SentenceType_ST_MINI_MIRANDA     SentenceType = 14
	SentenceType_ST_NOT_RECOMMEND    SentenceType = 15
	SentenceType_ST_NO_COMMENT       SentenceType = 16
	SentenceType_ST_RECOMMEND        SentenceType = 17
	SentenceType_ST_REQUEST          SentenceType = 18
	SentenceType_ST_SUGGESTION       SentenceType = 19
	SentenceType_ST_THANKS           SentenceType = 20
	SentenceType_ST_YES              SentenceType = 21
	SentenceType_ST_COMPARISON       SentenceType = 22
	SentenceType_ST_TENURE           SentenceType = 23
	SentenceType_ST_TRANSFER         SentenceType = 24
	SentenceType_ST_HOLD             SentenceType = 25
	SentenceType_ST_EMPATHY          SentenceType = 26
	SentenceType_ST_CANCELLATION     SentenceType = 27
	SentenceType_ST_PENDING          SentenceType = 28
)

// Enum value maps for SentenceType.
var (
	SentenceType_name = map[int32]string{
		0:  "ST_NONE",
		1:  "ST_APATHETIC",
		2:  "ST_APOLOGY",
		3:  "ST_CHURN",
		4:  "ST_CROSS_REFERENCE",
		5:  "ST_CRY_FOR_HELP",
		6:  "ST_DISCLOSURE",
		7:  "ST_DO_NOT_KNOW",
		8:  "ST_EVERYTHING",
		9:  "ST_GENERIC_NEGATIVE",
		10: "ST_GENERIC_PRAISE",
		11: "ST_HELLO_OR_BYE",
		12: "ST_LAUGHTER",
		13: "ST_LIST",
		14: "ST_MINI_MIRANDA",
		15: "ST_NOT_RECOMMEND",
		16: "ST_NO_COMMENT",
		17: "ST_RECOMMEND",
		18: "ST_REQUEST",
		19: "ST_SUGGESTION",
		20: "ST_THANKS",
		21: "ST_YES",
		22: "ST_COMPARISON",
		23: "ST_TENURE",
		24: "ST_TRANSFER",
		25: "ST_HOLD",
		26: "ST_EMPATHY",
		27: "ST_CANCELLATION",
		28: "ST_PENDING",
	}
	SentenceType_value = map[string]int32{
		"ST_NONE":             0,
		"ST_APATHETIC":        1,
		"ST_APOLOGY":          2,
		"ST_CHURN":            3,
		"ST_CROSS_REFERENCE":  4,
		"ST_CRY_FOR_HELP":     5,
		"ST_DISCLOSURE":       6,
		"ST_DO_NOT_KNOW":      7,
		"ST_EVERYTHING":       8,
		"ST_GENERIC_NEGATIVE": 9,
		"ST_GENERIC_PRAISE":   10,
		"ST_HELLO_OR_BYE":     11,
		"ST_LAUGHTER":         12,
		"ST_LIST":             13,
		"ST_MINI_MIRANDA":     14,
		"ST_NOT_RECOMMEND":    15,
		"ST_NO_COMMENT":       16,
		"ST_RECOMMEND":        17,
		"ST_REQUEST":          18,
		"ST_SUGGESTION":       19,
		"ST_THANKS":           20,
		"ST_YES":              21,
		"ST_COMPARISON":       22,
		"ST_TENURE":           23,
		"ST_TRANSFER":         24,
		"ST_HOLD":             25,
		"ST_EMPATHY":          26,
		"ST_CANCELLATION":     27,
		"ST_PENDING":          28,
	}
)

func (x SentenceType) Enum() *SentenceType {
	p := new(SentenceType)
	*p = x
	return p
}

func (x SentenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[3].Descriptor()
}

func (SentenceType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[3]
}

func (x SentenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentenceType.Descriptor instead.
func (SentenceType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{3}
}

type IssueResolutionConcludingEvent int32

const (
	IssueResolutionConcludingEvent_IR_CE_UNKNOWN        IssueResolutionConcludingEvent = 0
	IssueResolutionConcludingEvent_IR_CE_TRANSFER       IssueResolutionConcludingEvent = 1
	IssueResolutionConcludingEvent_IR_CE_DISCONNECT     IssueResolutionConcludingEvent = 2
	IssueResolutionConcludingEvent_IR_CE_CALL_BACK      IssueResolutionConcludingEvent = 3
	IssueResolutionConcludingEvent_IR_CE_PENDING        IssueResolutionConcludingEvent = 4
	IssueResolutionConcludingEvent_IR_CE_BAD_CONNECTION IssueResolutionConcludingEvent = 5
)

// Enum value maps for IssueResolutionConcludingEvent.
var (
	IssueResolutionConcludingEvent_name = map[int32]string{
		0: "IR_CE_UNKNOWN",
		1: "IR_CE_TRANSFER",
		2: "IR_CE_DISCONNECT",
		3: "IR_CE_CALL_BACK",
		4: "IR_CE_PENDING",
		5: "IR_CE_BAD_CONNECTION",
	}
	IssueResolutionConcludingEvent_value = map[string]int32{
		"IR_CE_UNKNOWN":        0,
		"IR_CE_TRANSFER":       1,
		"IR_CE_DISCONNECT":     2,
		"IR_CE_CALL_BACK":      3,
		"IR_CE_PENDING":        4,
		"IR_CE_BAD_CONNECTION": 5,
	}
)

func (x IssueResolutionConcludingEvent) Enum() *IssueResolutionConcludingEvent {
	p := new(IssueResolutionConcludingEvent)
	*p = x
	return p
}

func (x IssueResolutionConcludingEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueResolutionConcludingEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[4].Descriptor()
}

func (IssueResolutionConcludingEvent) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[4]
}

func (x IssueResolutionConcludingEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueResolutionConcludingEvent.Descriptor instead.
func (IssueResolutionConcludingEvent) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{4}
}

type IssueResolutionParticipantOutcome int32

const (
	IssueResolutionParticipantOutcome_IR_PO_UNKNOWN  IssueResolutionParticipantOutcome = 0
	IssueResolutionParticipantOutcome_IR_PO_DONE     IssueResolutionParticipantOutcome = 1
	IssueResolutionParticipantOutcome_IR_PO_NOT_DONE IssueResolutionParticipantOutcome = 2
)

// Enum value maps for IssueResolutionParticipantOutcome.
var (
	IssueResolutionParticipantOutcome_name = map[int32]string{
		0: "IR_PO_UNKNOWN",
		1: "IR_PO_DONE",
		2: "IR_PO_NOT_DONE",
	}
	IssueResolutionParticipantOutcome_value = map[string]int32{
		"IR_PO_UNKNOWN":  0,
		"IR_PO_DONE":     1,
		"IR_PO_NOT_DONE": 2,
	}
)

func (x IssueResolutionParticipantOutcome) Enum() *IssueResolutionParticipantOutcome {
	p := new(IssueResolutionParticipantOutcome)
	*p = x
	return p
}

func (x IssueResolutionParticipantOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueResolutionParticipantOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[5].Descriptor()
}

func (IssueResolutionParticipantOutcome) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[5]
}

func (x IssueResolutionParticipantOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueResolutionParticipantOutcome.Descriptor instead.
func (IssueResolutionParticipantOutcome) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{5}
}

type IssueResolutionConversationOutcome int32

const (
	IssueResolutionConversationOutcome_IR_CO_UNKNOWN    IssueResolutionConversationOutcome = 0
	IssueResolutionConversationOutcome_IR_CO_RESOLVED   IssueResolutionConversationOutcome = 1
	IssueResolutionConversationOutcome_IR_CO_PENDING    IssueResolutionConversationOutcome = 2
	IssueResolutionConversationOutcome_IR_CO_UNRESOLVED IssueResolutionConversationOutcome = 3
)

// Enum value maps for IssueResolutionConversationOutcome.
var (
	IssueResolutionConversationOutcome_name = map[int32]string{
		0: "IR_CO_UNKNOWN",
		1: "IR_CO_RESOLVED",
		2: "IR_CO_PENDING",
		3: "IR_CO_UNRESOLVED",
	}
	IssueResolutionConversationOutcome_value = map[string]int32{
		"IR_CO_UNKNOWN":    0,
		"IR_CO_RESOLVED":   1,
		"IR_CO_PENDING":    2,
		"IR_CO_UNRESOLVED": 3,
	}
)

func (x IssueResolutionConversationOutcome) Enum() *IssueResolutionConversationOutcome {
	p := new(IssueResolutionConversationOutcome)
	*p = x
	return p
}

func (x IssueResolutionConversationOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueResolutionConversationOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[6].Descriptor()
}

func (IssueResolutionConversationOutcome) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[6]
}

func (x IssueResolutionConversationOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueResolutionConversationOutcome.Descriptor instead.
func (IssueResolutionConversationOutcome) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{6}
}

//*
// Ease score 11-level scale, with default none/null value.
type EaseScore int32

const (
	EaseScore_EASE_NONE  EaseScore = 0
	EaseScore_EASE_NEG_5 EaseScore = 1
	EaseScore_EASE_NEG_4 EaseScore = 2
	EaseScore_EASE_NEG_3 EaseScore = 3
	EaseScore_EASE_NEG_2 EaseScore = 4
	EaseScore_EASE_NEG_1 EaseScore = 5
	EaseScore_EASE_ZERO  EaseScore = 6
	EaseScore_EASE_POS_1 EaseScore = 7
	EaseScore_EASE_POS_2 EaseScore = 8
	EaseScore_EASE_POS_3 EaseScore = 9
	EaseScore_EASE_POS_4 EaseScore = 10
	EaseScore_EASE_POS_5 EaseScore = 11
)

// Enum value maps for EaseScore.
var (
	EaseScore_name = map[int32]string{
		0:  "EASE_NONE",
		1:  "EASE_NEG_5",
		2:  "EASE_NEG_4",
		3:  "EASE_NEG_3",
		4:  "EASE_NEG_2",
		5:  "EASE_NEG_1",
		6:  "EASE_ZERO",
		7:  "EASE_POS_1",
		8:  "EASE_POS_2",
		9:  "EASE_POS_3",
		10: "EASE_POS_4",
		11: "EASE_POS_5",
	}
	EaseScore_value = map[string]int32{
		"EASE_NONE":  0,
		"EASE_NEG_5": 1,
		"EASE_NEG_4": 2,
		"EASE_NEG_3": 3,
		"EASE_NEG_2": 4,
		"EASE_NEG_1": 5,
		"EASE_ZERO":  6,
		"EASE_POS_1": 7,
		"EASE_POS_2": 8,
		"EASE_POS_3": 9,
		"EASE_POS_4": 10,
		"EASE_POS_5": 11,
	}
)

func (x EaseScore) Enum() *EaseScore {
	p := new(EaseScore)
	*p = x
	return p
}

func (x EaseScore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EaseScore) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[7].Descriptor()
}

func (EaseScore) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[7]
}

func (x EaseScore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EaseScore.Descriptor instead.
func (EaseScore) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{7}
}

//*
// The World Awareness types.
type NamedEntityType int32

const (
	NamedEntityType_NAMED_ENTITY_NONE         NamedEntityType = 0
	NamedEntityType_NAMED_ENTITY_ORGANIZATION NamedEntityType = 1
	NamedEntityType_NAMED_ENTITY_PERSON       NamedEntityType = 2
	NamedEntityType_NAMED_ENTITY_LOCATION     NamedEntityType = 3
	NamedEntityType_NAMED_ENTITY_PRODUCT      NamedEntityType = 4
	NamedEntityType_NAMED_ENTITY_EVENT        NamedEntityType = 5
	NamedEntityType_NAMED_ENTITY_BRAND        NamedEntityType = 6
	NamedEntityType_NAMED_ENTITY_COMPANY      NamedEntityType = 7
)

// Enum value maps for NamedEntityType.
var (
	NamedEntityType_name = map[int32]string{
		0: "NAMED_ENTITY_NONE",
		1: "NAMED_ENTITY_ORGANIZATION",
		2: "NAMED_ENTITY_PERSON",
		3: "NAMED_ENTITY_LOCATION",
		4: "NAMED_ENTITY_PRODUCT",
		5: "NAMED_ENTITY_EVENT",
		6: "NAMED_ENTITY_BRAND",
		7: "NAMED_ENTITY_COMPANY",
	}
	NamedEntityType_value = map[string]int32{
		"NAMED_ENTITY_NONE":         0,
		"NAMED_ENTITY_ORGANIZATION": 1,
		"NAMED_ENTITY_PERSON":       2,
		"NAMED_ENTITY_LOCATION":     3,
		"NAMED_ENTITY_PRODUCT":      4,
		"NAMED_ENTITY_EVENT":        5,
		"NAMED_ENTITY_BRAND":        6,
		"NAMED_ENTITY_COMPANY":      7,
	}
)

func (x NamedEntityType) Enum() *NamedEntityType {
	p := new(NamedEntityType)
	*p = x
	return p
}

func (x NamedEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[8].Descriptor()
}

func (NamedEntityType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[8]
}

func (x NamedEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedEntityType.Descriptor instead.
func (NamedEntityType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{8}
}

//*
// The BioMedical types.
type BioMedEntityType int32

const (
	BioMedEntityType_BIOMED_ENTITY_NONE             BioMedEntityType = 0
	BioMedEntityType_BIOMED_ENTITY_MEDICALCONDITION BioMedEntityType = 1
	BioMedEntityType_BIOMED_ENTITY_RX               BioMedEntityType = 2
	BioMedEntityType_BIOMED_ENTITY_MEDICALPROCEDURE BioMedEntityType = 3
)

// Enum value maps for BioMedEntityType.
var (
	BioMedEntityType_name = map[int32]string{
		0: "BIOMED_ENTITY_NONE",
		1: "BIOMED_ENTITY_MEDICALCONDITION",
		2: "BIOMED_ENTITY_RX",
		3: "BIOMED_ENTITY_MEDICALPROCEDURE",
	}
	BioMedEntityType_value = map[string]int32{
		"BIOMED_ENTITY_NONE":             0,
		"BIOMED_ENTITY_MEDICALCONDITION": 1,
		"BIOMED_ENTITY_RX":               2,
		"BIOMED_ENTITY_MEDICALPROCEDURE": 3,
	}
)

func (x BioMedEntityType) Enum() *BioMedEntityType {
	p := new(BioMedEntityType)
	*p = x
	return p
}

func (x BioMedEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BioMedEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[9].Descriptor()
}

func (BioMedEntityType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[9]
}

func (x BioMedEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BioMedEntityType.Descriptor instead.
func (BioMedEntityType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{9}
}

//*
// Identifier types.
type IdentifierType int32

const (
	IdentifierType_IDENTIFIER_NONE     IdentifierType = 0
	IdentifierType_IDENTIFIER_MENTION  IdentifierType = 1
	IdentifierType_IDENTIFIER_HASHTAG  IdentifierType = 2
	IdentifierType_IDENTIFIER_PHONE    IdentifierType = 3
	IdentifierType_IDENTIFIER_EMAIL    IdentifierType = 4
	IdentifierType_IDENTIFIER_URL      IdentifierType = 5
	IdentifierType_IDENTIFIER_RETWEET  IdentifierType = 6
	IdentifierType_IDENTIFIER_DURATION IdentifierType = 7
)

// Enum value maps for IdentifierType.
var (
	IdentifierType_name = map[int32]string{
		0: "IDENTIFIER_NONE",
		1: "IDENTIFIER_MENTION",
		2: "IDENTIFIER_HASHTAG",
		3: "IDENTIFIER_PHONE",
		4: "IDENTIFIER_EMAIL",
		5: "IDENTIFIER_URL",
		6: "IDENTIFIER_RETWEET",
		7: "IDENTIFIER_DURATION",
	}
	IdentifierType_value = map[string]int32{
		"IDENTIFIER_NONE":     0,
		"IDENTIFIER_MENTION":  1,
		"IDENTIFIER_HASHTAG":  2,
		"IDENTIFIER_PHONE":    3,
		"IDENTIFIER_EMAIL":    4,
		"IDENTIFIER_URL":      5,
		"IDENTIFIER_RETWEET":  6,
		"IDENTIFIER_DURATION": 7,
	}
)

func (x IdentifierType) Enum() *IdentifierType {
	p := new(IdentifierType)
	*p = x
	return p
}

func (x IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[10].Descriptor()
}

func (IdentifierType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[10]
}

func (x IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierType.Descriptor instead.
func (IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{10}
}

//*
// Expressive types.
type ExpressiveType int32

const (
	ExpressiveType_EXPRESSIVE_NONE      ExpressiveType = 0
	ExpressiveType_EXPRESSIVE_EMOTICON  ExpressiveType = 1
	ExpressiveType_EXPRESSIVE_PROFANITY ExpressiveType = 2
)

// Enum value maps for ExpressiveType.
var (
	ExpressiveType_name = map[int32]string{
		0: "EXPRESSIVE_NONE",
		1: "EXPRESSIVE_EMOTICON",
		2: "EXPRESSIVE_PROFANITY",
	}
	ExpressiveType_value = map[string]int32{
		"EXPRESSIVE_NONE":      0,
		"EXPRESSIVE_EMOTICON":  1,
		"EXPRESSIVE_PROFANITY": 2,
	}
)

func (x ExpressiveType) Enum() *ExpressiveType {
	p := new(ExpressiveType)
	*p = x
	return p
}

func (x ExpressiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[11].Descriptor()
}

func (ExpressiveType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[11]
}

func (x ExpressiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressiveType.Descriptor instead.
func (ExpressiveType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{11}
}

//*
// Pronoun types.
type PronType int32

const (
	PronType_PRON_NONE            PronType = 0
	PronType_PRON_ARTICLE         PronType = 1
	PronType_PRON_DEMONSTRATIVE   PronType = 2
	PronType_PRON_EMPHATIC        PronType = 3
	PronType_PRON_EXCLAMATIVE     PronType = 4
	PronType_PRON_INDEFINITE      PronType = 5
	PronType_PRON_INTERROGATIVE   PronType = 6
	PronType_PRON_NEGATIVE        PronType = 7
	PronType_PRON_PERSONAL        PronType = 8
	PronType_PRON_PRON_RECIPROCAL PronType = 9
	PronType_PRON_RELATIVE        PronType = 10
	PronType_PRON_TOTAL           PronType = 11
)

// Enum value maps for PronType.
var (
	PronType_name = map[int32]string{
		0:  "PRON_NONE",
		1:  "PRON_ARTICLE",
		2:  "PRON_DEMONSTRATIVE",
		3:  "PRON_EMPHATIC",
		4:  "PRON_EXCLAMATIVE",
		5:  "PRON_INDEFINITE",
		6:  "PRON_INTERROGATIVE",
		7:  "PRON_NEGATIVE",
		8:  "PRON_PERSONAL",
		9:  "PRON_PRON_RECIPROCAL",
		10: "PRON_RELATIVE",
		11: "PRON_TOTAL",
	}
	PronType_value = map[string]int32{
		"PRON_NONE":            0,
		"PRON_ARTICLE":         1,
		"PRON_DEMONSTRATIVE":   2,
		"PRON_EMPHATIC":        3,
		"PRON_EXCLAMATIVE":     4,
		"PRON_INDEFINITE":      5,
		"PRON_INTERROGATIVE":   6,
		"PRON_NEGATIVE":        7,
		"PRON_PERSONAL":        8,
		"PRON_PRON_RECIPROCAL": 9,
		"PRON_RELATIVE":        10,
		"PRON_TOTAL":           11,
	}
)

func (x PronType) Enum() *PronType {
	p := new(PronType)
	*p = x
	return p
}

func (x PronType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PronType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[12].Descriptor()
}

func (PronType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[12]
}

func (x PronType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PronType.Descriptor instead.
func (PronType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{12}
}

//*
// Emotion types.
type EmotionType int32

const (
	EmotionType_EMOTION_TYPE_NONE           EmotionType = 0
	EmotionType_EMOTION_TYPE_OTHER          EmotionType = 1
	EmotionType_EMOTION_TYPE_ANGER          EmotionType = 2
	EmotionType_EMOTION_TYPE_SADNESS        EmotionType = 3
	EmotionType_EMOTION_TYPE_FEAR           EmotionType = 4
	EmotionType_EMOTION_TYPE_FRUSTRATION    EmotionType = 5
	EmotionType_EMOTION_TYPE_SURPRISE       EmotionType = 6
	EmotionType_EMOTION_TYPE_JOY            EmotionType = 7
	EmotionType_EMOTION_TYPE_LOVE           EmotionType = 8
	EmotionType_EMOTION_TYPE_TRUST          EmotionType = 9
	EmotionType_EMOTION_TYPE_CONFUSION      EmotionType = 10
	EmotionType_EMOTION_TYPE_DISAPPOINTMENT EmotionType = 11
	EmotionType_EMOTION_TYPE_EMBARRASSMENT  EmotionType = 12
	EmotionType_EMOTION_TYPE_JEALOUSY       EmotionType = 13
	EmotionType_EMOTION_TYPE_THANKFULNESS   EmotionType = 14
)

// Enum value maps for EmotionType.
var (
	EmotionType_name = map[int32]string{
		0:  "EMOTION_TYPE_NONE",
		1:  "EMOTION_TYPE_OTHER",
		2:  "EMOTION_TYPE_ANGER",
		3:  "EMOTION_TYPE_SADNESS",
		4:  "EMOTION_TYPE_FEAR",
		5:  "EMOTION_TYPE_FRUSTRATION",
		6:  "EMOTION_TYPE_SURPRISE",
		7:  "EMOTION_TYPE_JOY",
		8:  "EMOTION_TYPE_LOVE",
		9:  "EMOTION_TYPE_TRUST",
		10: "EMOTION_TYPE_CONFUSION",
		11: "EMOTION_TYPE_DISAPPOINTMENT",
		12: "EMOTION_TYPE_EMBARRASSMENT",
		13: "EMOTION_TYPE_JEALOUSY",
		14: "EMOTION_TYPE_THANKFULNESS",
	}
	EmotionType_value = map[string]int32{
		"EMOTION_TYPE_NONE":           0,
		"EMOTION_TYPE_OTHER":          1,
		"EMOTION_TYPE_ANGER":          2,
		"EMOTION_TYPE_SADNESS":        3,
		"EMOTION_TYPE_FEAR":           4,
		"EMOTION_TYPE_FRUSTRATION":    5,
		"EMOTION_TYPE_SURPRISE":       6,
		"EMOTION_TYPE_JOY":            7,
		"EMOTION_TYPE_LOVE":           8,
		"EMOTION_TYPE_TRUST":          9,
		"EMOTION_TYPE_CONFUSION":      10,
		"EMOTION_TYPE_DISAPPOINTMENT": 11,
		"EMOTION_TYPE_EMBARRASSMENT":  12,
		"EMOTION_TYPE_JEALOUSY":       13,
		"EMOTION_TYPE_THANKFULNESS":   14,
	}
)

func (x EmotionType) Enum() *EmotionType {
	p := new(EmotionType)
	*p = x
	return p
}

func (x EmotionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotionType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[13].Descriptor()
}

func (EmotionType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[13]
}

func (x EmotionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotionType.Descriptor instead.
func (EmotionType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{13}
}

//*
// Numeric types.
type NumericType int32

const (
	NumericType_NUMERIC_NONE        NumericType = 0
	NumericType_NUMERIC_CURRENCY    NumericType = 1
	NumericType_NUMERIC_ENERGY      NumericType = 2
	NumericType_NUMERIC_AREA        NumericType = 3
	NumericType_NUMERIC_VOLUME      NumericType = 4
	NumericType_NUMERIC_DISTANCE    NumericType = 5
	NumericType_NUMERIC_SPEED       NumericType = 6
	NumericType_NUMERIC_TEMPERATURE NumericType = 7
	NumericType_NUMERIC_WEIGHT      NumericType = 8
	NumericType_NUMERIC_DATA        NumericType = 9
	NumericType_NUMERIC_VIN         NumericType = 10
)

// Enum value maps for NumericType.
var (
	NumericType_name = map[int32]string{
		0:  "NUMERIC_NONE",
		1:  "NUMERIC_CURRENCY",
		2:  "NUMERIC_ENERGY",
		3:  "NUMERIC_AREA",
		4:  "NUMERIC_VOLUME",
		5:  "NUMERIC_DISTANCE",
		6:  "NUMERIC_SPEED",
		7:  "NUMERIC_TEMPERATURE",
		8:  "NUMERIC_WEIGHT",
		9:  "NUMERIC_DATA",
		10: "NUMERIC_VIN",
	}
	NumericType_value = map[string]int32{
		"NUMERIC_NONE":        0,
		"NUMERIC_CURRENCY":    1,
		"NUMERIC_ENERGY":      2,
		"NUMERIC_AREA":        3,
		"NUMERIC_VOLUME":      4,
		"NUMERIC_DISTANCE":    5,
		"NUMERIC_SPEED":       6,
		"NUMERIC_TEMPERATURE": 7,
		"NUMERIC_WEIGHT":      8,
		"NUMERIC_DATA":        9,
		"NUMERIC_VIN":         10,
	}
)

func (x NumericType) Enum() *NumericType {
	p := new(NumericType)
	*p = x
	return p
}

func (x NumericType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumericType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[14].Descriptor()
}

func (NumericType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[14]
}

func (x NumericType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumericType.Descriptor instead.
func (NumericType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{14}
}

//*
// Conversation types.
type ConversationReason int32

const (
	ConversationReason_CONV_REASON_NONE         ConversationReason = 0
	ConversationReason_CONV_REASON_CONTACT      ConversationReason = 1
	ConversationReason_CONV_REASON_EMPATHY      ConversationReason = 2
	ConversationReason_CONV_REASON_CANCELLATION ConversationReason = 3
	ConversationReason_CONV_REASON_HOLD         ConversationReason = 4
	ConversationReason_CONV_REASON_TRANSFER     ConversationReason = 5
)

// Enum value maps for ConversationReason.
var (
	ConversationReason_name = map[int32]string{
		0: "CONV_REASON_NONE",
		1: "CONV_REASON_CONTACT",
		2: "CONV_REASON_EMPATHY",
		3: "CONV_REASON_CANCELLATION",
		4: "CONV_REASON_HOLD",
		5: "CONV_REASON_TRANSFER",
	}
	ConversationReason_value = map[string]int32{
		"CONV_REASON_NONE":         0,
		"CONV_REASON_CONTACT":      1,
		"CONV_REASON_EMPATHY":      2,
		"CONV_REASON_CANCELLATION": 3,
		"CONV_REASON_HOLD":         4,
		"CONV_REASON_TRANSFER":     5,
	}
)

func (x ConversationReason) Enum() *ConversationReason {
	p := new(ConversationReason)
	*p = x
	return p
}

func (x ConversationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[15].Descriptor()
}

func (ConversationReason) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[15]
}

func (x ConversationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationReason.Descriptor instead.
func (ConversationReason) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{15}
}

//*
// Linguistic flags.
type LinguisticFlag int32

const (
	LinguisticFlag_FLAG_NONE              LinguisticFlag = 0
	LinguisticFlag_FLAG_CAUSATIVE         LinguisticFlag = 1
	LinguisticFlag_FLAG_COMPLETE          LinguisticFlag = 2
	LinguisticFlag_FLAG_CONDITIONAL       LinguisticFlag = 3
	LinguisticFlag_FLAG_CONTEMPLATIVE     LinguisticFlag = 4
	LinguisticFlag_FLAG_DESCRIPTIVE       LinguisticFlag = 5
	LinguisticFlag_FLAG_EMOTICON          LinguisticFlag = 6
	LinguisticFlag_FLAG_FUTURE            LinguisticFlag = 7
	LinguisticFlag_FLAG_GERUND            LinguisticFlag = 8
	LinguisticFlag_FLAG_HASHTAG           LinguisticFlag = 9
	LinguisticFlag_FLAG_IF                LinguisticFlag = 10
	LinguisticFlag_FLAG_IMPERATIVE        LinguisticFlag = 11
	LinguisticFlag_FLAG_IMPERFECTIVE      LinguisticFlag = 12
	LinguisticFlag_FLAG_INFINITIVE        LinguisticFlag = 13
	LinguisticFlag_FLAG_INVOLUNTARYACTION LinguisticFlag = 14
	LinguisticFlag_FLAG_MENTION           LinguisticFlag = 15
	LinguisticFlag_FLAG_NEGATION          LinguisticFlag = 16
	LinguisticFlag_FLAG_ONLY              LinguisticFlag = 17
	LinguisticFlag_FLAG_PAST              LinguisticFlag = 18
	LinguisticFlag_FLAG_PASTPARTICIPLE    LinguisticFlag = 19
	LinguisticFlag_FLAG_PASTTENSE         LinguisticFlag = 20
	LinguisticFlag_FLAG_PERFECTIVE        LinguisticFlag = 21
	LinguisticFlag_FLAG_POTENTIAL         LinguisticFlag = 22
	LinguisticFlag_FLAG_PRESENT           LinguisticFlag = 23
	LinguisticFlag_FLAG_PRESENTCONTINUOUS LinguisticFlag = 24
	LinguisticFlag_FLAG_PROCESSIVE        LinguisticFlag = 25
	LinguisticFlag_FLAG_PROGRESSIVE       LinguisticFlag = 26
	LinguisticFlag_FLAG_RECENTLYCOMPLETE  LinguisticFlag = 27
	LinguisticFlag_FLAG_SUBJUNCTIVE       LinguisticFlag = 28
	LinguisticFlag_FLAG_VOLITIONAL        LinguisticFlag = 29
	LinguisticFlag_FLAG_PASTCONTINUOUS    LinguisticFlag = 30
	LinguisticFlag_FLAG_FUTURECONTINUOUS  LinguisticFlag = 31
)

// Enum value maps for LinguisticFlag.
var (
	LinguisticFlag_name = map[int32]string{
		0:  "FLAG_NONE",
		1:  "FLAG_CAUSATIVE",
		2:  "FLAG_COMPLETE",
		3:  "FLAG_CONDITIONAL",
		4:  "FLAG_CONTEMPLATIVE",
		5:  "FLAG_DESCRIPTIVE",
		6:  "FLAG_EMOTICON",
		7:  "FLAG_FUTURE",
		8:  "FLAG_GERUND",
		9:  "FLAG_HASHTAG",
		10: "FLAG_IF",
		11: "FLAG_IMPERATIVE",
		12: "FLAG_IMPERFECTIVE",
		13: "FLAG_INFINITIVE",
		14: "FLAG_INVOLUNTARYACTION",
		15: "FLAG_MENTION",
		16: "FLAG_NEGATION",
		17: "FLAG_ONLY",
		18: "FLAG_PAST",
		19: "FLAG_PASTPARTICIPLE",
		20: "FLAG_PASTTENSE",
		21: "FLAG_PERFECTIVE",
		22: "FLAG_POTENTIAL",
		23: "FLAG_PRESENT",
		24: "FLAG_PRESENTCONTINUOUS",
		25: "FLAG_PROCESSIVE",
		26: "FLAG_PROGRESSIVE",
		27: "FLAG_RECENTLYCOMPLETE",
		28: "FLAG_SUBJUNCTIVE",
		29: "FLAG_VOLITIONAL",
		30: "FLAG_PASTCONTINUOUS",
		31: "FLAG_FUTURECONTINUOUS",
	}
	LinguisticFlag_value = map[string]int32{
		"FLAG_NONE":              0,
		"FLAG_CAUSATIVE":         1,
		"FLAG_COMPLETE":          2,
		"FLAG_CONDITIONAL":       3,
		"FLAG_CONTEMPLATIVE":     4,
		"FLAG_DESCRIPTIVE":       5,
		"FLAG_EMOTICON":          6,
		"FLAG_FUTURE":            7,
		"FLAG_GERUND":            8,
		"FLAG_HASHTAG":           9,
		"FLAG_IF":                10,
		"FLAG_IMPERATIVE":        11,
		"FLAG_IMPERFECTIVE":      12,
		"FLAG_INFINITIVE":        13,
		"FLAG_INVOLUNTARYACTION": 14,
		"FLAG_MENTION":           15,
		"FLAG_NEGATION":          16,
		"FLAG_ONLY":              17,
		"FLAG_PAST":              18,
		"FLAG_PASTPARTICIPLE":    19,
		"FLAG_PASTTENSE":         20,
		"FLAG_PERFECTIVE":        21,
		"FLAG_POTENTIAL":         22,
		"FLAG_PRESENT":           23,
		"FLAG_PRESENTCONTINUOUS": 24,
		"FLAG_PROCESSIVE":        25,
		"FLAG_PROGRESSIVE":       26,
		"FLAG_RECENTLYCOMPLETE":  27,
		"FLAG_SUBJUNCTIVE":       28,
		"FLAG_VOLITIONAL":        29,
		"FLAG_PASTCONTINUOUS":    30,
		"FLAG_FUTURECONTINUOUS":  31,
	}
)

func (x LinguisticFlag) Enum() *LinguisticFlag {
	p := new(LinguisticFlag)
	*p = x
	return p
}

func (x LinguisticFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinguisticFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[16].Descriptor()
}

func (LinguisticFlag) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[16]
}

func (x LinguisticFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinguisticFlag.Descriptor instead.
func (LinguisticFlag) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{16}
}

//*
// Content types.
type ContentType int32

const (
	ContentType_CTE_TYPE_NONE          ContentType = 0
	ContentType_CTE_TYPE_NONCONTENTFUL ContentType = 1
	ContentType_CTE_TYPE_CONTENTFUL    ContentType = 2
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CTE_TYPE_NONE",
		1: "CTE_TYPE_NONCONTENTFUL",
		2: "CTE_TYPE_CONTENTFUL",
	}
	ContentType_value = map[string]int32{
		"CTE_TYPE_NONE":          0,
		"CTE_TYPE_NONCONTENTFUL": 1,
		"CTE_TYPE_CONTENTFUL":    2,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[17].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[17]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{17}
}

//*
// Content subtypes.
type ContentSubtype int32

const (
	ContentSubtype_CTE_SUBTYPE_NONE          ContentSubtype = 0
	ContentSubtype_CTE_SUBTYPE_COUPON        ContentSubtype = 1
	ContentSubtype_CTE_SUBTYPE_ARTICLE       ContentSubtype = 2
	ContentSubtype_CTE_SUBTYPE_ADVERTISEMENT ContentSubtype = 3
)

// Enum value maps for ContentSubtype.
var (
	ContentSubtype_name = map[int32]string{
		0: "CTE_SUBTYPE_NONE",
		1: "CTE_SUBTYPE_COUPON",
		2: "CTE_SUBTYPE_ARTICLE",
		3: "CTE_SUBTYPE_ADVERTISEMENT",
	}
	ContentSubtype_value = map[string]int32{
		"CTE_SUBTYPE_NONE":          0,
		"CTE_SUBTYPE_COUPON":        1,
		"CTE_SUBTYPE_ARTICLE":       2,
		"CTE_SUBTYPE_ADVERTISEMENT": 3,
	}
)

func (x ContentSubtype) Enum() *ContentSubtype {
	p := new(ContentSubtype)
	*p = x
	return p
}

func (x ContentSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[18].Descriptor()
}

func (ContentSubtype) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[18]
}

func (x ContentSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSubtype.Descriptor instead.
func (ContentSubtype) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{18}
}

//*
// Morphological feature values returned by the NLP-SPACY-SERVICE
type MorphFeatValue int32

const (
	MorphFeatValue_MFV_NONE MorphFeatValue = 0
	// Pronoun_Types
	MorphFeatValue_MFV_PRO_DEFINITE      MorphFeatValue = 1
	MorphFeatValue_MFV_PRO_DEMONSTRATIVE MorphFeatValue = 2
	MorphFeatValue_MFV_PRO_INDEFINITE    MorphFeatValue = 3
	MorphFeatValue_MFV_PRO_INTERROGATIVE MorphFeatValue = 4
	MorphFeatValue_MFV_PRO_NEGATIVE      MorphFeatValue = 5
	MorphFeatValue_MFV_PRO_PERSONAL      MorphFeatValue = 6
	MorphFeatValue_MFV_PRO_POSSESSIVE    MorphFeatValue = 7
	MorphFeatValue_MFV_PRO_REFLEXIVE     MorphFeatValue = 8
	MorphFeatValue_MFV_PRO_RELATIVE      MorphFeatValue = 9
	MorphFeatValue_MFV_PRO_EXCLAMATIVE   MorphFeatValue = 10
	MorphFeatValue_MFV_PRO_TOTAL         MorphFeatValue = 11
	MorphFeatValue_MFV_PRO_RECIPROCAL    MorphFeatValue = 43
	// Number
	MorphFeatValue_MFV_NUMBER_SINGULAR MorphFeatValue = 12
	MorphFeatValue_MFV_NUMBER_PLURAL   MorphFeatValue = 13
	// Gender
	MorphFeatValue_MFV_GENDER_FEMININE  MorphFeatValue = 14
	MorphFeatValue_MFV_GENDER_MASCULINE MorphFeatValue = 15
	MorphFeatValue_MFV_GENDER_NEUTRAL   MorphFeatValue = 16
	MorphFeatValue_MFV_GENDER_COMMON    MorphFeatValue = 44
	// Person
	MorphFeatValue_MFV_PERSON_FIRST  MorphFeatValue = 17
	MorphFeatValue_MFV_PERSON_SECOND MorphFeatValue = 18
	MorphFeatValue_MFV_PERSON_THIRD  MorphFeatValue = 19
	// Case
	MorphFeatValue_MFV_CASE_ACCUSATIVE MorphFeatValue = 20
	MorphFeatValue_MFV_CASE_NOMINATIVE MorphFeatValue = 21
	MorphFeatValue_MFV_CASE_GENITIVE   MorphFeatValue = 45
	MorphFeatValue_MFV_CASE_DATIVE     MorphFeatValue = 46
	// VerbForm
	MorphFeatValue_MFV_VERBFORM_FINITE     MorphFeatValue = 22
	MorphFeatValue_MFV_VERBFORM_GERUND     MorphFeatValue = 23
	MorphFeatValue_MFV_VERBFORM_INFINITIVE MorphFeatValue = 24
	MorphFeatValue_MFV_VERBFORM_PARTICIPLE MorphFeatValue = 25
	// Mood
	MorphFeatValue_MFV_MOOD_CONDITIONAL MorphFeatValue = 26
	MorphFeatValue_MFV_MOOD_IMPERATIVE  MorphFeatValue = 27
	MorphFeatValue_MFV_MOOD_INDICATIVE  MorphFeatValue = 28
	MorphFeatValue_MFV_MOOD_SUBJUNCTIVE MorphFeatValue = 29
	// Tense
	MorphFeatValue_MFV_TENSE_FUTURE    MorphFeatValue = 30
	MorphFeatValue_MFV_TENSE_IMPERFECT MorphFeatValue = 31
	MorphFeatValue_MFV_TENSE_PAST      MorphFeatValue = 32
	MorphFeatValue_MFV_TENSE_PRESENT   MorphFeatValue = 34
	// Number Type
	MorphFeatValue_MFV_NUM_ORD   MorphFeatValue = 35
	MorphFeatValue_MFV_NUM_CARD  MorphFeatValue = 36
	MorphFeatValue_MFV_NUM_RANGE MorphFeatValue = 37
	// Voice
	MorphFeatValue_MFV_VOICE_ACTIVE  MorphFeatValue = 38
	MorphFeatValue_MFV_VOICE_PASSIVE MorphFeatValue = 39
	// Degree
	MorphFeatValue_MFV_DEGREE_POSITIVE    MorphFeatValue = 40
	MorphFeatValue_MFV_DEGREE_COMPARATIVE MorphFeatValue = 41
	MorphFeatValue_MFV_DEGREE_SUPERLATIVE MorphFeatValue = 42
	MorphFeatValue_MFV_DEGREE_ABSOLUTE    MorphFeatValue = 47
)

// Enum value maps for MorphFeatValue.
var (
	MorphFeatValue_name = map[int32]string{
		0:  "MFV_NONE",
		1:  "MFV_PRO_DEFINITE",
		2:  "MFV_PRO_DEMONSTRATIVE",
		3:  "MFV_PRO_INDEFINITE",
		4:  "MFV_PRO_INTERROGATIVE",
		5:  "MFV_PRO_NEGATIVE",
		6:  "MFV_PRO_PERSONAL",
		7:  "MFV_PRO_POSSESSIVE",
		8:  "MFV_PRO_REFLEXIVE",
		9:  "MFV_PRO_RELATIVE",
		10: "MFV_PRO_EXCLAMATIVE",
		11: "MFV_PRO_TOTAL",
		43: "MFV_PRO_RECIPROCAL",
		12: "MFV_NUMBER_SINGULAR",
		13: "MFV_NUMBER_PLURAL",
		14: "MFV_GENDER_FEMININE",
		15: "MFV_GENDER_MASCULINE",
		16: "MFV_GENDER_NEUTRAL",
		44: "MFV_GENDER_COMMON",
		17: "MFV_PERSON_FIRST",
		18: "MFV_PERSON_SECOND",
		19: "MFV_PERSON_THIRD",
		20: "MFV_CASE_ACCUSATIVE",
		21: "MFV_CASE_NOMINATIVE",
		45: "MFV_CASE_GENITIVE",
		46: "MFV_CASE_DATIVE",
		22: "MFV_VERBFORM_FINITE",
		23: "MFV_VERBFORM_GERUND",
		24: "MFV_VERBFORM_INFINITIVE",
		25: "MFV_VERBFORM_PARTICIPLE",
		26: "MFV_MOOD_CONDITIONAL",
		27: "MFV_MOOD_IMPERATIVE",
		28: "MFV_MOOD_INDICATIVE",
		29: "MFV_MOOD_SUBJUNCTIVE",
		30: "MFV_TENSE_FUTURE",
		31: "MFV_TENSE_IMPERFECT",
		32: "MFV_TENSE_PAST",
		34: "MFV_TENSE_PRESENT",
		35: "MFV_NUM_ORD",
		36: "MFV_NUM_CARD",
		37: "MFV_NUM_RANGE",
		38: "MFV_VOICE_ACTIVE",
		39: "MFV_VOICE_PASSIVE",
		40: "MFV_DEGREE_POSITIVE",
		41: "MFV_DEGREE_COMPARATIVE",
		42: "MFV_DEGREE_SUPERLATIVE",
		47: "MFV_DEGREE_ABSOLUTE",
	}
	MorphFeatValue_value = map[string]int32{
		"MFV_NONE":                0,
		"MFV_PRO_DEFINITE":        1,
		"MFV_PRO_DEMONSTRATIVE":   2,
		"MFV_PRO_INDEFINITE":      3,
		"MFV_PRO_INTERROGATIVE":   4,
		"MFV_PRO_NEGATIVE":        5,
		"MFV_PRO_PERSONAL":        6,
		"MFV_PRO_POSSESSIVE":      7,
		"MFV_PRO_REFLEXIVE":       8,
		"MFV_PRO_RELATIVE":        9,
		"MFV_PRO_EXCLAMATIVE":     10,
		"MFV_PRO_TOTAL":           11,
		"MFV_PRO_RECIPROCAL":      43,
		"MFV_NUMBER_SINGULAR":     12,
		"MFV_NUMBER_PLURAL":       13,
		"MFV_GENDER_FEMININE":     14,
		"MFV_GENDER_MASCULINE":    15,
		"MFV_GENDER_NEUTRAL":      16,
		"MFV_GENDER_COMMON":       44,
		"MFV_PERSON_FIRST":        17,
		"MFV_PERSON_SECOND":       18,
		"MFV_PERSON_THIRD":        19,
		"MFV_CASE_ACCUSATIVE":     20,
		"MFV_CASE_NOMINATIVE":     21,
		"MFV_CASE_GENITIVE":       45,
		"MFV_CASE_DATIVE":         46,
		"MFV_VERBFORM_FINITE":     22,
		"MFV_VERBFORM_GERUND":     23,
		"MFV_VERBFORM_INFINITIVE": 24,
		"MFV_VERBFORM_PARTICIPLE": 25,
		"MFV_MOOD_CONDITIONAL":    26,
		"MFV_MOOD_IMPERATIVE":     27,
		"MFV_MOOD_INDICATIVE":     28,
		"MFV_MOOD_SUBJUNCTIVE":    29,
		"MFV_TENSE_FUTURE":        30,
		"MFV_TENSE_IMPERFECT":     31,
		"MFV_TENSE_PAST":          32,
		"MFV_TENSE_PRESENT":       34,
		"MFV_NUM_ORD":             35,
		"MFV_NUM_CARD":            36,
		"MFV_NUM_RANGE":           37,
		"MFV_VOICE_ACTIVE":        38,
		"MFV_VOICE_PASSIVE":       39,
		"MFV_DEGREE_POSITIVE":     40,
		"MFV_DEGREE_COMPARATIVE":  41,
		"MFV_DEGREE_SUPERLATIVE":  42,
		"MFV_DEGREE_ABSOLUTE":     47,
	}
)

func (x MorphFeatValue) Enum() *MorphFeatValue {
	p := new(MorphFeatValue)
	*p = x
	return p
}

func (x MorphFeatValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MorphFeatValue) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[19].Descriptor()
}

func (MorphFeatValue) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[19]
}

func (x MorphFeatValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MorphFeatValue.Descriptor instead.
func (MorphFeatValue) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{19}
}

//*
// Conversation Chapter types.
type ChapterType int32

const (
	ChapterType_CHAPTER_NONE          ChapterType = 0
	ChapterType_CHAPTER_OPENING       ChapterType = 1
	ChapterType_CHAPTER_NEED          ChapterType = 2
	ChapterType_CHAPTER_VERIFICATION  ChapterType = 3
	ChapterType_CHAPTER_SOLUTION_STEP ChapterType = 4
	ChapterType_CHAPTER_CLOSING       ChapterType = 5
	ChapterType_CHAPTER_IVR           ChapterType = 6
	ChapterType_CHAPTER_HOLD          ChapterType = 7
)

// Enum value maps for ChapterType.
var (
	ChapterType_name = map[int32]string{
		0: "CHAPTER_NONE",
		1: "CHAPTER_OPENING",
		2: "CHAPTER_NEED",
		3: "CHAPTER_VERIFICATION",
		4: "CHAPTER_SOLUTION_STEP",
		5: "CHAPTER_CLOSING",
		6: "CHAPTER_IVR",
		7: "CHAPTER_HOLD",
	}
	ChapterType_value = map[string]int32{
		"CHAPTER_NONE":          0,
		"CHAPTER_OPENING":       1,
		"CHAPTER_NEED":          2,
		"CHAPTER_VERIFICATION":  3,
		"CHAPTER_SOLUTION_STEP": 4,
		"CHAPTER_CLOSING":       5,
		"CHAPTER_IVR":           6,
		"CHAPTER_HOLD":          7,
	}
)

func (x ChapterType) Enum() *ChapterType {
	p := new(ChapterType)
	*p = x
	return p
}

func (x ChapterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChapterType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[20].Descriptor()
}

func (ChapterType) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[20]
}

func (x ChapterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChapterType.Descriptor instead.
func (ChapterType) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{20}
}

//*
// Classification types supported by the text classification services.
type ClassificationTask int32

const (
	ClassificationTask_TASK_SENTENCE_TYPE     ClassificationTask = 0
	ClassificationTask_TASK_EFFORT            ClassificationTask = 1
	ClassificationTask_TASK_EMPATHY           ClassificationTask = 2
	ClassificationTask_TASK_EMOTION_PRESENCE  ClassificationTask = 3
	ClassificationTask_TASK_EMOTION_TYPE      ClassificationTask = 4
	ClassificationTask_TASK_EMOTION_INTENSITY ClassificationTask = 5
)

// Enum value maps for ClassificationTask.
var (
	ClassificationTask_name = map[int32]string{
		0: "TASK_SENTENCE_TYPE",
		1: "TASK_EFFORT",
		2: "TASK_EMPATHY",
		3: "TASK_EMOTION_PRESENCE",
		4: "TASK_EMOTION_TYPE",
		5: "TASK_EMOTION_INTENSITY",
	}
	ClassificationTask_value = map[string]int32{
		"TASK_SENTENCE_TYPE":     0,
		"TASK_EFFORT":            1,
		"TASK_EMPATHY":           2,
		"TASK_EMOTION_PRESENCE":  3,
		"TASK_EMOTION_TYPE":      4,
		"TASK_EMOTION_INTENSITY": 5,
	}
)

func (x ClassificationTask) Enum() *ClassificationTask {
	p := new(ClassificationTask)
	*p = x
	return p
}

func (x ClassificationTask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassificationTask) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[21].Descriptor()
}

func (ClassificationTask) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[21]
}

func (x ClassificationTask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassificationTask.Descriptor instead.
func (ClassificationTask) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{21}
}

//*
// Language codes based on ISO 639-1. See
// https://www.loc.gov/standards/iso639-2/php/code_list.php
type Language int32

const (
	Language_LANGUAGE_UNKNOWN Language = 0
	Language_LANGUAGE_AB      Language = 1   // Abkhaz
	Language_LANGUAGE_AA      Language = 2   // Afar
	Language_LANGUAGE_AF      Language = 3   // Afrikaans
	Language_LANGUAGE_AK      Language = 4   // Akan
	Language_LANGUAGE_SQ      Language = 5   // Albanian
	Language_LANGUAGE_AM      Language = 6   // Amharic
	Language_LANGUAGE_AR      Language = 7   // Arabic
	Language_LANGUAGE_AN      Language = 8   // Aragonese
	Language_LANGUAGE_HY      Language = 9   // Armenian
	Language_LANGUAGE_AS      Language = 10  // Assamese
	Language_LANGUAGE_AV      Language = 11  // Avaric
	Language_LANGUAGE_AE      Language = 12  // Avestan
	Language_LANGUAGE_AY      Language = 13  // Aymara
	Language_LANGUAGE_AZ      Language = 14  // Azerbaijani
	Language_LANGUAGE_BM      Language = 15  // Bambara
	Language_LANGUAGE_BA      Language = 16  // Bashkir
	Language_LANGUAGE_EU      Language = 17  // Basque
	Language_LANGUAGE_BE      Language = 18  // Belarusian
	Language_LANGUAGE_BN      Language = 19  // Bengali
	Language_LANGUAGE_BH      Language = 20  // Bihari
	Language_LANGUAGE_BI      Language = 21  // Bislama
	Language_LANGUAGE_BS      Language = 22  // Bosnian
	Language_LANGUAGE_BR      Language = 23  // Breton
	Language_LANGUAGE_BG      Language = 24  // Bulgarian
	Language_LANGUAGE_MY      Language = 25  // Burmese
	Language_LANGUAGE_CA      Language = 26  // Catalan; Valencian
	Language_LANGUAGE_CH      Language = 27  // Chamorro
	Language_LANGUAGE_CE      Language = 28  // Chechen
	Language_LANGUAGE_NY      Language = 29  // Chichewa; Chewa; Nyanja
	Language_LANGUAGE_ZH      Language = 30  // Chinese
	Language_LANGUAGE_CV      Language = 31  // Chuvash
	Language_LANGUAGE_KW      Language = 32  // Cornish
	Language_LANGUAGE_CO      Language = 33  // Corsican
	Language_LANGUAGE_CR      Language = 34  // Cree
	Language_LANGUAGE_HR      Language = 35  // Croatian
	Language_LANGUAGE_CS      Language = 36  // Czech
	Language_LANGUAGE_DA      Language = 37  // Danish
	Language_LANGUAGE_DV      Language = 38  // Divehi; Maldivian;
	Language_LANGUAGE_NL      Language = 39  // Dutch
	Language_LANGUAGE_DZ      Language = 40  // Dzongkha
	Language_LANGUAGE_EN      Language = 41  // English
	Language_LANGUAGE_EO      Language = 42  // Esperanto
	Language_LANGUAGE_ET      Language = 43  // Estonian
	Language_LANGUAGE_EE      Language = 44  // Ewe
	Language_LANGUAGE_FO      Language = 45  // Faroese
	Language_LANGUAGE_FJ      Language = 46  // Fijian
	Language_LANGUAGE_FI      Language = 47  // Finnish
	Language_LANGUAGE_FR      Language = 48  // French
	Language_LANGUAGE_FF      Language = 49  // Fula
	Language_LANGUAGE_GL      Language = 50  // Galician
	Language_LANGUAGE_KA      Language = 51  // Georgian
	Language_LANGUAGE_DE      Language = 52  // German
	Language_LANGUAGE_EL      Language = 53  // Greek, Modern
	Language_LANGUAGE_GN      Language = 54  // Guaraní
	Language_LANGUAGE_GU      Language = 55  // Gujarati
	Language_LANGUAGE_HT      Language = 56  // Haitian
	Language_LANGUAGE_HA      Language = 57  // Hausa
	Language_LANGUAGE_HE      Language = 58  // Hebrew (modern)
	Language_LANGUAGE_HZ      Language = 59  // Herero
	Language_LANGUAGE_HI      Language = 60  // Hindi
	Language_LANGUAGE_HO      Language = 61  // Hiri Motu
	Language_LANGUAGE_HU      Language = 62  // Hungarian
	Language_LANGUAGE_IA      Language = 63  // Interlingua
	Language_LANGUAGE_ID      Language = 64  // Indonesian
	Language_LANGUAGE_IE      Language = 65  // Interlingue
	Language_LANGUAGE_GA      Language = 66  // Irish
	Language_LANGUAGE_IG      Language = 67  // Igbo
	Language_LANGUAGE_IK      Language = 68  // Inupiaq
	Language_LANGUAGE_IO      Language = 69  // Ido
	Language_LANGUAGE_IS      Language = 70  // Icelandic
	Language_LANGUAGE_IT      Language = 71  // Italian
	Language_LANGUAGE_IU      Language = 72  // Inuktitut
	Language_LANGUAGE_JA      Language = 73  // Japanese
	Language_LANGUAGE_JV      Language = 74  // Javanese
	Language_LANGUAGE_KL      Language = 75  // Kalaallisut
	Language_LANGUAGE_KN      Language = 76  // Kannada
	Language_LANGUAGE_KR      Language = 77  // Kanuri
	Language_LANGUAGE_KS      Language = 78  // Kashmiri
	Language_LANGUAGE_KK      Language = 79  // Kazakh
	Language_LANGUAGE_KM      Language = 80  // Khmer
	Language_LANGUAGE_KI      Language = 81  // Kikuyu, Gikuyu
	Language_LANGUAGE_RW      Language = 82  // Kinyarwanda
	Language_LANGUAGE_KY      Language = 83  // Kirghiz, Kyrgyz
	Language_LANGUAGE_KV      Language = 84  // Komi
	Language_LANGUAGE_KG      Language = 85  // Kongo
	Language_LANGUAGE_KO      Language = 86  // Korean
	Language_LANGUAGE_KU      Language = 87  // Kurdish
	Language_LANGUAGE_KJ      Language = 88  // Kwanyama, Kuanyama
	Language_LANGUAGE_LA      Language = 89  // Latin
	Language_LANGUAGE_LB      Language = 90  // Luxembourgish
	Language_LANGUAGE_LG      Language = 91  // Luganda
	Language_LANGUAGE_LI      Language = 92  // Limburgish
	Language_LANGUAGE_LN      Language = 93  // Lingala
	Language_LANGUAGE_LO      Language = 94  // Lao
	Language_LANGUAGE_LT      Language = 95  // Lithuanian
	Language_LANGUAGE_LU      Language = 96  // Luba-Katanga
	Language_LANGUAGE_LV      Language = 97  // Latvian
	Language_LANGUAGE_GV      Language = 98  // Manx
	Language_LANGUAGE_MK      Language = 99  // Macedonian
	Language_LANGUAGE_MG      Language = 100 // Malagasy
	Language_LANGUAGE_MS      Language = 101 // Malay
	Language_LANGUAGE_ML      Language = 102 // Malayalam
	Language_LANGUAGE_MT      Language = 103 // Maltese
	Language_LANGUAGE_MI      Language = 104 // Māori
	Language_LANGUAGE_MR      Language = 105 // Marathi (Marāṭhī)
	Language_LANGUAGE_MH      Language = 106 // Marshallese
	Language_LANGUAGE_MN      Language = 107 // Mongolian
	Language_LANGUAGE_NA      Language = 108 // Nauru
	Language_LANGUAGE_NV      Language = 109 // Navajo, Navaho
	Language_LANGUAGE_NB      Language = 110 // Norwegian Bokmål
	Language_LANGUAGE_ND      Language = 111 // North Ndebele
	Language_LANGUAGE_NE      Language = 112 // Nepali
	Language_LANGUAGE_NG      Language = 113 // Ndonga
	Language_LANGUAGE_NN      Language = 114 // Norwegian Nynorsk
	Language_LANGUAGE_NO      Language = 115 // Norwegian
	Language_LANGUAGE_II      Language = 116 // Nuosu
	Language_LANGUAGE_NR      Language = 117 // South Ndebele
	Language_LANGUAGE_OC      Language = 118 // Occitan
	Language_LANGUAGE_OJ      Language = 119 // Ojibwe, Ojibwa
	Language_LANGUAGE_CU      Language = 120 // Old Church Slavonic
	Language_LANGUAGE_OM      Language = 121 // Oromo
	Language_LANGUAGE_OR      Language = 122 // Oriya
	Language_LANGUAGE_OS      Language = 123 // Ossetian, Ossetic
	Language_LANGUAGE_PA      Language = 124 // Panjabi, Punjabi
	Language_LANGUAGE_PI      Language = 125 // Pāli
	Language_LANGUAGE_FA      Language = 126 // Persian
	Language_LANGUAGE_PL      Language = 127 // Polish
	Language_LANGUAGE_PS      Language = 128 // Pashto, Pushto
	Language_LANGUAGE_PT      Language = 129 // Portuguese
	Language_LANGUAGE_QU      Language = 130 // Quechua
	Language_LANGUAGE_RM      Language = 131 // Romansh
	Language_LANGUAGE_RN      Language = 132 // Kirundi
	Language_LANGUAGE_RO      Language = 133 // Romanian, Moldavan
	Language_LANGUAGE_RU      Language = 134 // Russian
	Language_LANGUAGE_SA      Language = 135 // Sanskrit (Saṁskṛta)
	Language_LANGUAGE_SC      Language = 136 // Sardinian
	Language_LANGUAGE_SD      Language = 137 // Sindhi
	Language_LANGUAGE_SE      Language = 138 // Northern Sami
	Language_LANGUAGE_SM      Language = 139 // Samoan
	Language_LANGUAGE_SG      Language = 140 // Sango
	Language_LANGUAGE_SR      Language = 141 // Serbian
	Language_LANGUAGE_GD      Language = 142 // Scottish Gaelic
	Language_LANGUAGE_SN      Language = 143 // Shona
	Language_LANGUAGE_SI      Language = 144 // Sinhala, Sinhalese
	Language_LANGUAGE_SK      Language = 145 // Slovak
	Language_LANGUAGE_SL      Language = 146 // Slovene
	Language_LANGUAGE_SO      Language = 147 // Somali
	Language_LANGUAGE_ST      Language = 148 // Southern Sotho
	Language_LANGUAGE_ES      Language = 149 // Spanish; Castilian
	Language_LANGUAGE_SU      Language = 150 // Sundanese
	Language_LANGUAGE_SW      Language = 151 // Swahili
	Language_LANGUAGE_SS      Language = 152 // Swati
	Language_LANGUAGE_SV      Language = 153 // Swedish
	Language_LANGUAGE_TA      Language = 154 // Tamil
	Language_LANGUAGE_TE      Language = 155 // Telugu
	Language_LANGUAGE_TG      Language = 156 // Tajik
	Language_LANGUAGE_TH      Language = 157 // Thai
	Language_LANGUAGE_TI      Language = 158 // Tigrinya
	Language_LANGUAGE_BO      Language = 159 // Tibetan
	Language_LANGUAGE_TK      Language = 160 // Turkmen
	Language_LANGUAGE_TL      Language = 161 // Tagalog
	Language_LANGUAGE_TN      Language = 162 // Tswana
	Language_LANGUAGE_TO      Language = 163 // Tonga
	Language_LANGUAGE_TR      Language = 164 // Turkish
	Language_LANGUAGE_TS      Language = 165 // Tsonga
	Language_LANGUAGE_TT      Language = 166 // Tatar
	Language_LANGUAGE_TW      Language = 167 // Twi
	Language_LANGUAGE_TY      Language = 168 // Tahitian
	Language_LANGUAGE_UG      Language = 169 // Uighur, Uyghur
	Language_LANGUAGE_UK      Language = 170 // Ukrainian
	Language_LANGUAGE_UR      Language = 171 // Urdu
	Language_LANGUAGE_UZ      Language = 172 // Uzbek
	Language_LANGUAGE_VE      Language = 173 // Venda
	Language_LANGUAGE_VI      Language = 174 // Vietnamese
	Language_LANGUAGE_VO      Language = 175 // Volapük
	Language_LANGUAGE_WA      Language = 176 // Walloon
	Language_LANGUAGE_CY      Language = 177 // Welsh
	Language_LANGUAGE_WO      Language = 178 // Wolof
	Language_LANGUAGE_FY      Language = 179 // Western Frisian
	Language_LANGUAGE_XH      Language = 180 // Xhosa
	Language_LANGUAGE_YI      Language = 181 // Yiddish
	Language_LANGUAGE_YO      Language = 182 // Yoruba
	Language_LANGUAGE_ZA      Language = 183 // Zhuang, Chuang
	Language_LANGUAGE_ZU      Language = 184 // Zulu
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:   "LANGUAGE_UNKNOWN",
		1:   "LANGUAGE_AB",
		2:   "LANGUAGE_AA",
		3:   "LANGUAGE_AF",
		4:   "LANGUAGE_AK",
		5:   "LANGUAGE_SQ",
		6:   "LANGUAGE_AM",
		7:   "LANGUAGE_AR",
		8:   "LANGUAGE_AN",
		9:   "LANGUAGE_HY",
		10:  "LANGUAGE_AS",
		11:  "LANGUAGE_AV",
		12:  "LANGUAGE_AE",
		13:  "LANGUAGE_AY",
		14:  "LANGUAGE_AZ",
		15:  "LANGUAGE_BM",
		16:  "LANGUAGE_BA",
		17:  "LANGUAGE_EU",
		18:  "LANGUAGE_BE",
		19:  "LANGUAGE_BN",
		20:  "LANGUAGE_BH",
		21:  "LANGUAGE_BI",
		22:  "LANGUAGE_BS",
		23:  "LANGUAGE_BR",
		24:  "LANGUAGE_BG",
		25:  "LANGUAGE_MY",
		26:  "LANGUAGE_CA",
		27:  "LANGUAGE_CH",
		28:  "LANGUAGE_CE",
		29:  "LANGUAGE_NY",
		30:  "LANGUAGE_ZH",
		31:  "LANGUAGE_CV",
		32:  "LANGUAGE_KW",
		33:  "LANGUAGE_CO",
		34:  "LANGUAGE_CR",
		35:  "LANGUAGE_HR",
		36:  "LANGUAGE_CS",
		37:  "LANGUAGE_DA",
		38:  "LANGUAGE_DV",
		39:  "LANGUAGE_NL",
		40:  "LANGUAGE_DZ",
		41:  "LANGUAGE_EN",
		42:  "LANGUAGE_EO",
		43:  "LANGUAGE_ET",
		44:  "LANGUAGE_EE",
		45:  "LANGUAGE_FO",
		46:  "LANGUAGE_FJ",
		47:  "LANGUAGE_FI",
		48:  "LANGUAGE_FR",
		49:  "LANGUAGE_FF",
		50:  "LANGUAGE_GL",
		51:  "LANGUAGE_KA",
		52:  "LANGUAGE_DE",
		53:  "LANGUAGE_EL",
		54:  "LANGUAGE_GN",
		55:  "LANGUAGE_GU",
		56:  "LANGUAGE_HT",
		57:  "LANGUAGE_HA",
		58:  "LANGUAGE_HE",
		59:  "LANGUAGE_HZ",
		60:  "LANGUAGE_HI",
		61:  "LANGUAGE_HO",
		62:  "LANGUAGE_HU",
		63:  "LANGUAGE_IA",
		64:  "LANGUAGE_ID",
		65:  "LANGUAGE_IE",
		66:  "LANGUAGE_GA",
		67:  "LANGUAGE_IG",
		68:  "LANGUAGE_IK",
		69:  "LANGUAGE_IO",
		70:  "LANGUAGE_IS",
		71:  "LANGUAGE_IT",
		72:  "LANGUAGE_IU",
		73:  "LANGUAGE_JA",
		74:  "LANGUAGE_JV",
		75:  "LANGUAGE_KL",
		76:  "LANGUAGE_KN",
		77:  "LANGUAGE_KR",
		78:  "LANGUAGE_KS",
		79:  "LANGUAGE_KK",
		80:  "LANGUAGE_KM",
		81:  "LANGUAGE_KI",
		82:  "LANGUAGE_RW",
		83:  "LANGUAGE_KY",
		84:  "LANGUAGE_KV",
		85:  "LANGUAGE_KG",
		86:  "LANGUAGE_KO",
		87:  "LANGUAGE_KU",
		88:  "LANGUAGE_KJ",
		89:  "LANGUAGE_LA",
		90:  "LANGUAGE_LB",
		91:  "LANGUAGE_LG",
		92:  "LANGUAGE_LI",
		93:  "LANGUAGE_LN",
		94:  "LANGUAGE_LO",
		95:  "LANGUAGE_LT",
		96:  "LANGUAGE_LU",
		97:  "LANGUAGE_LV",
		98:  "LANGUAGE_GV",
		99:  "LANGUAGE_MK",
		100: "LANGUAGE_MG",
		101: "LANGUAGE_MS",
		102: "LANGUAGE_ML",
		103: "LANGUAGE_MT",
		104: "LANGUAGE_MI",
		105: "LANGUAGE_MR",
		106: "LANGUAGE_MH",
		107: "LANGUAGE_MN",
		108: "LANGUAGE_NA",
		109: "LANGUAGE_NV",
		110: "LANGUAGE_NB",
		111: "LANGUAGE_ND",
		112: "LANGUAGE_NE",
		113: "LANGUAGE_NG",
		114: "LANGUAGE_NN",
		115: "LANGUAGE_NO",
		116: "LANGUAGE_II",
		117: "LANGUAGE_NR",
		118: "LANGUAGE_OC",
		119: "LANGUAGE_OJ",
		120: "LANGUAGE_CU",
		121: "LANGUAGE_OM",
		122: "LANGUAGE_OR",
		123: "LANGUAGE_OS",
		124: "LANGUAGE_PA",
		125: "LANGUAGE_PI",
		126: "LANGUAGE_FA",
		127: "LANGUAGE_PL",
		128: "LANGUAGE_PS",
		129: "LANGUAGE_PT",
		130: "LANGUAGE_QU",
		131: "LANGUAGE_RM",
		132: "LANGUAGE_RN",
		133: "LANGUAGE_RO",
		134: "LANGUAGE_RU",
		135: "LANGUAGE_SA",
		136: "LANGUAGE_SC",
		137: "LANGUAGE_SD",
		138: "LANGUAGE_SE",
		139: "LANGUAGE_SM",
		140: "LANGUAGE_SG",
		141: "LANGUAGE_SR",
		142: "LANGUAGE_GD",
		143: "LANGUAGE_SN",
		144: "LANGUAGE_SI",
		145: "LANGUAGE_SK",
		146: "LANGUAGE_SL",
		147: "LANGUAGE_SO",
		148: "LANGUAGE_ST",
		149: "LANGUAGE_ES",
		150: "LANGUAGE_SU",
		151: "LANGUAGE_SW",
		152: "LANGUAGE_SS",
		153: "LANGUAGE_SV",
		154: "LANGUAGE_TA",
		155: "LANGUAGE_TE",
		156: "LANGUAGE_TG",
		157: "LANGUAGE_TH",
		158: "LANGUAGE_TI",
		159: "LANGUAGE_BO",
		160: "LANGUAGE_TK",
		161: "LANGUAGE_TL",
		162: "LANGUAGE_TN",
		163: "LANGUAGE_TO",
		164: "LANGUAGE_TR",
		165: "LANGUAGE_TS",
		166: "LANGUAGE_TT",
		167: "LANGUAGE_TW",
		168: "LANGUAGE_TY",
		169: "LANGUAGE_UG",
		170: "LANGUAGE_UK",
		171: "LANGUAGE_UR",
		172: "LANGUAGE_UZ",
		173: "LANGUAGE_VE",
		174: "LANGUAGE_VI",
		175: "LANGUAGE_VO",
		176: "LANGUAGE_WA",
		177: "LANGUAGE_CY",
		178: "LANGUAGE_WO",
		179: "LANGUAGE_FY",
		180: "LANGUAGE_XH",
		181: "LANGUAGE_YI",
		182: "LANGUAGE_YO",
		183: "LANGUAGE_ZA",
		184: "LANGUAGE_ZU",
	}
	Language_value = map[string]int32{
		"LANGUAGE_UNKNOWN": 0,
		"LANGUAGE_AB":      1,
		"LANGUAGE_AA":      2,
		"LANGUAGE_AF":      3,
		"LANGUAGE_AK":      4,
		"LANGUAGE_SQ":      5,
		"LANGUAGE_AM":      6,
		"LANGUAGE_AR":      7,
		"LANGUAGE_AN":      8,
		"LANGUAGE_HY":      9,
		"LANGUAGE_AS":      10,
		"LANGUAGE_AV":      11,
		"LANGUAGE_AE":      12,
		"LANGUAGE_AY":      13,
		"LANGUAGE_AZ":      14,
		"LANGUAGE_BM":      15,
		"LANGUAGE_BA":      16,
		"LANGUAGE_EU":      17,
		"LANGUAGE_BE":      18,
		"LANGUAGE_BN":      19,
		"LANGUAGE_BH":      20,
		"LANGUAGE_BI":      21,
		"LANGUAGE_BS":      22,
		"LANGUAGE_BR":      23,
		"LANGUAGE_BG":      24,
		"LANGUAGE_MY":      25,
		"LANGUAGE_CA":      26,
		"LANGUAGE_CH":      27,
		"LANGUAGE_CE":      28,
		"LANGUAGE_NY":      29,
		"LANGUAGE_ZH":      30,
		"LANGUAGE_CV":      31,
		"LANGUAGE_KW":      32,
		"LANGUAGE_CO":      33,
		"LANGUAGE_CR":      34,
		"LANGUAGE_HR":      35,
		"LANGUAGE_CS":      36,
		"LANGUAGE_DA":      37,
		"LANGUAGE_DV":      38,
		"LANGUAGE_NL":      39,
		"LANGUAGE_DZ":      40,
		"LANGUAGE_EN":      41,
		"LANGUAGE_EO":      42,
		"LANGUAGE_ET":      43,
		"LANGUAGE_EE":      44,
		"LANGUAGE_FO":      45,
		"LANGUAGE_FJ":      46,
		"LANGUAGE_FI":      47,
		"LANGUAGE_FR":      48,
		"LANGUAGE_FF":      49,
		"LANGUAGE_GL":      50,
		"LANGUAGE_KA":      51,
		"LANGUAGE_DE":      52,
		"LANGUAGE_EL":      53,
		"LANGUAGE_GN":      54,
		"LANGUAGE_GU":      55,
		"LANGUAGE_HT":      56,
		"LANGUAGE_HA":      57,
		"LANGUAGE_HE":      58,
		"LANGUAGE_HZ":      59,
		"LANGUAGE_HI":      60,
		"LANGUAGE_HO":      61,
		"LANGUAGE_HU":      62,
		"LANGUAGE_IA":      63,
		"LANGUAGE_ID":      64,
		"LANGUAGE_IE":      65,
		"LANGUAGE_GA":      66,
		"LANGUAGE_IG":      67,
		"LANGUAGE_IK":      68,
		"LANGUAGE_IO":      69,
		"LANGUAGE_IS":      70,
		"LANGUAGE_IT":      71,
		"LANGUAGE_IU":      72,
		"LANGUAGE_JA":      73,
		"LANGUAGE_JV":      74,
		"LANGUAGE_KL":      75,
		"LANGUAGE_KN":      76,
		"LANGUAGE_KR":      77,
		"LANGUAGE_KS":      78,
		"LANGUAGE_KK":      79,
		"LANGUAGE_KM":      80,
		"LANGUAGE_KI":      81,
		"LANGUAGE_RW":      82,
		"LANGUAGE_KY":      83,
		"LANGUAGE_KV":      84,
		"LANGUAGE_KG":      85,
		"LANGUAGE_KO":      86,
		"LANGUAGE_KU":      87,
		"LANGUAGE_KJ":      88,
		"LANGUAGE_LA":      89,
		"LANGUAGE_LB":      90,
		"LANGUAGE_LG":      91,
		"LANGUAGE_LI":      92,
		"LANGUAGE_LN":      93,
		"LANGUAGE_LO":      94,
		"LANGUAGE_LT":      95,
		"LANGUAGE_LU":      96,
		"LANGUAGE_LV":      97,
		"LANGUAGE_GV":      98,
		"LANGUAGE_MK":      99,
		"LANGUAGE_MG":      100,
		"LANGUAGE_MS":      101,
		"LANGUAGE_ML":      102,
		"LANGUAGE_MT":      103,
		"LANGUAGE_MI":      104,
		"LANGUAGE_MR":      105,
		"LANGUAGE_MH":      106,
		"LANGUAGE_MN":      107,
		"LANGUAGE_NA":      108,
		"LANGUAGE_NV":      109,
		"LANGUAGE_NB":      110,
		"LANGUAGE_ND":      111,
		"LANGUAGE_NE":      112,
		"LANGUAGE_NG":      113,
		"LANGUAGE_NN":      114,
		"LANGUAGE_NO":      115,
		"LANGUAGE_II":      116,
		"LANGUAGE_NR":      117,
		"LANGUAGE_OC":      118,
		"LANGUAGE_OJ":      119,
		"LANGUAGE_CU":      120,
		"LANGUAGE_OM":      121,
		"LANGUAGE_OR":      122,
		"LANGUAGE_OS":      123,
		"LANGUAGE_PA":      124,
		"LANGUAGE_PI":      125,
		"LANGUAGE_FA":      126,
		"LANGUAGE_PL":      127,
		"LANGUAGE_PS":      128,
		"LANGUAGE_PT":      129,
		"LANGUAGE_QU":      130,
		"LANGUAGE_RM":      131,
		"LANGUAGE_RN":      132,
		"LANGUAGE_RO":      133,
		"LANGUAGE_RU":      134,
		"LANGUAGE_SA":      135,
		"LANGUAGE_SC":      136,
		"LANGUAGE_SD":      137,
		"LANGUAGE_SE":      138,
		"LANGUAGE_SM":      139,
		"LANGUAGE_SG":      140,
		"LANGUAGE_SR":      141,
		"LANGUAGE_GD":      142,
		"LANGUAGE_SN":      143,
		"LANGUAGE_SI":      144,
		"LANGUAGE_SK":      145,
		"LANGUAGE_SL":      146,
		"LANGUAGE_SO":      147,
		"LANGUAGE_ST":      148,
		"LANGUAGE_ES":      149,
		"LANGUAGE_SU":      150,
		"LANGUAGE_SW":      151,
		"LANGUAGE_SS":      152,
		"LANGUAGE_SV":      153,
		"LANGUAGE_TA":      154,
		"LANGUAGE_TE":      155,
		"LANGUAGE_TG":      156,
		"LANGUAGE_TH":      157,
		"LANGUAGE_TI":      158,
		"LANGUAGE_BO":      159,
		"LANGUAGE_TK":      160,
		"LANGUAGE_TL":      161,
		"LANGUAGE_TN":      162,
		"LANGUAGE_TO":      163,
		"LANGUAGE_TR":      164,
		"LANGUAGE_TS":      165,
		"LANGUAGE_TT":      166,
		"LANGUAGE_TW":      167,
		"LANGUAGE_TY":      168,
		"LANGUAGE_UG":      169,
		"LANGUAGE_UK":      170,
		"LANGUAGE_UR":      171,
		"LANGUAGE_UZ":      172,
		"LANGUAGE_VE":      173,
		"LANGUAGE_VI":      174,
		"LANGUAGE_VO":      175,
		"LANGUAGE_WA":      176,
		"LANGUAGE_CY":      177,
		"LANGUAGE_WO":      178,
		"LANGUAGE_FY":      179,
		"LANGUAGE_XH":      180,
		"LANGUAGE_YI":      181,
		"LANGUAGE_YO":      182,
		"LANGUAGE_ZA":      183,
		"LANGUAGE_ZU":      184,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_nlp_enumeration_proto_enumTypes[22].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_nlp_enumeration_proto_enumTypes[22]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_nlp_enumeration_proto_rawDescGZIP(), []int{22}
}

var File_nlp_enumeration_proto protoreflect.FileDescriptor

var file_nlp_enumeration_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x6c, 0x70, 0x2a, 0x85, 0x03, 0x0a,
	0x0a, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x5f, 0x41,
	0x44, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50,
	0x5f, 0x41, 0x44, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x50, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x42, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x5f, 0x4e, 0x4f, 0x55,
	0x4e, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x5f, 0x4e, 0x4f, 0x55, 0x4e, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x50, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x5f,
	0x41, 0x55, 0x58, 0x49, 0x4c, 0x49, 0x41, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x50, 0x5f,
	0x43, 0x4f, 0x4e, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x55, 0x42, 0x4f, 0x52,
	0x44, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x50, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x5f,
	0x50, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50,
	0x5f, 0x50, 0x55, 0x4e, 0x43, 0x54, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x41, 0x4c, 0x10, 0x13, 0x2a, 0xc8, 0x03, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x44, 0x45, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x56, 0x43, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x44, 0x56, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4d, 0x4f, 0x44, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4f, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x55, 0x58, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12,
	0x06, 0x0a, 0x02, 0x43, 0x43, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x43, 0x4f, 0x4d, 0x50,
	0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x46, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4e,
	0x4a, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x50, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x53, 0x55, 0x42, 0x4a, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x50, 0x10, 0x0f,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x54, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x50, 0x4c,
	0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x14, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x4f, 0x45, 0x53, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4f, 0x42, 0x4a, 0x10, 0x17, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x52,
	0x4b, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4d, 0x4f, 0x44, 0x10, 0x1a, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x53, 0x55, 0x42, 0x4a, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x4d,
	0x4f, 0x44, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x42, 0x4a, 0x10, 0x1d, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x42, 0x4c, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e,
	0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x54, 0x41, 0x58, 0x49, 0x53, 0x10,
	0x20, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x4e, 0x43, 0x54, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4e, 0x44, 0x55, 0x4d, 0x10, 0x22, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x4f, 0x4f, 0x54, 0x10, 0x23, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x24, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0x25, 0x2a,
	0xf3, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x4d, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x47,
	0x45, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f,
	0x50, 0x4f, 0x53, 0x53, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0d,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x58, 0x49,
	0x4c, 0x49, 0x41, 0x52, 0x59, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x5f, 0x50, 0x48,
	0x52, 0x41, 0x53, 0x41, 0x4c, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x54, 0x5f, 0x4c, 0x49,
	0x4e, 0x47, 0x55, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x2a, 0x98, 0x04, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x41, 0x54, 0x48, 0x45,
	0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x4f, 0x4c,
	0x4f, 0x47, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x55, 0x52,
	0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x5f, 0x43, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52,
	0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x52, 0x59, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x5f, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x4f, 0x52, 0x5f, 0x42, 0x59, 0x45, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x0c,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x4d, 0x49, 0x52, 0x41, 0x4e, 0x44, 0x41,
	0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x12, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53, 0x10, 0x14, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4e, 0x55, 0x52, 0x45, 0x10, 0x17, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x18, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x5f, 0x45, 0x4d, 0x50, 0x41, 0x54, 0x48, 0x59, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x1c,
	0x2a, 0x9f, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x52, 0x5f, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x52, 0x5f, 0x43, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x52,
	0x5f, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x52, 0x5f, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x52, 0x5f, 0x43, 0x45, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x52, 0x5f, 0x43,
	0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x2a, 0x5a, 0x0a, 0x21, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x52, 0x5f, 0x50, 0x4f,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x52,
	0x5f, 0x50, 0x4f, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x52,
	0x5f, 0x50, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x74,
	0x0a, 0x22, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x52, 0x5f, 0x43, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x52, 0x5f, 0x43, 0x4f, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xc9, 0x01, 0x0a, 0x09, 0x45, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x35, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x34, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x33, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x32, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x31, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x31, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x32, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x33, 0x10, 0x09,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x34, 0x10, 0x0a,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x35, 0x10, 0x0b,
	0x2a, 0xdf, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41,
	0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x10, 0x07, 0x2a, 0x88, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x4f, 0x4d, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x58, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x49, 0x4f,
	0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x4c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0xc6, 0x01,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x57, 0x45, 0x45, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x58, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x54,
	0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x41, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x02,
	0x2a, 0xfc, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x45,
	0x4d, 0x50, 0x48, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x41, 0x4d, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x52, 0x4f, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x49, 0x50, 0x52, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x0b, 0x2a,
	0x9a, 0x03, 0x0a, 0x0b, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x44, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x4f, 0x59, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x41, 0x52, 0x52, 0x41, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4a, 0x45, 0x41, 0x4c, 0x4f, 0x55, 0x53, 0x59, 0x10, 0x0d, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x4b, 0x46, 0x55, 0x4c, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x0e, 0x2a, 0xe8, 0x01, 0x0a,
	0x0b, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x5f, 0x56, 0x49, 0x4e, 0x10, 0x0a, 0x2a, 0xaa, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x56, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x56, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x56, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50,
	0x41, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x56, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x56, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x56, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x10, 0x05, 0x2a, 0xa7, 0x05, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x43,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x55, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x47, 0x45,
	0x52, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x54, 0x41, 0x47, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x49, 0x46, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49,
	0x4e, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50,
	0x41, 0x53, 0x54, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x41,
	0x53, 0x54, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x13, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x54, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x19, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x4c, 0x59, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1b, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x56, 0x4f,
	0x4c, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55,
	0x53, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x55, 0x54, 0x55,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x1f, 0x2a, 0x55,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x46, 0x55, 0x4c, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55,
	0x50, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0xe3, 0x08,
	0x0a, 0x0e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x46, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x46, 0x56, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f,
	0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x46, 0x56, 0x5f, 0x50,
	0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x46, 0x56, 0x5f,
	0x50, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52,
	0x4f, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x45,
	0x58, 0x43, 0x4c, 0x41, 0x4d, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x0b, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50,
	0x52, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50,
	0x4c, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x47,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x0e,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x46, 0x56, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x53, 0x43, 0x55, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x46,
	0x56, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c,
	0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x46, 0x56,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x46, 0x56, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x46, 0x56, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x53, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x43, 0x41, 0x53,
	0x45, 0x5f, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x15, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x46, 0x56, 0x5f, 0x43, 0x41, 0x53,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46,
	0x56, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x45, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x47, 0x45, 0x52, 0x55, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x46, 0x56, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x46, 0x56,
	0x5f, 0x56, 0x45, 0x52, 0x42, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x49, 0x50, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x46, 0x56, 0x5f, 0x4d, 0x4f,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x1a,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x4d, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56,
	0x5f, 0x4d, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x46, 0x56, 0x5f, 0x4d, 0x4f, 0x4f, 0x44, 0x5f, 0x53,
	0x55, 0x42, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x46, 0x56, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x49, 0x4d, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x46, 0x56, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x10, 0x20, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x46, 0x56, 0x5f, 0x4e, 0x55,
	0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x46, 0x56, 0x5f, 0x4e,
	0x55, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x46, 0x56,
	0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x46, 0x56, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x46, 0x56, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x56,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x46, 0x56, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x29, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x46, 0x56, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46,
	0x56, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x45, 0x10, 0x2f, 0x2a, 0xb3, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48,
	0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x56, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x50, 0x54,
	0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x07, 0x2a, 0x9d, 0x01, 0x0a, 0x12, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x45, 0x4d, 0x50, 0x41, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x59, 0x10, 0x05, 0x2a, 0x91, 0x19, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x42, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x41, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x46, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4b, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x51, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4d,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41,
	0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x4e, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x48, 0x59, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x53, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x41, 0x56, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x41, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x59, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x5a, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4d, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x55, 0x10, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x10, 0x12, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4e, 0x10, 0x13, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x48, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x49, 0x10,
	0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x53,
	0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x52, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x47, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x59, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x41, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x48, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x45, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x59, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x5a, 0x48, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x56, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x57, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x10, 0x21, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x10, 0x22, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x52, 0x10, 0x23, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x53, 0x10, 0x24,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x10,
	0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x56,
	0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4c, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x5a, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x4e, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x4f, 0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x54, 0x10, 0x2b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x45, 0x10, 0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x10, 0x2d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4a, 0x10, 0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x46, 0x10, 0x31, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x4c, 0x10, 0x32, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x41, 0x10, 0x33, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x10, 0x34,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x10,
	0x35, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x4e,
	0x10, 0x36, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x47,
	0x55, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x48, 0x54, 0x10, 0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x48, 0x41, 0x10, 0x39, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x48, 0x45, 0x10, 0x3a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x48, 0x5a, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x48, 0x49, 0x10, 0x3c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x4f, 0x10, 0x3d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x55, 0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x41, 0x10, 0x3f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x45, 0x10, 0x41, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x10, 0x42, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x47, 0x10, 0x43, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4b, 0x10, 0x44,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4f, 0x10,
	0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x53,
	0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x54, 0x10, 0x47, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x55, 0x10, 0x48, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4a, 0x41, 0x10, 0x49, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x4a, 0x56, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4b, 0x4c, 0x10, 0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x4b, 0x4e, 0x10, 0x4c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x4d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x53, 0x10, 0x4e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x4b, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x4d, 0x10, 0x50, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x49, 0x10, 0x51, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x57, 0x10, 0x52, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x59, 0x10, 0x53, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x56, 0x10, 0x54,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x47, 0x10,
	0x55, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x4f,
	0x10, 0x56, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b,
	0x55, 0x10, 0x57, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x4b, 0x4a, 0x10, 0x58, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4c, 0x41, 0x10, 0x59, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x42, 0x10, 0x5a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x47, 0x10, 0x5b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x10, 0x5c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4e, 0x10, 0x5d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x5e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x5f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x55, 0x10, 0x60, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x56, 0x10, 0x61, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x56, 0x10, 0x62, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4b, 0x10, 0x63, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x47, 0x10, 0x64,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x53, 0x10,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4c,
	0x10, 0x66, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4d,
	0x54, 0x10, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x4d, 0x49, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x52, 0x10, 0x69, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x4d, 0x48, 0x10, 0x6a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4d, 0x4e, 0x10, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x56, 0x10, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x42, 0x10, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x44, 0x10, 0x6f, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x10, 0x70, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x47, 0x10, 0x71, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4e, 0x10, 0x72, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x73, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x74,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x52, 0x10,
	0x75, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x43,
	0x10, 0x76, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4f,
	0x4a, 0x10, 0x77, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x55, 0x10, 0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4f, 0x4d, 0x10, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x4f, 0x52, 0x10, 0x7a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4f, 0x53, 0x10, 0x7b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x10, 0x7c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x49, 0x10, 0x7d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x10, 0x7e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x10, 0x7f, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x53, 0x10, 0x80, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x54, 0x10, 0x81, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x51, 0x55, 0x10, 0x82,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x4d,
	0x10, 0x83, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x4e, 0x10, 0x84, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x4f, 0x10, 0x85, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x10, 0x86, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x41, 0x10, 0x87, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x88, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x44, 0x10, 0x89, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x10, 0x8a,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d,
	0x10, 0x8b, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x47, 0x10, 0x8c, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x52, 0x10, 0x8d, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x47, 0x44, 0x10, 0x8e, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4e, 0x10, 0x8f, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x10, 0x90, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4b, 0x10, 0x91, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4c, 0x10, 0x92,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4f,
	0x10, 0x93, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x10, 0x94, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x53, 0x10, 0x95, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x10, 0x96, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x57, 0x10, 0x97, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x53, 0x10, 0x98, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x56, 0x10, 0x99, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x10, 0x9a,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x45,
	0x10, 0x9b, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x47, 0x10, 0x9c, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x48, 0x10, 0x9d, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x10, 0x9e, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x10, 0x9f, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4b, 0x10, 0xa0, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4c, 0x10, 0xa1, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4e, 0x10, 0xa2,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x10, 0xa3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x52, 0x10, 0xa4, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x53, 0x10, 0xa5, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x54, 0x10, 0xa6, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x57, 0x10, 0xa7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x10, 0xa8, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x47, 0x10, 0xa9, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4b, 0x10, 0xaa,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x52,
	0x10, 0xab, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x5a, 0x10, 0xac, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x56, 0x45, 0x10, 0xad, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x49, 0x10, 0xae, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x10, 0xaf, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x41, 0x10, 0xb0, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x59, 0x10, 0xb1, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x4f, 0x10, 0xb2,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x59,
	0x10, 0xb3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x58, 0x48, 0x10, 0xb4, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x59, 0x49, 0x10, 0xb5, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x59, 0x4f, 0x10, 0xb6, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x5a, 0x41, 0x10, 0xb7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x5a, 0x55, 0x10, 0xb8, 0x01, 0x42, 0x25, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x50, 0x01, 0x5a, 0x06, 0x70, 0x62,
	0x2f, 0x6e, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_enumeration_proto_rawDescOnce sync.Once
	file_nlp_enumeration_proto_rawDescData = file_nlp_enumeration_proto_rawDesc
)

func file_nlp_enumeration_proto_rawDescGZIP() []byte {
	file_nlp_enumeration_proto_rawDescOnce.Do(func() {
		file_nlp_enumeration_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_enumeration_proto_rawDescData)
	})
	return file_nlp_enumeration_proto_rawDescData
}

var file_nlp_enumeration_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_nlp_enumeration_proto_goTypes = []interface{}{
	(SpeechPart)(0),                         // 0: nlp.SpeechPart
	(UniversalRelationType)(0),              // 1: nlp.UniversalRelationType
	(RelationType)(0),                       // 2: nlp.RelationType
	(SentenceType)(0),                       // 3: nlp.SentenceType
	(IssueResolutionConcludingEvent)(0),     // 4: nlp.IssueResolutionConcludingEvent
	(IssueResolutionParticipantOutcome)(0),  // 5: nlp.IssueResolutionParticipantOutcome
	(IssueResolutionConversationOutcome)(0), // 6: nlp.IssueResolutionConversationOutcome
	(EaseScore)(0),                          // 7: nlp.EaseScore
	(NamedEntityType)(0),                    // 8: nlp.NamedEntityType
	(BioMedEntityType)(0),                   // 9: nlp.BioMedEntityType
	(IdentifierType)(0),                     // 10: nlp.IdentifierType
	(ExpressiveType)(0),                     // 11: nlp.ExpressiveType
	(PronType)(0),                           // 12: nlp.PronType
	(EmotionType)(0),                        // 13: nlp.EmotionType
	(NumericType)(0),                        // 14: nlp.NumericType
	(ConversationReason)(0),                 // 15: nlp.ConversationReason
	(LinguisticFlag)(0),                     // 16: nlp.LinguisticFlag
	(ContentType)(0),                        // 17: nlp.ContentType
	(ContentSubtype)(0),                     // 18: nlp.ContentSubtype
	(MorphFeatValue)(0),                     // 19: nlp.MorphFeatValue
	(ChapterType)(0),                        // 20: nlp.ChapterType
	(ClassificationTask)(0),                 // 21: nlp.ClassificationTask
	(Language)(0),                           // 22: nlp.Language
}
var file_nlp_enumeration_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nlp_enumeration_proto_init() }
func file_nlp_enumeration_proto_init() {
	if File_nlp_enumeration_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_enumeration_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_enumeration_proto_goTypes,
		DependencyIndexes: file_nlp_enumeration_proto_depIdxs,
		EnumInfos:         file_nlp_enumeration_proto_enumTypes,
	}.Build()
	File_nlp_enumeration_proto = out.File
	file_nlp_enumeration_proto_rawDesc = nil
	file_nlp_enumeration_proto_goTypes = nil
	file_nlp_enumeration_proto_depIdxs = nil
}
