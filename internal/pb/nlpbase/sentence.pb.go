// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nlp/sentence.proto

package nlp

import (
	classification "github.com/ClarabridgeInc/ingestion-callback/internal/pb/services/classification"
	sentiment "github.com/ClarabridgeInc/ingestion-callback/internal/pb/services/sentiment"
	_ "github.com/ClarabridgeInc/ingestion-callback/internal/pb/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Sentence
//
// text                    Sentence text.
// start                   Starting character offset in verbatim text.
// end                     Ending character offset (exclusive).
// tokens                  Sentence tokens.
// relations               Relations between tokens, only within a sentence.
// word_count              Count of tokens that qualify as words.
// sentence_type           One or more sentence actionability types.
// ease_score              Ease/effort score.
// named_entities          One or more World Awareness entity types.
// identifiers             One or more dentifiers (mention, hashtag, url, ...)
// expressives             One or more expressive types (emoticon, profanity)
// participant_id          (dialogs only) The id of the participant.
// time_interval           (dialogs only) The start and end time of the sentence.
// reason                  (dialogs only) The reason at sentence level.
// emotion_type            One or more sentence emotion types.
// emotion_intensity       Intensity of the emotion(s) found in the sentence.
// numerics                One or more numeric types (currency, energy, ...)
// loyalty_tenure          Length of loyalty tenure (in years)
// bioMed_entities         One or more Biomedical entity types.
// chapters                (dialogs only) The chapter the sentence belongs to.
// sentence_sentiment      Sentiment information of this sentence.
// classification_result   Classification Result.
type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version              int32                                        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Text                 string                                       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Start                int32                                        `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End                  int32                                        `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Tokens               []*Token                                     `protobuf:"bytes,5,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Relations            []*Relation                                  `protobuf:"bytes,6,rep,name=relations,proto3" json:"relations,omitempty"`
	WordCount            int32                                        `protobuf:"varint,7,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	SentenceType         []SentenceType                               `protobuf:"varint,8,rep,packed,name=sentence_type,json=sentenceType,proto3,enum=nlp.SentenceType" json:"sentence_type,omitempty"`
	EaseScore            EaseScore                                    `protobuf:"varint,9,opt,name=ease_score,json=easeScore,proto3,enum=nlp.EaseScore" json:"ease_score,omitempty"`
	NamedEntities        []NamedEntityType                            `protobuf:"varint,10,rep,packed,name=named_entities,json=namedEntities,proto3,enum=nlp.NamedEntityType" json:"named_entities,omitempty"`
	Identifiers          []IdentifierType                             `protobuf:"varint,11,rep,packed,name=identifiers,proto3,enum=nlp.IdentifierType" json:"identifiers,omitempty"`
	Expressives          []ExpressiveType                             `protobuf:"varint,12,rep,packed,name=expressives,proto3,enum=nlp.ExpressiveType" json:"expressives,omitempty"`
	ParticipantId        int32                                        `protobuf:"varint,13,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	TimeInterval         *TimeInterval                                `protobuf:"bytes,14,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	Reason               []ConversationReason                         `protobuf:"varint,15,rep,packed,name=reason,proto3,enum=nlp.ConversationReason" json:"reason,omitempty"`
	EmotionType          []EmotionType                                `protobuf:"varint,16,rep,packed,name=emotion_type,json=emotionType,proto3,enum=nlp.EmotionType" json:"emotion_type,omitempty"`
	EmotionIntensity     int32                                        `protobuf:"varint,17,opt,name=emotion_intensity,json=emotionIntensity,proto3" json:"emotion_intensity,omitempty"`
	Numerics             []NumericType                                `protobuf:"varint,18,rep,packed,name=numerics,proto3,enum=nlp.NumericType" json:"numerics,omitempty"`
	LoyaltyTenure        float64                                      `protobuf:"fixed64,19,opt,name=loyalty_tenure,json=loyaltyTenure,proto3" json:"loyalty_tenure,omitempty"`
	BioMedEntities       []BioMedEntityType                           `protobuf:"varint,20,rep,packed,name=bioMed_entities,json=bioMedEntities,proto3,enum=nlp.BioMedEntityType" json:"bioMed_entities,omitempty"`
	Chapters             []ChapterType                                `protobuf:"varint,21,rep,packed,name=chapters,proto3,enum=nlp.ChapterType" json:"chapters,omitempty"`
	SentenceSentiment    *sentiment.SentenceSentiment                 `protobuf:"bytes,22,opt,name=sentence_sentiment,json=sentenceSentiment,proto3" json:"sentence_sentiment,omitempty"`
	ClassificationResult *classification.SentenceClassificationResult `protobuf:"bytes,23,opt,name=classification_result,json=classificationResult,proto3" json:"classification_result,omitempty"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_sentence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_sentence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_nlp_sentence_proto_rawDescGZIP(), []int{0}
}

func (x *Sentence) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Sentence) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Sentence) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Sentence) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Sentence) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Sentence) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Sentence) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *Sentence) GetSentenceType() []SentenceType {
	if x != nil {
		return x.SentenceType
	}
	return nil
}

func (x *Sentence) GetEaseScore() EaseScore {
	if x != nil {
		return x.EaseScore
	}
	return EaseScore_EASE_NONE
}

func (x *Sentence) GetNamedEntities() []NamedEntityType {
	if x != nil {
		return x.NamedEntities
	}
	return nil
}

func (x *Sentence) GetIdentifiers() []IdentifierType {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Sentence) GetExpressives() []ExpressiveType {
	if x != nil {
		return x.Expressives
	}
	return nil
}

func (x *Sentence) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Sentence) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *Sentence) GetReason() []ConversationReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Sentence) GetEmotionType() []EmotionType {
	if x != nil {
		return x.EmotionType
	}
	return nil
}

func (x *Sentence) GetEmotionIntensity() int32 {
	if x != nil {
		return x.EmotionIntensity
	}
	return 0
}

func (x *Sentence) GetNumerics() []NumericType {
	if x != nil {
		return x.Numerics
	}
	return nil
}

func (x *Sentence) GetLoyaltyTenure() float64 {
	if x != nil {
		return x.LoyaltyTenure
	}
	return 0
}

func (x *Sentence) GetBioMedEntities() []BioMedEntityType {
	if x != nil {
		return x.BioMedEntities
	}
	return nil
}

func (x *Sentence) GetChapters() []ChapterType {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Sentence) GetSentenceSentiment() *sentiment.SentenceSentiment {
	if x != nil {
		return x.SentenceSentiment
	}
	return nil
}

func (x *Sentence) GetClassificationResult() *classification.SentenceClassificationResult {
	if x != nil {
		return x.ClassificationResult
	}
	return nil
}

//*
// Token
//
// text                 Should match the text substring in the containing sentence.
// normal_form          Generally lemmatized upcased version of text (normal form).
// start                Starting character offset relative to the sentence text.
// end                  Ending character offset (exclusive).
// speech_part          Part of speech tag.
// named_entity_type    The World Awareness entity types.
// identifier_type      Various kinds of identifiers: mention, hashtag, url, ...
// expressive_type      Emoticon or profanity.
// exception_rule_flags AKA linguistic flags, can be language-specific.
// bioMed_entity_type   The Biomedical entity types.
// token_sentiment      Sentiment information of this token.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            int32                     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Text               string                    `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	NormalForm         string                    `protobuf:"bytes,3,opt,name=normal_form,json=normalForm,proto3" json:"normal_form,omitempty"`
	Start              int32                     `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End                int32                     `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	SpeechPart         SpeechPart                `protobuf:"varint,6,opt,name=speech_part,json=speechPart,proto3,enum=nlp.SpeechPart" json:"speech_part,omitempty"`
	NamedEntityType    NamedEntityType           `protobuf:"varint,7,opt,name=named_entity_type,json=namedEntityType,proto3,enum=nlp.NamedEntityType" json:"named_entity_type,omitempty"`
	IdentifierType     IdentifierType            `protobuf:"varint,8,opt,name=identifier_type,json=identifierType,proto3,enum=nlp.IdentifierType" json:"identifier_type,omitempty"`
	ExpressiveType     ExpressiveType            `protobuf:"varint,9,opt,name=expressive_type,json=expressiveType,proto3,enum=nlp.ExpressiveType" json:"expressive_type,omitempty"`
	ExceptionRuleFlags []LinguisticFlag          `protobuf:"varint,10,rep,packed,name=exception_rule_flags,json=exceptionRuleFlags,proto3,enum=nlp.LinguisticFlag" json:"exception_rule_flags,omitempty"`
	Negation           bool                      `protobuf:"varint,11,opt,name=negation,proto3" json:"negation,omitempty"`
	PronType           PronType                  `protobuf:"varint,12,opt,name=pron_type,json=pronType,proto3,enum=nlp.PronType" json:"pron_type,omitempty"`
	NumericType        NumericType               `protobuf:"varint,13,opt,name=numeric_type,json=numericType,proto3,enum=nlp.NumericType" json:"numeric_type,omitempty"`
	BioMedEntityType   BioMedEntityType          `protobuf:"varint,14,opt,name=bioMed_entity_type,json=bioMedEntityType,proto3,enum=nlp.BioMedEntityType" json:"bioMed_entity_type,omitempty"`
	TokenSentiment     *sentiment.TokenSentiment `protobuf:"bytes,15,opt,name=token_sentiment,json=tokenSentiment,proto3" json:"token_sentiment,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_sentence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_sentence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_nlp_sentence_proto_rawDescGZIP(), []int{1}
}

func (x *Token) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Token) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Token) GetNormalForm() string {
	if x != nil {
		return x.NormalForm
	}
	return ""
}

func (x *Token) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Token) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Token) GetSpeechPart() SpeechPart {
	if x != nil {
		return x.SpeechPart
	}
	return SpeechPart_SP_NONE
}

func (x *Token) GetNamedEntityType() NamedEntityType {
	if x != nil {
		return x.NamedEntityType
	}
	return NamedEntityType_NAMED_ENTITY_NONE
}

func (x *Token) GetIdentifierType() IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return IdentifierType_IDENTIFIER_NONE
}

func (x *Token) GetExpressiveType() ExpressiveType {
	if x != nil {
		return x.ExpressiveType
	}
	return ExpressiveType_EXPRESSIVE_NONE
}

func (x *Token) GetExceptionRuleFlags() []LinguisticFlag {
	if x != nil {
		return x.ExceptionRuleFlags
	}
	return nil
}

func (x *Token) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *Token) GetPronType() PronType {
	if x != nil {
		return x.PronType
	}
	return PronType_PRON_NONE
}

func (x *Token) GetNumericType() NumericType {
	if x != nil {
		return x.NumericType
	}
	return NumericType_NUMERIC_NONE
}

func (x *Token) GetBioMedEntityType() BioMedEntityType {
	if x != nil {
		return x.BioMedEntityType
	}
	return BioMedEntityType_BIOMED_ENTITY_NONE
}

func (x *Token) GetTokenSentiment() *sentiment.TokenSentiment {
	if x != nil {
		return x.TokenSentiment
	}
	return nil
}

//*
// Linguistic/dependency relation
//
// head             Token index of head token (zero-indexed).
// dependent        Token index of dependent token (zero-indexed).
// contentful       True if the relation is between two content words (based on speech part values).
// universal_type   Universal dependency relation label.
// type             Relation type of neutral scheme from shared.
type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       int32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Head          int32                 `protobuf:"varint,2,opt,name=head,proto3" json:"head,omitempty"`
	Dependent     int32                 `protobuf:"varint,3,opt,name=dependent,proto3" json:"dependent,omitempty"`
	Contentful    bool                  `protobuf:"varint,4,opt,name=contentful,proto3" json:"contentful,omitempty"`
	UniversalType UniversalRelationType `protobuf:"varint,5,opt,name=universal_type,json=universalType,proto3,enum=nlp.UniversalRelationType" json:"universal_type,omitempty"`
	Type          RelationType          `protobuf:"varint,6,opt,name=type,proto3,enum=nlp.RelationType" json:"type,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlp_sentence_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_nlp_sentence_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_nlp_sentence_proto_rawDescGZIP(), []int{2}
}

func (x *Relation) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Relation) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *Relation) GetDependent() int32 {
	if x != nil {
		return x.Dependent
	}
	return 0
}

func (x *Relation) GetContentful() bool {
	if x != nil {
		return x.Contentful
	}
	return false
}

func (x *Relation) GetUniversalType() UniversalRelationType {
	if x != nil {
		return x.UniversalType
	}
	return UniversalRelationType_UDEPS_RELATION_NONE
}

func (x *Relation) GetType() RelationType {
	if x != nil {
		return x.Type
	}
	return RelationType_RT_NONE
}

var File_nlp_sentence_proto protoreflect.FileDescriptor

var file_nlp_sentence_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x6c, 0x70, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x6c, 0x70, 0x1a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x6c, 0x70, 0x2f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd3, 0x08, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x45, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x65, 0x6e, 0x75,
	0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x42, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x62, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a,
	0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x03, 0xc0, 0x3e, 0x05, 0x22, 0xc0, 0x05, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4c, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x12, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x62, 0x69,
	0x6f, 0x4d, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x42, 0x69, 0x6f,
	0x4d, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x62,
	0x69, 0x6f, 0x4d, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x03, 0xc0, 0x3e, 0x03, 0x22, 0xe5, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x66, 0x75, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x66, 0x75,
	0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x03, 0xc0, 0x3e, 0x01,
	0x42, 0x25, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6c, 0x70, 0x50, 0x01, 0x5a,
	0x06, 0x70, 0x62, 0x2f, 0x6e, 0x6c, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlp_sentence_proto_rawDescOnce sync.Once
	file_nlp_sentence_proto_rawDescData = file_nlp_sentence_proto_rawDesc
)

func file_nlp_sentence_proto_rawDescGZIP() []byte {
	file_nlp_sentence_proto_rawDescOnce.Do(func() {
		file_nlp_sentence_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlp_sentence_proto_rawDescData)
	})
	return file_nlp_sentence_proto_rawDescData
}

var file_nlp_sentence_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nlp_sentence_proto_goTypes = []interface{}{
	(*Sentence)(nil),                    // 0: nlp.Sentence
	(*Token)(nil),                       // 1: nlp.Token
	(*Relation)(nil),                    // 2: nlp.Relation
	(SentenceType)(0),                   // 3: nlp.SentenceType
	(EaseScore)(0),                      // 4: nlp.EaseScore
	(NamedEntityType)(0),                // 5: nlp.NamedEntityType
	(IdentifierType)(0),                 // 6: nlp.IdentifierType
	(ExpressiveType)(0),                 // 7: nlp.ExpressiveType
	(*TimeInterval)(nil),                // 8: nlp.dialog.TimeInterval
	(ConversationReason)(0),             // 9: nlp.ConversationReason
	(EmotionType)(0),                    // 10: nlp.EmotionType
	(NumericType)(0),                    // 11: nlp.NumericType
	(BioMedEntityType)(0),               // 12: nlp.BioMedEntityType
	(ChapterType)(0),                    // 13: nlp.ChapterType
	(*sentiment.SentenceSentiment)(nil), // 14: sentiment.SentenceSentiment
	(*classification.SentenceClassificationResult)(nil), // 15: classification.SentenceClassificationResult
	(SpeechPart)(0),                  // 16: nlp.SpeechPart
	(LinguisticFlag)(0),              // 17: nlp.LinguisticFlag
	(PronType)(0),                    // 18: nlp.PronType
	(*sentiment.TokenSentiment)(nil), // 19: sentiment.TokenSentiment
	(UniversalRelationType)(0),       // 20: nlp.UniversalRelationType
	(RelationType)(0),                // 21: nlp.RelationType
}
var file_nlp_sentence_proto_depIdxs = []int32{
	1,  // 0: nlp.Sentence.tokens:type_name -> nlp.Token
	2,  // 1: nlp.Sentence.relations:type_name -> nlp.Relation
	3,  // 2: nlp.Sentence.sentence_type:type_name -> nlp.SentenceType
	4,  // 3: nlp.Sentence.ease_score:type_name -> nlp.EaseScore
	5,  // 4: nlp.Sentence.named_entities:type_name -> nlp.NamedEntityType
	6,  // 5: nlp.Sentence.identifiers:type_name -> nlp.IdentifierType
	7,  // 6: nlp.Sentence.expressives:type_name -> nlp.ExpressiveType
	8,  // 7: nlp.Sentence.time_interval:type_name -> nlp.dialog.TimeInterval
	9,  // 8: nlp.Sentence.reason:type_name -> nlp.ConversationReason
	10, // 9: nlp.Sentence.emotion_type:type_name -> nlp.EmotionType
	11, // 10: nlp.Sentence.numerics:type_name -> nlp.NumericType
	12, // 11: nlp.Sentence.bioMed_entities:type_name -> nlp.BioMedEntityType
	13, // 12: nlp.Sentence.chapters:type_name -> nlp.ChapterType
	14, // 13: nlp.Sentence.sentence_sentiment:type_name -> sentiment.SentenceSentiment
	15, // 14: nlp.Sentence.classification_result:type_name -> classification.SentenceClassificationResult
	16, // 15: nlp.Token.speech_part:type_name -> nlp.SpeechPart
	5,  // 16: nlp.Token.named_entity_type:type_name -> nlp.NamedEntityType
	6,  // 17: nlp.Token.identifier_type:type_name -> nlp.IdentifierType
	7,  // 18: nlp.Token.expressive_type:type_name -> nlp.ExpressiveType
	17, // 19: nlp.Token.exception_rule_flags:type_name -> nlp.LinguisticFlag
	18, // 20: nlp.Token.pron_type:type_name -> nlp.PronType
	11, // 21: nlp.Token.numeric_type:type_name -> nlp.NumericType
	12, // 22: nlp.Token.bioMed_entity_type:type_name -> nlp.BioMedEntityType
	19, // 23: nlp.Token.token_sentiment:type_name -> sentiment.TokenSentiment
	20, // 24: nlp.Relation.universal_type:type_name -> nlp.UniversalRelationType
	21, // 25: nlp.Relation.type:type_name -> nlp.RelationType
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_nlp_sentence_proto_init() }
func file_nlp_sentence_proto_init() {
	if File_nlp_sentence_proto != nil {
		return
	}
	file_nlp_dialog_time_interval_proto_init()
	file_nlp_enumeration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nlp_sentence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_sentence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlp_sentence_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlp_sentence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlp_sentence_proto_goTypes,
		DependencyIndexes: file_nlp_sentence_proto_depIdxs,
		MessageInfos:      file_nlp_sentence_proto_msgTypes,
	}.Build()
	File_nlp_sentence_proto = out.File
	file_nlp_sentence_proto_rawDesc = nil
	file_nlp_sentence_proto_goTypes = nil
	file_nlp_sentence_proto_depIdxs = nil
}
